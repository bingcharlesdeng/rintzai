


`/Users/charlesdeng/code/rintzai/src/components/Journal/searchBar.css`:

```````css
.search-bar-container {
    position: relative;
    width: 100%;
  }
  
  .search-input {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: white;
    border: 1px solid #ddd;
    border-top: none;
    border-radius: 0 0 4px 4px;
    list-style-type: none;
    padding: 0;
    margin: 0;
    max-height: 300px;
    overflow-y: auto;
    z-index: 1000;
  }
  
  .search-results li {
    padding: 10px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
  }
  
  .search-results li:last-child {
    border-bottom: none;
  }
  
  .search-results li:hover {
    background-color: #f5f5f5;
  }
  
  .search-results h4 {
    margin: 0 0 5px 0;
    font-size: 16px;
  }
  
  .search-results p {
    margin: 0;
    font-size: 14px;
    color: #666;
  }
  
  mark {
    background-color: yellow;
    padding: 0 2px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/EntryModal.js`:

```````js
import React from 'react';
import './entryModal.css';

const EntryModal = ({ entry, isOpen, onClose, highlightSearchTerm }) => {
  if (!isOpen || !entry) return null;

  const { title, content, date, mood, tags } = entry;
    console.log("OPened entry modal");
  return (
    <div className="entry-modal-overlay" onClick={onClose}>
      <div className="entry-modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="entry-modal-header">
          <h2 className="entry-modal-title">{title}</h2>
          <button className="entry-modal-close" onClick={onClose}>
            &times;
          </button>
        </div>
        <div className="entry-modal-body">
          <div className="entry-modal-meta">
            <p className="entry-modal-date">
              {date instanceof Date ? date.toLocaleDateString() : 'Unknown date'}
            </p>
            <p className="entry-modal-mood">Mood: {mood}</p>
            {tags && tags.length > 0 && (
              <div className="entry-modal-tags">
                Tags: {tags.map((tag, index) => (
                  <span key={index} className="entry-modal-tag">{tag}</span>
                ))}
              </div>
            )}
          </div>
          <div
            className="entry-modal-content"
            dangerouslySetInnerHTML={{ __html: highlightSearchTerm(content) }}
          />
        </div>
      </div>
    </div>
  );
};

export default EntryModal;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/JournalInsights.js`:

```````js
import React from 'react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import './journalInsights.css';

const JournalInsights = ({ entries = [] }) => {
  console.log('Rendering JournalInsights with entries:', entries);

  const moodData = entries.reduce((acc, entry) => {
    if (entry && entry.mood) {
      acc[entry.mood] = (acc[entry.mood] || 0) + 1;
    }
    return acc;
  }, {});

  const moodChartData = Object.keys(moodData).map(mood => ({
    name: mood,
    value: moodData[mood]
  }));

  const tagData = entries.reduce((acc, entry) => {
    if (entry && entry.tags && Array.isArray(entry.tags)) {
      entry.tags.forEach(tag => {
        acc[tag] = (acc[tag] || 0) + 1;
      });
    }
    return acc;
  }, {});

  const tagChartData = Object.keys(tagData)
    .map(tag => ({ name: tag, count: tagData[tag] }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 5);

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

  return (
    <div className="journal-insights">
      <h2>Journal Insights</h2>
      <div className="insight-charts">
        <div className="mood-distribution">
          <h3>Mood Distribution</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={moodChartData}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {moodChartData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
        <div className="top-tags">
          <h3>Top 5 Tags</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={tagChartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="count" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};

export default JournalInsights;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/JournalSearch.js`:

```````js
import React, { useState } from 'react';
import './journalSearch.css';

const JournalSearch = ({ onSearch }) => {
  const [searchTerm, setSearchTerm] = useState('');

  const handleSearch = (e) => {
    e.preventDefault();
    onSearch(searchTerm);
  };

  return (
    <div className="journal-search">
      <form onSubmit={handleSearch}>
        <input
          type="text"
          placeholder="Search journal entries..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button type="submit">Search</button>
      </form>
    </div>
  );
};

export default JournalSearch;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/entryModal.css`:

```````css
.entry-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .entry-modal-content {
    background-color: #fff;
    border-radius: 8px;
    width: 80%;
    max-width: 600px;
    max-height: 80vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
  }
  
  .entry-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid #e5e5e5;
  }
  
  .entry-modal-title {
    font-size: 1.5rem;
    margin: 0;
  }
  
  .entry-modal-close {
    background-color: transparent;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #999;
    transition: color 0.2s ease-in-out;
  }
  
  .entry-modal-close:hover {
    color: #333;
  }
  
  .entry-modal-body {
    padding: 1rem;
  }
  
  .entry-modal-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  
  .entry-modal-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .entry-modal-tag {
    background-color: #f0f0f0;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
  }
  
  .entry-modal-content {
    line-height: 1.6;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/journalSearch.css`:

```````css
.journal-search {
  margin-bottom: 1rem;
}

.journal-search form {
  display: flex;
  align-items: center;
}

.journal-search input {
  flex: 1;
  padding: 0.5rem;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
}

.journal-search button {
  margin-left: 1rem;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  background-color: #764ba2;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/journalCalendar.css`:

```````css
.journal-calendar {
    margin-bottom: 30px;
  }
  
  .custom-calendar {
    width: 100%;
    max-width: 350px;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-family: Arial, sans-serif;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .calendar-entry-indicator {
    height: 5px;
    width: 5px;
    border-radius: 50%;
    margin: 0 auto;
  }
  
  .calendar-entry-indicator.happy { background-color: #ffd700; }
  .calendar-entry-indicator.sad { background-color: #87cefa; }
  .calendar-entry-indicator.angry { background-color: #ff6347; }
  .calendar-entry-indicator.neutral { background-color: #d3d3d3; }
  
  .react-calendar__tile--active {
    background: #e6f7ff;
    color: black;
  }
  
  .react-calendar__tile--active:enabled:hover,
  .react-calendar__tile--active:enabled:focus {
    background: #d1efff;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/NoteEntryForm.js`:

```````js
import React, { useState } from 'react';
import './noteEntryForm.css';

const NoteEntryForm = () => {
  const [notes, setNotes] = useState('');

  const handleNotesChange = (e) => setNotes(e.target.value);

  return (
    <div className="note-entry-form">
      <h3 className="note-form-title">Add notes or annotations</h3>
      <textarea
        value={notes}
        onChange={handleNotesChange}
        placeholder="Add notes or annotations (optional)"
        className="notes-textarea"
      />
    </div>
  );
};

export default NoteEntryForm;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/TagCloud.js`:

```````js
import React from 'react';
import './tagCloud.css';

const TagCloud = ({ entries = [] }) => {
  console.log('Rendering TagCloud with entries:', entries);

  const tagCounts = entries.reduce((acc, entry) => {
    if (entry && entry.tags && Array.isArray(entry.tags)) {
      entry.tags.forEach(tag => {
        acc[tag] = (acc[tag] || 0) + 1;
      });
    }
    return acc;
  }, {});

  const tagData = Object.keys(tagCounts).map(tag => ({
    value: tag,
    count: tagCounts[tag]
  }));

  // Sort tags by count (descending) and limit to top 30
  const sortedTags = tagData
    .sort((a, b) => b.count - a.count)
    .slice(0, 30);

  return (
    <div className="tag-cloud">
      <h3>Tag Cloud</h3>
      <div className="tag-cloud-content">
        {sortedTags.map(tag => (
          <span
            key={tag.value}
            className="tag-item"
            style={{
              fontSize: `${Math.max(12, Math.min(30, 12 + tag.count * 2))}px`
            }}
          >
            {tag.value}
          </span>
        ))}
      </div>
    </div>
  );
};

export default TagCloud;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/tagCloud.css`:

```````css
.tag-cloud {
    margin-bottom: 30px;
  }
  
  .tag-cloud h3 {
    margin-bottom: 15px;
    color: #333;
    font-size: 1.2rem;
  }
  
  .tag-cloud-content {
    background-color: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .tag-item {
    display: inline-block;
    margin: 5px;
    padding: 3px 8px;
    background-color: #f0f0f0;
    border-radius: 15px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
  }
  
  .tag-item:hover {
    background-color: #4CAF50;
    color: white;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/JournalPrompts.js`:

```````js
import React, { useState } from 'react';
import './journalPrompts.css';

const prompts = [
  "What made you smile today?",
  "Describe a challenge you faced and how you overcame it.",
  "What are you looking forward to in the near future?",
  "Reflect on a recent accomplishment, big or small.",
  "Write about a person who has positively influenced your life.",
];

const JournalPrompts = ({ onJournalSubmit }) => {
  const [selectedPrompt, setSelectedPrompt] = useState('');
  const [journalEntry, setJournalEntry] = useState('');

  const handlePromptChange = (e) => {
    setSelectedPrompt(e.target.value);
  };

  const handleJournalEntry = (e) => {
    setJournalEntry(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!journalEntry) return;

    console.log('Submitting journal prompt entry:', selectedPrompt, journalEntry);
    onJournalSubmit(journalEntry, selectedPrompt);
    setJournalEntry('');
    setSelectedPrompt('');
  };

  return (
    <div className="journal-prompts-container">
      <h3>Journal Prompts</h3>
      <select value={selectedPrompt} onChange={handlePromptChange}>
        <option value="">Select a prompt</option>
        {prompts.map((prompt, index) => (
          <option key={index} value={prompt}>
            {prompt}
          </option>
        ))}
      </select>
      {selectedPrompt && (
        <form onSubmit={handleSubmit}>
          <textarea
            value={journalEntry}
            onChange={handleJournalEntry}
            placeholder="Write your journal entry here..."
          />
          <button type="submit">Submit</button>
        </form>
      )}
    </div>
  );
};

export default JournalPrompts;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/journalEntryForm.css`:

```````css
.journal-entry-form {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin-bottom: 30px;
  background-color: #f9f9f9;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.journal-entry-form input[type="text"],
.journal-entry-form textarea,
.journal-entry-form select {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
  transition: border-color 0.3s ease;
}

.journal-entry-form input[type="text"]:focus,
.journal-entry-form textarea:focus,
.journal-entry-form select:focus {
  outline: none;
  border-color: #4CAF50;
}

.journal-entry-form textarea {
  height: 150px;
  resize: vertical;
}

.journal-entry-form button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}

.journal-entry-form button:hover {
  background-color: #45a049;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/MoodTracker.js`:

```````js
import React from 'react';
import './moodTracker.css';

const MoodTracker = ({ entries, onFilterChange }) => {
  console.log('Rendering MoodTracker with entries:', entries);

  const moodCounts = entries.reduce((acc, entry) => {
    acc[entry.mood] = (acc[entry.mood] || 0) + 1;
    return acc;
  }, {});

  const moods = ['happy', 'sad', 'angry', 'neutral'];

  return (
    <div className="mood-tracker">
      <h3>Mood Tracker</h3>
      <div className="mood-buttons">
        {moods.map(mood => (
          <button
            key={mood}
            className={`mood-button ${mood}`}
            onClick={() => onFilterChange(mood)}
          >
            {mood.charAt(0).toUpperCase() + mood.slice(1)}
            <span className="mood-count">{moodCounts[mood] || 0}</span>
          </button>
        ))}
        <button
          className="mood-button all"
          onClick={() => onFilterChange('all')}
        >
          All
        </button>
      </div>
    </div>
  );
};

export default MoodTracker;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/JournalEntryList.js`:

```````js
import React from 'react';
import './journalEntryList.css';

const JournalEntryList = ({ entries, onEntrySelect, searchTerm }) => {
  console.log('Rendering JournalEntryList with entries:', entries);

  const sortedEntries = entries.sort((a, b) => new Date(b.date) - new Date(a.date));

  const highlightSearchMatches = (text, term) => {
    if (!term) return text;
    const parts = text.split(new RegExp(`(${term})`, 'gi'));
    return parts.map((part, index) =>
      part.toLowerCase() === term.toLowerCase() ? (
        <mark key={index}>{part}</mark>
      ) : (
        part
      )
    );
  };

  const formatDate = (date) => {
    return new Date(date).toLocaleDateString();
  };

  return (
    <div className="journal-entry-list">
      <h2>Your Entries</h2>
      {sortedEntries.map((entry) => (
        <div
          key={entry.id}
          className="entry-item"
          onClick={() => onEntrySelect(entry)}
        >
          <h3>{highlightSearchMatches(entry.title, searchTerm)}</h3>
          <p>
            {highlightSearchMatches(entry.content.substring(0, 100), searchTerm)}
            ...
          </p>
          <div className="entry-meta">
            <span className={`mood-indicator ${entry.mood}`}>{entry.mood}</span>
            <span className="entry-date">{formatDate(entry.date)}</span>
          </div>
        </div>
      ))}
    </div>
  );
};

export default JournalEntryList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/journalInsights.css`:

```````css
.journal-insights {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .journal-insights h2 {
    margin-bottom: 20px;
    color: #333;
    font-size: 1.8rem;
  }
  
  .insight-charts {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }
  
  .mood-distribution,
  .top-tags {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 15px;
  }
  
  .mood-distribution h3,
  .top-tags h3 {
    margin-bottom: 15px;
    color: #444;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/noteEntryForm.css`:

```````css
.note-entry-form {
    margin-bottom: 2rem;
  }
  
  .note-form-title {
    font-size: 1.25rem;
    margin-bottom: 1rem;
    color: #444;
  }
  
  .notes-textarea {
    width: 100%;
    height: 100px;
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    outline: none;
    resize: vertical;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }
  
  .notes-textarea:focus {
    border-color: #0084ff;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/EntryDetails.js`:

```````js
import React from 'react';
import './entryDetails.css';

const EntryDetails = ({ entry, onClose, highlightSearchTerm }) => {
  if (!entry) {
    return null;
  }

  const { title, content, date, mood, tags } = entry;

  return (
    <div className="entry-details-overlay" onClick={onClose}>
      <div className="entry-details-container" onClick={(e) => e.stopPropagation()}>
        <div className="entry-details-header">
          <h2 className="entry-details-title">{title}</h2>
          <button className="entry-details-close" onClick={onClose}>
            &times;
          </button>
        </div>
        <div className="entry-details-body">
          <div className="entry-details-meta">
            <div className="entry-details-date">
              <i className="far fa-calendar-alt"></i>
              <span>{date instanceof Date ? date.toLocaleDateString() : 'Unknown date'}</span>
            </div>
            <div className="entry-details-mood">
              <i className="far fa-smile"></i>
              <span>{mood}</span>
            </div>
            {tags && tags.length > 0 && (
              <div className="entry-details-tags">
                <i className="far fa-tags"></i>
                {tags.map((tag, index) => (
                  <span key={index} className="entry-details-tag">{tag}</span>
                ))}
              </div>
            )}
          </div>
          <div
            className="entry-details-content"
            dangerouslySetInnerHTML={{ __html: highlightSearchTerm(content) }}
          />
        </div>
      </div>
    </div>
  );
};

export default EntryDetails;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/SearchBar.js`:

```````js
import React, { useState, useEffect } from 'react';
import './searchBar.css';

const SearchBar = ({ entries, onSearch, onEntrySelect }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      if (searchTerm) {
        const results = entries.filter(entry =>
          (entry.title && entry.title.toLowerCase().includes(searchTerm.toLowerCase())) ||
          (entry.content && entry.content.toLowerCase().includes(searchTerm.toLowerCase()))
        );
        setSearchResults(results);
        onSearch(searchTerm);
      } else {
        setSearchResults([]);
        onSearch('');
      }
    }, 300);

    return () => clearTimeout(delayDebounceFn);
  }, [searchTerm, entries, onSearch]);

  const highlightText = (text, highlight) => {
    if (!text) return '';
    const parts = text.split(new RegExp(`(${highlight})`, 'gi'));
    return parts.map((part, index) => 
      part.toLowerCase() === highlight.toLowerCase() 
        ? <mark key={index}>{part}</mark> 
        : part
    );
  };

  return (
    <div className="search-bar-container">
      <input
        type="text"
        className="search-input"
        placeholder="Search entries..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      {searchResults.length > 0 && (
        <ul className="search-results">
          {searchResults.map(entry => (
            <li key={entry.id} onClick={() => onEntrySelect(entry)}>
              <h4>{highlightText(entry.title, searchTerm)}</h4>
              <p>{highlightText(entry.content.substring(0, 100), searchTerm)}...</p>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default SearchBar;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/JournalCalendar.js`:

```````js
import React from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import './journalCalendar.css';

const JournalCalendar = ({ entries = [], onSelectDate }) => {
  console.log('Rendering JournalCalendar with entries:', entries);

  const entriesMap = entries.reduce((acc, entry) => {
    let dateKey;
    if (entry.date instanceof Date) {
      dateKey = entry.date.toDateString();
    } else if (typeof entry.date === 'string') {
      dateKey = new Date(entry.date).toDateString();
    } else {
      console.error('Invalid date format for entry:', entry);
      return acc;
    }
    acc[dateKey] = entry;
    return acc;
  }, {});

  const tileContent = ({ date, view }) => {
    if (view === 'month') {
      const dateKey = date.toDateString();
      if (dateKey in entriesMap) {
        return <div className={`calendar-entry-indicator ${entriesMap[dateKey].mood}`}></div>;
      }
    }
    return null;
  };

  const handleDateClick = (date) => {
    const dateKey = date.toDateString();
    if (dateKey in entriesMap) {
      onSelectDate(entriesMap[dateKey]);
    }
  };

  return (
    <div className="journal-calendar">
      <Calendar
        tileContent={tileContent}
        onClickDay={handleDateClick}
        className="custom-calendar"
      />
    </div>
  );
};

export default JournalCalendar;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/Journal.js`:

```````js
import React, { useState, useEffect } from 'react';
import { collection, query, where, orderBy, getDocs, addDoc } from 'firebase/firestore';
import { serverTimestamp } from 'firebase/firestore';

import { db } from '../../firebase/firebase';
import { useUserContext } from '../User/UserContext';
import JournalEntryForm from './JournalEntryForm';
import JournalEntryList from './JournalEntryList';
import JournalInsights from './JournalInsights';
import JournalCalendar from './JournalCalendar';
import MoodTracker from './MoodTracker';
import TagCloud from './TagCloud';
import SearchBar from './SearchBar';
import JournalPrompts from './JournalPrompts';
import GratitudeList from './GratitudeList';
import PastEntryList from './PastEntryList';
import EntryDetails from './EntryDetails';
import ErrorBoundary from './ErrorBoundary';
import './journal.css';
import Navbar from '../Routes/Navbar';
import EntryModal from './EntryModal';


const Journal = () => {
  const [entries, setEntries] = useState([]);
  const [selectedEntry, setSelectedEntry] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [gratitudes, setGratitudes] = useState([]);
  const { user } = useUserContext();
  const [modalOpen, setModalOpen] = useState(false);

  const handleEntrySelect = (entry) => {
    console.log('Selected entry:', entry);
    setSelectedEntry(entry);
    setModalOpen(true);
  };

  const handleModalClose = () => {
    setSelectedEntry(null);
    setModalOpen(false);
  };

  useEffect(() => {
    console.log('Journal component mounted');
    if (user && user.uid) {
      fetchEntries();
      fetchGratitudes();
    }
  }, [user]);

  const fetchEntries = async () => {
    console.log('Fetching journal entries');
    setIsLoading(true);
    try {
      const entriesRef = collection(db, 'journalEntries');
      const q = query(
        entriesRef, 
        where('userId', '==', user.uid),
        orderBy('date', 'desc')
      );
      const querySnapshot = await getDocs(q);
      const fetchedEntries = querySnapshot.docs.map(doc => {
        const data = doc.data();
        let formattedDate;
        if (data.date && typeof data.date.toDate === 'function') {
          formattedDate = data.date.toDate();
        } else if (data.date instanceof Date) {
          formattedDate = data.date;
        } else if (typeof data.date === 'string') {
          formattedDate = new Date(data.date);
        } else {
          console.warn(`Invalid date format for entry ${doc.id}:`, data.date);
          formattedDate = new Date();
        }
        return {
          id: doc.id,
          ...data,
          date: formattedDate
        };
      });
      console.log('Fetched entries:', fetchedEntries);
      setEntries(fetchedEntries);
    } catch (error) {
      console.error('Error fetching entries:', error);
      setEntries([]);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchGratitudes = async () => {
    console.log('Fetching gratitudes');
    try {
      const gratitudesRef = collection(db, 'gratitudes');
      const q = query(
        gratitudesRef,
        where('userId', '==', user.uid),
        orderBy('date', 'desc')
      );
      const querySnapshot = await getDocs(q);
      const fetchedGratitudes = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        date: doc.data().date.toDate()
      }));
      console.log('Fetched gratitudes:', fetchedGratitudes);
      setGratitudes(fetchedGratitudes);
    } catch (error) {
      console.error('Error fetching gratitudes:', error);
      setGratitudes([]);
    }
  };

  const addEntry = async (newEntry) => {
    console.log('Adding new entry:', newEntry);
    try {
      const docRef = await addDoc(collection(db, 'journalEntries'), {
        ...newEntry,
        userId: user.uid,
        date: serverTimestamp()
      });
      console.log('New entry added with ID:', docRef.id);
      fetchEntries();
    } catch (error) {
      console.error('Error adding entry:', error);
    }
  };

  const addGratitude = async (newGratitude) => {
    console.log('Adding new gratitude:', newGratitude);
    try {
      const docRef = await addDoc(collection(db, 'gratitudes'), {
        content: newGratitude,
        userId: user.uid,
        date: serverTimestamp()
      });
      console.log('New gratitude added with ID:', docRef.id);
      fetchGratitudes();
    } catch (error) {
      console.error('Error adding gratitude:', error);
    }
  };

  const handleFilterChange = (newFilter) => {
    console.log('Filter changed to:', newFilter);
    setFilter(newFilter);
  };

  const handleSearch = (term) => {
    console.log('Search term:', term);
    setSearchTerm(term);
  };

  const handleJournalPromptSubmit = (entry, prompt) => {
    console.log('Journal prompt submission:', entry, prompt);
    addEntry({
      title: prompt,
      content: entry,
      mood: 'neutral',
      tags: ['prompt']
    });
  };

  const filteredEntries = entries.filter(entry => {
    if (!entry || !entry.content || !entry.title) {
      console.log('Invalid entry:', entry);
      return false;
    }
    
    const contentMatch = entry.content.toLowerCase().includes(searchTerm.toLowerCase());
    const titleMatch = entry.title.toLowerCase().includes(searchTerm.toLowerCase());
    
    return contentMatch || titleMatch;
  });


  console.log('Filtered entries:', filteredEntries);

  const highlightSearchTerm = (text) => {
    if (!searchTerm || !text) return text;
    const regex = new RegExp(`(${searchTerm})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <ErrorBoundary>
      
      <div className="journal-container">
        <h1 className="journal-title">My Journal</h1>
        <div className="journal-layout">
          <div className="journal-sidebar">
            <SearchBar 
              entries={entries}
              onSearch={handleSearch}
              onEntrySelect={handleEntrySelect}
            />
            <JournalCalendar entries={entries} onSelectDate={handleEntrySelect} />
            <MoodTracker entries={entries} onFilterChange={handleFilterChange} />
            <TagCloud entries={entries} onTagSelect={handleSearch} />
          </div>
          <div className="journal-main">
            <JournalEntryForm onAddEntry={addEntry} />
            <JournalPrompts onJournalSubmit={handleJournalPromptSubmit} />
            <GratitudeList gratitudes={gratitudes} onAddGratitude={addGratitude} />
            <JournalEntryList 
              entries={filteredEntries}
              onEntrySelect={handleEntrySelect}
              selectedEntry={selectedEntry}
            />
            {selectedEntry && (
              <EntryDetails
                entry={selectedEntry}
                onBackClick={() => setSelectedEntry(null)}
                highlightSearchTerm={highlightSearchTerm}
              />
            )}
          </div>
          <div className="journal-insights">
            <JournalInsights entries={entries} />
          </div>
        </div>
      </div>
      {modalOpen && (
        <EntryDetails
          entry={selectedEntry}
          onClose={handleModalClose}
          highlightSearchTerm={highlightSearchTerm}
        />
      )}
    </ErrorBoundary>
  );
};

export default Journal;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/gratitudeList.css`:

```````css
.gratitude-list-container {
    margin-bottom: 30px;
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .gratitude-list-container h3 {
    margin-bottom: 15px;
    color: #333;
    font-size: 1.2rem;
  }
  
  .gratitude-list-container form {
    display: flex;
    margin-bottom: 15px;
  }
  
  .gratitude-list-container input {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px 0 0 4px;
    font-size: 16px;
  }
  
  .gratitude-list-container button {
    padding: 10px 15px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 0 4px 4px 0;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }
  
  .gratitude-list-container button:hover {
    background-color: #45a049;
  }
  
  .gratitude-list-container ul {
    list-style-type: none;
    padding: 0;
  }
  
  .gratitude-list-container li {
    background-color: white;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/journalPrompts.css`:

```````css
.journal-prompts-container {
    margin-bottom: 30px;
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .journal-prompts-container h3 {
    margin-bottom: 15px;
    color: #333;
    font-size: 1.2rem;
  }
  
  .journal-prompts-container select {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }
  
  .journal-prompts-container textarea {
    width: 100%;
    height: 150px;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    resize: vertical;
  }
  
  .journal-prompts-container button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }
  
  .journal-prompts-container button:hover {
    background-color: #45a049;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/ErrorBoundary.js`:

```````js
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error caught by ErrorBoundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong. Please try again later.</h1>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/journal.css`:

```````css
.journal-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Arial', sans-serif;
}

.journal-title {
  text-align: center;
  color: #333;
  margin-bottom: 30px;
  font-size: 2.5rem;
  font-weight: bold;
}

.journal-layout {
  display: grid;
  grid-template-columns: 250px 1fr 300px;
  gap: 20px;
}

.journal-sidebar {
  background-color: #f5f5f5;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.journal-main {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.journal-insights {
  background-color: #f5f5f5;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

@media (max-width: 1024px) {
  .journal-layout {
    grid-template-columns: 1fr;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/JournalEntryForm.js`:

```````js
import React, { useState } from 'react';
import './journalEntryForm.css';

const JournalEntryForm = ({ onAddEntry }) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [mood, setMood] = useState('neutral');
  const [tags, setTags] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Submitting new entry');
    onAddEntry({
      title,
      content,
      mood,
      tags: tags.split(',').map(tag => tag.trim())
    });
    setTitle('');
    setContent('');
    setMood('neutral');
    setTags('');
  };

  return (
    <form className="journal-entry-form" onSubmit={handleSubmit}>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Entry Title"
        required
      />
      <textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="Write your thoughts..."
        required
      />
      <select value={mood} onChange={(e) => setMood(e.target.value)}>
        <option value="happy">Happy</option>
        <option value="sad">Sad</option>
        <option value="angry">Angry</option>
        <option value="neutral">Neutral</option>
      </select>
      <input
        type="text"
        value={tags}
        onChange={(e) => setTags(e.target.value)}
        placeholder="Tags (comma-separated)"
      />
      <button type="submit">Save Entry</button>
    </form>
  );
};

export default JournalEntryForm;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/pastEntryList.css`:

```````css
.past-entries {
  margin-top: 2rem;
}

.past-entries-title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #764ba2;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.entry-list {
  list-style: none;
  padding: 0;
}

.past-entry {
  padding: 1.5rem;
  background-color: #f5f5f5;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.past-entry:hover {
  background-color: #eee;
}

.entry-date {
  font-weight: bold;
  margin-bottom: 0.5rem;
  color: #555;
}

.entry-content {
  line-height: 1.6;
  color: #333;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

.no-entries {
  color: #777;
  font-style: italic;
  text-align: center;
}

mark {
  background-color: #ffff00;
  padding: 0.2em;
  border-radius: 3px;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/entryDetails.css`:

```````css
.entry-details-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.entry-details-container {
  background-color: #fff;
  border-radius: 8px;
  width: 80%;
  max-width: 800px;
  max-height: 80vh;
  overflow-y: auto;
  position: relative;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
}

.entry-details-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid #e5e5e5;
}

.entry-details-title {
  font-size: 2rem;
  margin: 0;
  color: #333;
}

.entry-details-close {
  background-color: transparent;
  border: none;
  font-size: 2rem;
  cursor: pointer;
  color: #999;
  transition: color 0.2s ease-in-out;
}

.entry-details-close:hover {
  color: #333;
}

.entry-details-body {
  padding: 1.5rem;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

.entry-details-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-bottom: 1.5rem;
  font-size: 1rem;
  color: #666;
}

.entry-details-meta i {
  margin-right: 0.5rem;
  color: #999;
}

.entry-details-tags {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 0.5rem;
}

.entry-details-tag {
  background-color: #f0f0f0;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.9rem;
}

.entry-details-content {
  line-height: 1.6;
  color: #333;
  font-size: 1.1rem;
  flex-grow: 1;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/PastEntryList.js`:

```````js
import React from 'react';
import './pastEntryList.css';

const PastEntryList = ({ entries = [], onEntryClick, highlightSearchTerm }) => {
  // Reverse the entries array to display most recent first
  const reversedEntries = [...entries].reverse();

  return (
    <div className="past-entries">
      <h3 className="past-entries-title">Past Entries</h3>
      {reversedEntries.length > 0 ? (
        <ul className="entry-list">
          {reversedEntries.map((entry) => (
            <li
              key={entry.id}
              className="past-entry"
              onClick={() => onEntryClick(entry)}
            >
              <div className="entry-date">
                {entry.date instanceof Date 
                  ? entry.date.toLocaleDateString()
                  : new Date(entry.date).toLocaleDateString()}
              </div>
              <div className="entry-content">{highlightSearchTerm(entry.content)}</div>
            </li>
          ))}
        </ul>
      ) : (
        <p className="no-entries">No matching entries found.</p>
      )}
    </div>
  );
};

export default PastEntryList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/GratitudeList.js`:

```````js
import React, { useState } from 'react';
import './gratitudeList.css';

const GratitudeList = ({ gratitudes, onAddGratitude }) => {
  const [newGratitude, setNewGratitude] = useState('');

  const handleAdd = (e) => {
    e.preventDefault();
    if (!newGratitude) return;

    console.log('Adding new gratitude:', newGratitude);
    onAddGratitude(newGratitude);
    setNewGratitude('');
  };

  return (
    <div className="gratitude-list-container">
      <h3>Gratitude List</h3>
      <form onSubmit={handleAdd}>
        <input
          type="text"
          value={newGratitude}
          onChange={(e) => setNewGratitude(e.target.value)}
          placeholder="Write something you're grateful for..."
        />
        <button type="submit">Add</button>
      </form>
      {gratitudes.length > 0 && (
        <ul>
          {gratitudes.map((gratitude, index) => (
            <li key={index}>{gratitude.content}</li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default GratitudeList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/journalEntryList.css`:

```````css
.journal-entry-list {
    margin-top: 20px;
  }
  
  .journal-entry-list h2 {
    margin-bottom: 15px;
    color: #333;
    font-size: 1.8rem;
  }
  
  .entry-item {
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 15px;
    cursor: pointer;
    transition: box-shadow 0.3s, transform 0.3s;
  }
  
  .entry-item:hover {
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transform: translateY(-2px);
  }
  
  .entry-item.selected {
    background-color: #e6f7ff;
    border-color: #91d5ff;
  }
  
  .entry-item h3 {
    margin: 0 0 10px 0;
    color: #333;
    font-size: 1.2rem;
  }
  
  .entry-item p {
    color: #666;
    margin: 0 0 10px 0;
    font-size: 1rem;
  }
  
  .entry-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.9rem;
  }
  
  .mood-indicator {
    padding: 3px 8px;
    border-radius: 12px;
    text-transform: capitalize;
  }
  
  .mood-indicator.happy { background-color: #ffd700; color: #333; }
  .mood-indicator.sad { background-color: #87cefa; color: #333; }
  .mood-indicator.angry { background-color: #ff6347; color: white; }
  .mood-indicator.neutral { background-color: #d3d3d3; color: #333; }
  
  .entry-date {
    color: #888;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Journal/moodTracker.css`:

```````css
.mood-tracker {
    margin-bottom: 30px;
  }
  
  .mood-tracker h3 {
    margin-bottom: 15px;
    color: #333;
    font-size: 1.2rem;
  }
  
  .mood-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .mood-button {
    padding: 8px 12px;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    transition: opacity 0.3s, transform 0.3s;
  }
  
  .mood-button:hover {
    opacity: 0.8;
    transform: translateY(-2px);
  }
  
  .mood-button.happy { background-color: #ffd700; color: #333; }
  .mood-button.sad { background-color: #87cefa; color: #333; }
  .mood-button.angry { background-color: #ff6347; color: white; }
  .mood-button.neutral { background-color: #d3d3d3; color: #333; }
  .mood-button.all { background-color: #4CAF50; color: white; }
  
  .mood-count {
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    padding: 2px 6px;
    margin-left: 5px;
    font-size: 12px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Music/MoodMusic.js`:

```````js
// src/components/Music/MoodMusic.js

import React, { useState, useEffect } from 'react';
import { db, collection, query, where, getDocs, addDoc, updateDoc, doc } from '../../firebase/firebase';
import { Line } from 'react-chartjs-2';
import './MoodMusic.css';
import Navbar from '../Routes/Navbar';

const MoodMusic = ({ userId }) => {
  const [currentMood, setCurrentMood] = useState('');
  const [moodHistory, setMoodHistory] = useState([]);
  const [playlists, setPlaylists] = useState([]);
  const [calmingSounds, setCalmingSounds] = useState([]);
  const [selectedAudio, setSelectedAudio] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [audioElement, setAudioElement] = useState(null);
  const [showJournalPrompt, setShowJournalPrompt] = useState(false);
  const [journalEntry, setJournalEntry] = useState('');
  const [isBreathing, setIsBreathing] = useState(false);
  const [breathCount, setBreathCount] = useState(0);

  useEffect(() => {
    fetchPlaylists();
    fetchCalmingSounds();
    fetchMoodHistory();
  }, [userId]);

  useEffect(() => {
    if (currentMood) {
      updateUserMood();
    }
  }, [currentMood, userId]);

  const fetchPlaylists = async () => {
    try {
      const playlistsRef = collection(db, 'moodPlaylists');
      const querySnapshot = await getDocs(playlistsRef);
      const fetchedPlaylists = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setPlaylists(fetchedPlaylists);
    } catch (error) {
      console.error("Error fetching playlists:", error);
    }
  };

  const fetchCalmingSounds = async () => {
    try {
      const soundsRef = collection(db, 'calmingSounds');
      const querySnapshot = await getDocs(soundsRef);
      const fetchedSounds = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setCalmingSounds(fetchedSounds);
    } catch (error) {
      console.error("Error fetching calming sounds:", error);
    }
  };

  const fetchMoodHistory = async () => {
    if (!userId) return;

    try {
      const userMoodRef = collection(db, 'userMoods');
      const q = query(userMoodRef, where('userId', '==', userId), where('timestamp', '>=', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)));
      const querySnapshot = await getDocs(q);
      const moodData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setMoodHistory(moodData);
    } catch (error) {
      console.error("Error fetching mood history:", error);
    }
  };

  const updateUserMood = async () => {
    if (!userId) return;

    try {
      const userMoodRef = collection(db, 'userMoods');
      await addDoc(userMoodRef, { 
        userId, 
        mood: currentMood, 
        timestamp: new Date() 
      });
      fetchMoodHistory();
    } catch (error) {
      console.error("Error updating user mood:", error);
    }
  };

  const handleMoodChange = (mood) => {
    setCurrentMood(mood);
    setShowJournalPrompt(true);
  };

  const handleAudioSelect = (audio, type) => {
    setSelectedAudio({ ...audio, type });
    if (audioElement) {
      audioElement.pause();
    }
    const newAudio = new Audio(audio.url);
    setAudioElement(newAudio);
    newAudio.play();
    setIsPlaying(true);
  };

  const togglePlayPause = () => {
    if (isPlaying) {
      audioElement.pause();
    } else {
      audioElement.play();
    }
    setIsPlaying(!isPlaying);
  };

  const handleJournalSubmit = async () => {
    if (!userId || !journalEntry) return;

    try {
      const journalRef = collection(db, 'userJournals');
      await addDoc(journalRef, {
        userId,
        entry: journalEntry,
        mood: currentMood,
        timestamp: new Date()
      });
      setJournalEntry('');
      setShowJournalPrompt(false);
    } catch (error) {
      console.error("Error saving journal entry:", error);
    }
  };

  const startBreathingExercise = () => {
    setIsBreathing(true);
    setBreathCount(0);
    const breathingInterval = setInterval(() => {
      setBreathCount(prevCount => {
        if (prevCount >= 10) {
          clearInterval(breathingInterval);
          setIsBreathing(false);
          return 0;
        }
        return prevCount + 1;
      });
    }, 5000); // 5 seconds per breath
  };

  const renderMoodChart = () => {
    const data = {
      labels: moodHistory.map(entry => new Date(entry.timestamp.toDate()).toLocaleDateString()),
      datasets: [{
        label: 'Mood',
        data: moodHistory.map(entry => {
          const moodValues = { 'Happy': 5, 'Energetic': 4, 'Calm': 3, 'Sad': 2, 'Anxious': 1 };
          return moodValues[entry.mood] || 0;
        }),
        fill: false,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      }]
    };

    return <Line data={data} options={{ scales: { y: { beginAtZero: true, max: 5 } } }} />;
  };

  return (
    <div className="mood-music">
      <h2>Mood-Based Wellness Center</h2>
      <div className="mood-selector">
        <h3>How are you feeling?</h3>
        <div className="mood-buttons">
          {['Happy', 'Sad', 'Energetic', 'Calm', 'Anxious'].map(mood => (
            <button
              key={mood}
              onClick={() => handleMoodChange(mood)}
              className={currentMood === mood ? 'active' : ''}
            >
              {mood}
            </button>
          ))}
        </div>
      </div>

      {showJournalPrompt && (
        <div className="journal-prompt">
          <h3>Reflect on your mood</h3>
          <textarea
            value={journalEntry}
            onChange={(e) => setJournalEntry(e.target.value)}
            placeholder="Write about how you're feeling..."
          />
          <button onClick={handleJournalSubmit}>Save Journal Entry</button>
        </div>
      )}

      <div className="mood-chart">
        <h3>Your Mood History</h3>
        {renderMoodChart()}
      </div>

      <div className="playlists">
        <h3>Suggested Playlists</h3>
        <ul>
          {playlists
            .filter(playlist => playlist.mood === currentMood)
            .map(playlist => (
              <li key={playlist.id} onClick={() => handleAudioSelect(playlist, 'playlist')}>
                {playlist.name}
              </li>
            ))}
        </ul>
      </div>

      <div className="calming-sounds">
        <h3>Calming Sounds</h3>
        <ul>
          {calmingSounds.map(sound => (
            <li key={sound.id} onClick={() => handleAudioSelect(sound, 'sound')}>
              {sound.name}
            </li>
          ))}
        </ul>
      </div>

      {selectedAudio && (
        <div className="audio-player">
          <h4>Now Playing: {selectedAudio.name}</h4>
          <button onClick={togglePlayPause}>
            {isPlaying ? 'Pause' : 'Play'}
          </button>
        </div>
      )}

      <div className="breathing-exercise">
        <h3>Guided Breathing Exercise</h3>
        {isBreathing ? (
          <div>
            <p>{breathCount % 2 === 0 ? 'Inhale...' : 'Exhale...'}</p>
            <p>Breath {Math.floor(breathCount / 2) + 1} of 5</p>
          </div>
        ) : (
          <button onClick={startBreathingExercise}>Start Breathing Exercise</button>
        )}
      </div>

      <div className="wellness-tips">
        <h3>Wellness Tips</h3>
        <ul>
          <li>Practice mindfulness for 5 minutes daily</li>
          <li>Stay hydrated throughout the day</li>
          <li>Take short breaks to stretch and move</li>
          <li>Connect with a friend or loved one</li>
          <li>Express gratitude for three things each day</li>
        </ul>
      </div>
    </div>
    
  );
};

export default MoodMusic;
```````

`/Users/charlesdeng/code/rintzai/src/components/Music/MoodMusic.css`:

```````css
/* src/components/Music/MoodMusic.css */

.mood-music {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    font-family: Arial, sans-serif;
  }
  
  .mood-music h2 {
    color: #333;
    text-align: center;
  }
  
  .mood-selector, .journal-prompt, .mood-chart, .playlists, .calming-sounds, .audio-player, .breathing-exercise, .wellness-tips {
    margin-bottom: 30px;
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .mood-selector h3, .journal-prompt h3, .mood-chart h3, .playlists h3, .calming-sounds h3, .breathing-exercise h3, .wellness-tips h3 {
    color: #555;
    margin-bottom: 15px;
  }
  
  .mood-buttons {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
  }
  
  .mood-buttons button {
    padding: 10px 20px;
    margin: 5px;
    border: none;
    border-radius: 20px;
    background-color: #e0e0e0;
    color: #333;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .mood-buttons button.active {
    background-color: #4CAF50;
    color: white;
    transform: scale(1.05);
  }
  
  .journal-prompt textarea {
    width: 100%;
    height: 100px;
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: vertical;
  }
  
  .journal-prompt button, .breathing-exercise button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .journal-prompt button:hover, .breathing-exercise button:hover {
    background-color: #45a049;
  }
  
  .playlists ul, .calming-sounds ul, .wellness-tips ul {
    list-style-type: none;
    padding: 0;
  }
  
  .playlists li, .calming-sounds li {
    padding: 10px;
    margin: 5px 0;
    background-color: #e0e0e0;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .playlists li:hover, .calming-sounds li:hover {
    background-color: #d0d0d0;
  }
  
  .audio-player {
    text-align: center;
  }
  
  .audio-player button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .audio-player button:hover {
    background-color: #45a049;
  }
  
  .breathing-exercise {
    text-align: center;
  }
  
  .breathing-exercise p {
    font-size: 1.2em;
    margin: 10px 0;
  }
  
  .wellness-tips li {
    margin-bottom: 10px;
  }
  
  @media (max-width: 600px) {
    .mood-buttons {
      flex-direction: column;
    }
  
    .mood-buttons button {
      width: 100%;
      margin: 5px 0;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/home.css`:

```````css
.home-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background-color: #f0f4f8;
  transition: background-color 0.3s ease;
}

.content {
  flex: 1;
  max-width: 1200px;
  margin: 0 auto;
  padding: 40px 20px;
}

.main-column {
  display: flex;
  flex-direction: column;
  gap: 30px;
}

.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 30px;
}

.dashboard-item {
  background-color: #ffffff;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.dashboard-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
}

.dashboard-item.wide {
  grid-column: span 2;
}

@media (max-width: 1024px) {
  .dashboard-grid {
    grid-template-columns: repeat(2, 1fr);
  }

  .dashboard-item.wide {
    grid-column: span 1;
  }
}

@media (max-width: 768px) {
  .dashboard-grid {
    grid-template-columns: 1fr;
  }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.fade-in {
  animation: fadeIn 0.5s ease-in;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/progressChart.css`:

```````css
.progress-chart {
  background-color: #ffffff;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.progress-chart canvas {
  max-width: 100%;
  height: auto;
}

.progress-chart h3 {
  color: #333;
  font-size: 1.4rem;
  font-weight: 300;
  margin-bottom: 15px;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/QuickAccessGrid.js`:

```````js
// QuickAccessGrid.js
import React from 'react';
import { Link } from 'react-router-dom';
import { FaUser, FaClipboard, FaChartBar, FaBook, FaComments, FaQuoteLeft, FaHeart, FaImages } from 'react-icons/fa';
import './quickAccessGrid.css';

const features = [
  { name: 'Profile', icon: FaUser, path: '/profile', color: '#4CAF50' },
  { name: 'Board', icon: FaClipboard, path: '/board', color: '#2196F3' },
  { name: 'Mood Tracker', icon: FaChartBar, path: '/mood-tracker', color: '#FF9800' },
  { name: 'Journal', icon: FaBook, path: '/journal', color: '#9C27B0' },
  { name: 'Chat', icon: FaComments, path: '/chat', color: '#00BCD4' },
  { name: 'Quotes', icon: FaQuoteLeft, path: '/quotes', color: '#F44336' },
  { name: 'Gratitude', icon: FaHeart, path: '/gratitude', color: '#E91E63' },
  { name: 'Display', icon: FaImages, path: '/display', color: '#795548' },
];

const QuickAccessGrid = () => {
  return (
    <div className="quick-access-grid">
      <h2>Quick Access</h2>
      <div className="grid-container">
        {features.map((feature, index) => (
          <Link to={feature.path} className="grid-item" style={{ backgroundColor: feature.color }} key={index}>
            <feature.icon className="grid-icon" />
            <span>{feature.name}</span>
          </Link>
        ))}
      </div>
    </div>
  );
};

export default QuickAccessGrid;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/quickAccessGrid.css`:

```````css
/* quickAccessGrid.css */
.quick-access-grid {
    background-color: #ffffff;
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }
  
  .quick-access-grid h2 {
    margin-bottom: 20px;
    color: #333;
    font-size: 1.5rem;
  }
  
  .grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 15px;
  }
  
  .grid-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 15px;
    border-radius: 12px;
    text-decoration: none;
    color: #ffffff;
    transition: all 0.3s ease;
  }
  
  .grid-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }
  
  .grid-icon {
    font-size: 2rem;
    margin-bottom: 10px;
  }
  
  .grid-item span {
    font-weight: 500;
    text-align: center;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/ActivityFeed.js`:

```````js
import React from 'react';
import './activityFeed.css';

const ActivityFeed = () => {
  const activities = [
    { user: 'Jane', action: 'completed a journal entry', time: '5 minutes ago', icon: '📝' },
    { user: 'John', action: 'achieved a 7-day streak', time: '1 hour ago', icon: '🔥' },
    { user: 'Emma', action: 'shared a motivational quote', time: '2 hours ago', icon: '💬' },
    { user: 'Mike', action: 'improved their mood', time: '3 hours ago', icon: '😊' },
  ];

  return (
    <div className="activity-feed">
      <h3>Community Activity</h3>
      <ul>
        {activities.map((activity, index) => (
          <li key={index} className="activity-item">
            <span className="activity-icon">{activity.icon}</span>
            <div className="activity-content">
              <span className="activity-user">{activity.user}</span>
              <span className="activity-action">{activity.action}</span>
              <span className="activity-time">{activity.time}</span>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ActivityFeed;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/streakCounter.css`:

```````css
.streak-counter {
  background: linear-gradient(135deg, #91EAE4, #86A8E7, #7F7FD5);
  color: white;
  border-radius: 15px;
  padding: 20px;
  text-align: center;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.streak-counter h3 {
  margin-bottom: 10px;
  font-size: 1.4rem;
  font-weight: 300;
}

.streak-count {
  font-size: 3.5rem;
  font-weight: bold;
  margin: 10px 0;
}

.streak-counter p {
  font-size: 1rem;
  opacity: 0.8;
}

.streak-flame {
  position: absolute;
  bottom: -10px;
  right: -10px;
  font-size: 4rem;
  opacity: 0.2;
  transform: rotate(-15deg);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/QuoteSection.js`:

```````js
import React, { useState, useEffect } from 'react';
import './quoteSection.css';

const QuoteSection = () => {
  const [quote, setQuote] = useState('');
  const [author, setAuthor] = useState('');

  useEffect(() => {
    fetchQuote();
  }, []);

  const fetchQuote = async () => {
    try {
      const response = await fetch('https://api.quotable.io/random');
      const data = await response.json();
      setQuote(data.content);
      setAuthor(data.author);
    } catch (error) {
      console.error('Error fetching quote:', error);
      setQuote('The best way to predict the future is to create it.');
      setAuthor('Abraham Lincoln');
    }
  };

  return (
    <div className="quote-section">
      <h3>Inspirational Quote</h3>
      <blockquote>
        <p>{quote}</p>
        <footer>- {author}</footer>
      </blockquote>
      <button onClick={fetchQuote} className="new-quote-button">New Quote</button>
    </div>
  );
};

export default QuoteSection;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/FeatureSection.js`:

```````js
import React from 'react';
import { Link } from 'react-router-dom';
import { FaUser, FaClipboard, FaChartBar, FaBook, FaComments, FaQuoteLeft, FaHeart, FaImages, FaBullseye, FaTasks } from 'react-icons/fa';
import './FeatureSection.css';

const features = [
  { name: 'Profile', icon: FaUser, path: '/profile', color: '#4CAF50' },
  { name: 'Board', icon: FaClipboard, path: '/board', color: '#2196F3' },
  { name: 'Mood Tracker', icon: FaChartBar, path: '/mood-tracker', color: '#FF9800' },
  { name: 'Journal', icon: FaBook, path: '/journal', color: '#9C27B0' },
  { name: 'Chat', icon: FaComments, path: '/chat', color: '#00BCD4' },
  { name: 'Quotes', icon: FaQuoteLeft, path: '/quotes', color: '#F44336' },
  { name: 'Gratitude', icon: FaHeart, path: '/gratitude', color: '#E91E63' },
  { name: 'Display', icon: FaImages, path: '/display', color: '#795548' },
  { name: 'Vision', icon: FaBullseye, path: '/vision', color: '#607D8B' },
  { name: 'Goals', icon: FaTasks, path: '/goals', color: '#009688' },
];

const FeatureButton = ({ name, icon: Icon, path, color }) => (
  <Link to={path} className="feature-button" style={{ backgroundColor: color }}>
    <Icon className="feature-icon" />
    <span>{name}</span>
  </Link>
);

const FeatureSection = () => {
  return (
    <div className="feature-section">
      <h2>Quick Access</h2>
      <div className="feature-grid">
        {features.map((feature, index) => (
          <FeatureButton key={index} {...feature} />
        ))}
      </div>
    </div>
  );
};

export default FeatureSection;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/Home.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import Navbar from '../Routes/Navbar';
import WelcomeMessage from '../WelcomeMessage';
import FeatureSection from './FeatureSection';
import QuoteSection from '../Quotes/QuoteSection';
import MoodCheck from './MoodCheck';
import ActivityFeed from './ActivityFeed';
import StreakCounter from './StreakCounter';
import DailyChallenge from './DailyChallenge';
import ProgressChart from './ProgressChart';
import './home.css';

const Home = () => {
  const { user } = useUserContext();
  const [showMoodCheck, setShowMoodCheck] = useState(true);

  useEffect(() => {
    const lastMoodCheck = localStorage.getItem('lastMoodCheck');
    if (lastMoodCheck && new Date(lastMoodCheck).toDateString() === new Date().toDateString()) {
      setShowMoodCheck(false);
    }
  }, []);

  const handleMoodCheckComplete = () => {
    setShowMoodCheck(false);
    localStorage.setItem('lastMoodCheck', new Date().toISOString());
  };

  return (
    <div className="home-container">
      
      <main className="content">
        <div className="main-column">
          <WelcomeMessage user={user} />
          {showMoodCheck && <MoodCheck onComplete={handleMoodCheckComplete} />}
          <div className="dashboard-grid">
            <div className="dashboard-item wide">
              <FeatureSection />
            </div>
            <div className="dashboard-item">
              <StreakCounter />
            </div>
            <div className="dashboard-item">
              <DailyChallenge />
            </div>
            <div className="dashboard-item wide">
              <ProgressChart />
            </div>
            <div className="dashboard-item">
              <ActivityFeed />
            </div>
            <div className="dashboard-item">
              <QuoteSection />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/dailyChallenge.css`:

```````css
.daily-challenge {
  background-color: #ffffff;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.daily-challenge h3 {
  color: #333;
  font-size: 1.4rem;
  font-weight: 300;
  margin-bottom: 10px;
}

.daily-challenge p {
  color: #666;
  margin-bottom: 20px;
}

.challenge-button {
  background-color: #7F7FD5;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 50px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.challenge-button:hover {
  background-color: #6C63FF;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.challenge-button.completed {
  background-color: #4CAF50;
  cursor: default;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/activityFeed.css`:

```````css
.activity-feed {
  background-color: #ffffff;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.activity-feed h3 {
  margin-bottom: 15px;
  color: #333;
  font-size: 1.4rem;
  font-weight: 300;
}

.activity-feed ul {
  list-style-type: none;
  padding: 0;
}

.activity-item {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 15px;
  border-bottom: 1px solid #eee;
}

.activity-item:last-child {
  border-bottom: none;
}

.activity-icon {
  font-size: 1.5rem;
  margin-right: 15px;
}

.activity-content {
  display: flex;
  flex-direction: column;
}

.activity-user {
  font-weight: bold;
  color: #7F7FD5;
}

.activity-action {
  margin-top: 2px;
}

.activity-time {
  font-size: 0.8rem;
  color: #888;
  margin-top: 2px;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/ProgressChart.js`:

```````js
import React from 'react';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import './progressChart.css';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const ProgressChart = () => {
  const data = {
    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
    datasets: [
      {
        label: 'Mood Score',
        data: [7, 6, 8, 5, 9, 8, 7],
        fill: false,
        backgroundColor: 'rgb(75, 192, 192)',
        borderColor: 'rgba(75, 192, 192, 0.2)',
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Your Weekly Mood Progress',
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        max: 10,
      },
    },
  };

  return (
    <div className="progress-chart">
      <Line data={data} options={options} />
    </div>
  );
};

export default ProgressChart;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/moodCheck.css`:

```````css
.mood-check {
    background-color: #ffffff;
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
  }
  
  .mood-check h2 {
    margin-bottom: 20px;
    color: #333;
    font-size: 1.5rem;
  }
  
  .mood-options {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
  }
  
  .mood-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: none;
    border: 2px solid #ddd;
    border-radius: 50%;
    width: 80px;
    height: 80px;
    margin: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .mood-button:hover, .mood-button.selected {
    transform: scale(1.1);
    border-color: #4CAF50;
  }
  
  .mood-emoji {
    font-size: 2rem;
    margin-bottom: 5px;
  }
  
  .mood-label {
    font-size: 0.8rem;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/DailyChallenge.js`:

```````js
import React, { useState } from 'react';
import './dailyChallenge.css';

const DailyChallenge = () => {
  const [isCompleted, setIsCompleted] = useState(false);

  const challenge = {
    title: "Today's Challenge",
    description: "Write down three things you're grateful for.",
  };

  const handleComplete = () => {
    setIsCompleted(true);
    // Here you would typically update this in your backend
  };

  return (
    <div className="daily-challenge">
      <h3>{challenge.title}</h3>
      <p>{challenge.description}</p>
      <button 
        className={`challenge-button ${isCompleted ? 'completed' : ''}`}
        onClick={handleComplete}
        disabled={isCompleted}
      >
        {isCompleted ? 'Completed!' : 'Mark as Complete'}
      </button>
    </div>
  );
};

export default DailyChallenge;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/FeatureSection.css`:

```````css
.feature-section {
  background-color: #ffffff;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.feature-section h2 {
  margin-bottom: 20px;
  color: #333;
  font-size: 1.8rem;
  font-weight: 300;
}

.feature-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 15px;
}

.feature-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 15px;
  border-radius: 12px;
  text-decoration: none;
  color: #ffffff;
  transition: all 0.3s ease;
}

.feature-button:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.feature-icon {
  font-size: 2rem;
  margin-bottom: 10px;
}

.feature-button span {
  font-weight: 500;
  text-align: center;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/MoodCheck.js`:

```````js
import React, { useState } from 'react';
import './moodCheck.css';

const MoodCheck = ({ onComplete }) => {
  const [selectedMood, setSelectedMood] = useState(null);
  const moods = [
    { emoji: '😄', label: 'Happy' },
    { emoji: '😊', label: 'Content' },
    { emoji: '😐', label: 'Neutral' },
    { emoji: '😔', label: 'Sad' },
    { emoji: '😢', label: 'Upset' },
  ];

  const handleMoodSelect = (mood) => {
    setSelectedMood(mood);
    setTimeout(() => {
      onComplete(mood);
    }, 1000);
  };

  return (
    <div className="mood-check">
      <h2>How are you feeling today?</h2>
      <div className="mood-options">
        {moods.map((mood, index) => (
          <button
            key={index}
            className={`mood-button ${selectedMood === mood ? 'selected' : ''}`}
            onClick={() => handleMoodSelect(mood)}
          >
            <span className="mood-emoji">{mood.emoji}</span>
            <span className="mood-label">{mood.label}</span>
          </button>
        ))}
      </div>
    </div>
  );
};

export default MoodCheck;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/StreakCounter.js`:

```````js
import React, { useState, useEffect } from 'react';
import './streakCounter.css';

const StreakCounter = () => {
  const [streak, setStreak] = useState(0);

  useEffect(() => {
    const savedStreak = localStorage.getItem('streak');
    const lastLoginDate = localStorage.getItem('lastLoginDate');
    const today = new Date().toDateString();

    if (lastLoginDate === today) {
      setStreak(parseInt(savedStreak) || 0);
    } else if (lastLoginDate === new Date(Date.now() - 86400000).toDateString()) {
      const newStreak = (parseInt(savedStreak) || 0) + 1;
      setStreak(newStreak);
      localStorage.setItem('streak', newStreak);
      localStorage.setItem('lastLoginDate', today);
    } else {
      setStreak(1);
      localStorage.setItem('streak', 1);
      localStorage.setItem('lastLoginDate', today);
    }
  }, []);

  return (
    <div className="streak-counter">
      <h3>Your Streak</h3>
      <div className="streak-count">{streak}</div>
      <p>days in a row</p>
      <div className="streak-flame">🔥</div>
    </div>
  );
};

export default StreakCounter;
```````

`/Users/charlesdeng/code/rintzai/src/components/Home/quoteSection.css`:

```````css
.quote-section {
  background-color: #ffffff;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.quote-section h3 {
  color: #333;
  font-size: 1.4rem;
  font-weight: 300;
  margin-bottom: 15px;
}

.quote-section blockquote {
  font-style: italic;
  color: #555;
  margin: 0 0 15px 0;
}

.quote-section blockquote p {
  font-size: 1.1rem;
  line-height: 1.4;
}

.quote-section blockquote footer {
  font-size: 0.9rem;
  color: #888;
  margin-top: 10px;
}

.new-quote-button {
  background-color: #7F7FD5;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 50px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.new-quote-button:hover {
  background-color: #6C63FF;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Layout.js`:

```````js
import React from 'react';
import Navbar from './Routes/Navbar';

const Layout = ({ children }) => {
  return (
    <div className="layout">
      
      {children}
    </div>
  );
};

export default Layout;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBT.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import ThoughtRecord from './ThoughtRecord';
import CognitiveDistortions from './CognitiveDistortions';
import BeliefChallenger from './BeliefChallenger';
import CBTExercises from './CBTExercises';
import CBTProgress from './CBTProgress';
import CBTResources from './CBTResources';
import { fetchUserCBTData, updateUserCBTData } from './cbtService';
import './CBT.css';
import Navbar from '../Routes/Navbar';

const CBT = () => {
  const { user } = useUserContext();
  const [userCBTData, setUserCBTData] = useState(null);
  const [activeComponent, setActiveComponent] = useState('ThoughtRecord');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadCBTData = async () => {
      setIsLoading(true);
      try {
        if (user) {
          const data = await fetchUserCBTData(user.uid);
          setUserCBTData(data);
        }
      } catch (error) {
        console.error('Error loading CBT data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadCBTData();
  }, [user]);

  const handleDataUpdate = async (newData) => {
    try {
      await updateUserCBTData(user.uid, newData);
      setUserCBTData(prevData => ({ ...prevData, ...newData }));
    } catch (error) {
      console.error('Error updating CBT data:', error);
    }
  };

  const renderActiveComponent = () => {
    switch (activeComponent) {
      case 'ThoughtRecord':
        return <ThoughtRecord userData={userCBTData} onDataUpdate={handleDataUpdate} />;
      case 'CognitiveDistortions':
        return <CognitiveDistortions userData={userCBTData} onDataUpdate={handleDataUpdate} />;
      case 'BeliefChallenger':
        return <BeliefChallenger userData={userCBTData} onDataUpdate={handleDataUpdate} />;
      case 'CBTExercises':
        return <CBTExercises userData={userCBTData} onDataUpdate={handleDataUpdate} />;
      case 'CBTProgress':
        return <CBTProgress userData={userCBTData} />;
      case 'CBTResources':
        return <CBTResources />;
      default:
        return <ThoughtRecord userData={userCBTData} onDataUpdate={handleDataUpdate} />;
    }
  };

  if (isLoading) {
    return <div className="loading">Loading CBT data...</div>;
  }

  return (
    <>
      
      <div className="cbt-container">
        <h1>Cognitive Behavioral Therapy Tools</h1>
        <div className="cbt-content">
          <nav className="cbt-nav">
            <button onClick={() => setActiveComponent('ThoughtRecord')}>Thought Record</button>
            <button onClick={() => setActiveComponent('CognitiveDistortions')}>Cognitive Distortions</button>
            <button onClick={() => setActiveComponent('BeliefChallenger')}>Belief Challenger</button>
            <button onClick={() => setActiveComponent('CBTExercises')}>CBT Exercises</button>
            <button onClick={() => setActiveComponent('CBTProgress')}>Progress</button>
            <button onClick={() => setActiveComponent('CBTResources')}>Resources</button>
          </nav>
          <main className="cbt-main">
            {renderActiveComponent()}
          </main>
        </div>
      </div>
      </>
    
  );
};

export default CBT;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBTExercises.js`:

```````js
import React, { useState } from 'react';
import './CBTExercises.css';

const exercises = [
  {
    title: 'Positive Self-Talk',
    description: 'Practice replacing negative self-talk with positive affirmations.',
    steps: [
      'Identify a negative thought you often have about yourself.',
      'Write down this thought.',
      'Now, think of a positive alternative to this thought.',
      'Write down the positive alternative.',
      'Practice saying the positive alternative out loud to yourself.',
    ],
  },
  {
    title: 'Gratitude Journal',
    description: 'Focus on the positive aspects of your life to improve overall mood.',
    steps: [
      "Each day, write down three things you're grateful for.",
      'They can be big or small things.',
      "Try to be specific and reflect on why you're grateful for each item.",
      'Review your list at the end of each week.',
    ],
  },
  {
    title: 'Behavioral Activation',
    description: 'Engage in activities that bring you joy or a sense of accomplishment.',
    steps: [
      'Make a list of activities you enjoy or that give you a sense of achievement.',
      'Schedule at least one of these activities each day.',
      'After completing the activity, rate your mood before and after.',
      'Reflect on how the activity impacted your mood.',
    ],
  },
];

const CBTExercises = ({ userData, onDataUpdate }) => {
  const [selectedExercise, setSelectedExercise] = useState(null);
  const [exerciseNotes, setExerciseNotes] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (selectedExercise) {
      const newExerciseEntry = {
        exercise: selectedExercise.title,
        notes: exerciseNotes,
        date: new Date().toISOString(),
      };
      onDataUpdate({ exerciseEntries: [...(userData.exerciseEntries || []), newExerciseEntry] });
      // Reset form
      setSelectedExercise(null);
      setExerciseNotes('');
    }
  };

  return (
    <div className="cbt-exercises">
      <h2>CBT Exercises</h2>
      <div className="exercises-list">
        {exercises.map((exercise, index) => (
          <div key={index} className="exercise-item" onClick={() => setSelectedExercise(exercise)}>
            <h3>{exercise.title}</h3>
            <p>{exercise.description}</p>
          </div>
        ))}
      </div>
      {selectedExercise && (
        <div className="selected-exercise">
          <h3>{selectedExercise.title}</h3>
          <p>{selectedExercise.description}</p>
          <ol>
            {selectedExercise.steps.map((step, index) => (
              <li key={index}>{step}</li>
            ))}
          </ol>
          <form onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="exerciseNotes">Your Notes:</label>
              <textarea
                id="exerciseNotes"
                value={exerciseNotes}
                onChange={(e) => setExerciseNotes(e.target.value)}
                required
              />
            </div>
            <button type="submit">Save Exercise Entry</button>
          </form>
        </div>
      )}
      <div className="exercise-history">
        <h3>Your Exercise History</h3>
        {userData.exerciseEntries && userData.exerciseEntries.length > 0 ? (
          userData.exerciseEntries.map((entry, index) => (
            <div key={index} className="exercise-entry">
              <p><strong>Date:</strong> {new Date(entry.date).toLocaleDateString()}</p>
              <p><strong>Exercise:</strong> {entry.exercise}</p>
              <p><strong>Notes:</strong> {entry.notes}</p>
            </div>
          ))
        ) : (
          <p>No exercise entries recorded yet.</p>
        )}
      </div>
    </div>
  );
};

export default CBTExercises;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBTProgress.js`:

```````js
import React from 'react';
import { Line } from 'react-chartjs-2';
import './CBTProgress.css';

const CBTProgress = ({ userData }) => {
  const moodData = userData.moodEntries || [];

  const chartData = {
    labels: moodData.map(entry => new Date(entry.date).toLocaleDateString()),
    datasets: [
      {
        label: 'Mood Score',
        data: moodData.map(entry => entry.score),
        fill: false,
        backgroundColor: 'rgb(75, 192, 192)',
        borderColor: 'rgba(75, 192, 192, 0.2)',
      },
    ],
  };

  const options = {
    scales: {
      y: {
        beginAtZero: true,
        max: 10,
      },
    },
  };

  return (
    <div className="cbt-progress">
      <h2>Your CBT Progress</h2>
      <div className="progress-stats">
        <div className="stat">
          <h3>Total Thought Records</h3>
          <p>{userData.thoughtRecords ? userData.thoughtRecords.length : 0}</p>
        </div>
        <div className="stat">
          <h3>Total Belief Challenges</h3>
          <p>{userData.beliefChallenges ? userData.beliefChallenges.length : 0}</p>
        </div>
        <div className="stat">
          <h3>Total Exercise Entries</h3>
          <p>{userData.exerciseEntries ? userData.exerciseEntries.length : 0}</p>
        </div>
      </div>
      <div className="mood-chart">
        <h3>Mood Progress</h3>
        <Line data={chartData} options={options} />
      </div>
    </div>
  );
};

export default CBTProgress;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBTResources.css`:

```````css
.cbt-resources .resource-list {
    list-style-type: none;
    padding: 0;
  }
  
  .resource-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }
  
  .resource-item a {
    display: inline-block;
    margin-top: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    text-decoration: none;
    border-radius: 4px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBT.css`:

```````css
.cbt-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .cbt-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .cbt-nav {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .cbt-nav button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .cbt-nav button:hover {
    background-color: #45a049;
  }
  
  .cbt-main {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBTResources.js`:

```````js
import React from 'react';
import './CBTResources.css';

const resources = [
  {
    title: 'Cognitive Behavioral Therapy Basics',
    url: 'https://www.apa.org/ptsd-guideline/patients-and-families/cognitive-behavioral',
    description: 'An overview of CBT from the American Psychological Association.',
  },
  {
    title: 'CBT Worksheets',
    url: 'https://www.therapistaid.com/therapy-worksheets/cbt/none',
    description: 'Free CBT worksheets and exercises from Therapist Aid.',
  },
  {
    title: 'CBT for Depression',
    url: 'https://www.nimh.nih.gov/health/publications/depression',
    description: 'Information about using CBT for depression from the National Institute of Mental Health.',
  },
  {
    title: 'CBT for Anxiety',
    url: 'https://www.anxietycanada.com/articles/cbt-for-anxiety/',
    description: 'Resources for using CBT to manage anxiety from Anxiety Canada.',
  },
];

const CBTResources = () => {
  return (
    <div className="cbt-resources">
      <h2>CBT Resources</h2>
      <ul className="resource-list">
        {resources.map((resource, index) => (
          <li key={index} className="resource-item">
            <h3>{resource.title}</h3>
            <p>{resource.description}</p>
            <a href={resource.url} target="_blank" rel="noopener noreferrer">Learn More</a>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default CBTResources;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CognitiveDistortions.js`:

```````js
import React, { useState } from 'react';
import './CognitiveDistortions.css';

const cognitiveDistortions = [
  { name: 'All-or-Nothing Thinking', description: 'Seeing things in black-and-white categories.' },
  { name: 'Overgeneralization', description: 'Viewing a negative event as a never-ending pattern of defeat.' },
  { name: 'Mental Filter', description: 'Dwelling on the negatives and ignoring the positives.' },
  { name: 'Discounting the Positive', description: 'Insisting that accomplishments or positive qualities do not count.' },
  { name: 'Jumping to Conclusions', description: 'Making negative interpretations without actual evidence.' },
  { name: 'Magnification or Minimization', description: 'Exaggerating the importance of problems and shortcomings, or minimizing the importance of desirable qualities.' },
  { name: 'Emotional Reasoning', description: 'Assuming that negative emotions necessarily reflect the way things really are.' },
  { name: 'Should Statements', description: 'Telling yourself that things should be the way you hoped or expected them to be.' },
  { name: 'Labeling', description: 'Identifying with your shortcomings. Instead of saying "I made a mistake," you tell yourself "I am a loser," or "a fool," or "a failure."' },
  { name: 'Personalization and Blame', description: 'Holding yourself personally responsible for events that are not entirely under your control.' },
];

const CognitiveDistortions = ({ userData, onDataUpdate }) => {
  const [selectedDistortion, setSelectedDistortion] = useState('');
  const [example, setExample] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    const newDistortionExample = {
      distortion: selectedDistortion,
      example,
      date: new Date().toISOString(),
    };
    onDataUpdate({ distortionExamples: [...(userData.distortionExamples || []), newDistortionExample] });
    setSelectedDistortion('');
    setExample('');
  };

  return (
    <div className="cognitive-distortions">
      <h2>Cognitive Distortions</h2>
      <div className="distortions-list">
        {cognitiveDistortions.map((distortion, index) => (
          <div key={index} className="distortion-item">
            <h3>{distortion.name}</h3>
            <p>{distortion.description}</p>
          </div>
        ))}
      </div>
      <form onSubmit={handleSubmit} className="distortion-form">
        <h3>Record a Cognitive Distortion</h3>
        <div className="form-group">
          <label htmlFor="distortion">Select a Distortion:</label>
          <select
            id="distortion"
            value={selectedDistortion}
            onChange={(e) => setSelectedDistortion(e.target.value)}
            required
          >
            <option value="">Select a distortion</option>
            {cognitiveDistortions.map((distortion, index) => (
              <option key={index} value={distortion.name}>{distortion.name}</option>
            ))}
          </select>
        </div>
        <div className="form-group">
          <label htmlFor="example">Example:</label>
          <textarea
            id="example"
            value={example}
            onChange={(e) => setExample(e.target.value)}
            required
            placeholder="Describe an example of this cognitive distortion"
          />
        </div>
        <button type="submit">Save Example</button>
      </form>
      <div className="distortion-examples">
        <h3>Your Cognitive Distortion Examples</h3>
        {userData.distortionExamples && userData.distortionExamples.length > 0 ? (
          userData.distortionExamples.map((item, index) => (
            <div key={index} className="distortion-example-item">
              <p><strong>Date:</strong> {new Date(item.date).toLocaleDateString()}</p>
              <p><strong>Distortion:</strong> {item.distortion}</p>
              <p><strong>Example:</strong> {item.example}</p>
            </div>
          ))
        ) : (
          <p>No examples recorded yet. Start by adding an example above!</p>
        )}
      </div>
    </div>
  );
};

export default CognitiveDistortions;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBTExercises.css`:

```````css
.cbt-exercises .exercises-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .exercise-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    cursor: pointer;
  }
  
  .selected-exercise {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 2rem;
  }
  
  .exercise-history {
    margin-top: 2rem;
  }
  
  .exercise-entry {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CognitiveDistortions.css`:

```````css
.cognitive-distortions .distortions-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .distortion-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .distortion-form {
    margin-bottom: 2rem;
  }
  
  .distortion-examples {
    margin-top: 2rem;
  }
  
  .distortion-example-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/ThoughtRecord.css`:

```````css
.thought-record form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
  }
  
  .form-group label {
    margin-bottom: 0.5rem;
  }
  
  .form-group textarea {
    height: 100px;
    padding: 0.5rem;
  }
  
  .thought-record-history {
    margin-top: 2rem;
  }
  
  .thought-record-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/BeliefChallenger.js`:

```````js
import React, { useState } from 'react';
import './BeliefChallenger.css';

const BeliefChallenger = ({ userData, onDataUpdate }) => {
  const [belief, setBelief] = useState('');
  const [evidence, setEvidence] = useState('');
  const [alternativeView, setAlternativeView] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    const newBeliefChallenge = {
      belief,
      evidence,
      alternativeView,
      date: new Date().toISOString(),
    };
    onDataUpdate({ beliefChallenges: [...(userData.beliefChallenges || []), newBeliefChallenge] });
    // Reset form
    setBelief('');
    setEvidence('');
    setAlternativeView('');
  };

  return (
    <div className="belief-challenger">
      <h2>Belief Challenger</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="belief">Negative Belief:</label>
          <textarea
            id="belief"
            value={belief}
            onChange={(e) => setBelief(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label htmlFor="evidence">Evidence Against This Belief:</label>
          <textarea
            id="evidence"
            value={evidence}
            onChange={(e) => setEvidence(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label htmlFor="alternativeView">Alternative View:</label>
          <textarea
            id="alternativeView"
            value={alternativeView}
            onChange={(e) => setAlternativeView(e.target.value)}
            required
          />
        </div>
        <button type="submit">Save Belief Challenge</button>
      </form>
      <div className="belief-challenge-history">
        <h3>Previous Belief Challenges</h3>
        {userData.beliefChallenges && userData.beliefChallenges.length > 0 ? (
          userData.beliefChallenges.map((challenge, index) => (
            <div key={index} className="belief-challenge-item">
              <p><strong>Date:</strong> {new Date(challenge.date).toLocaleDateString()}</p>
              <p><strong>Negative Belief:</strong> {challenge.belief}</p>
              <p><strong>Evidence Against:</strong> {challenge.evidence}</p>
              <p><strong>Alternative View:</strong> {challenge.alternativeView}</p>
            </div>
          ))
        ) : (
          <p>No belief challenges recorded yet.</p>
        )}
      </div>
    </div>
  );
};

export default BeliefChallenger;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/cbtService.js`:

```````js
import { db, doc, getDoc, setDoc, updateDoc } from '../../firebase/firebase';

export const fetchUserCBTData = async (userId) => {
  try {
    const userDocRef = doc(db, 'userCBT', userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists()) {
      return userDocSnap.data();
    } else {
      // If the document doesn't exist, create it with default values
      const defaultData = {
        thoughtRecords: [],
        distortionExamples: [],
        beliefChallenges: [],
        exerciseEntries: [],
        moodEntries: [],
      };
      await setDoc(userDocRef, defaultData);
      return defaultData;
    }
  } catch (error) {
    console.error('Error fetching user CBT data:', error);
    throw error;
  }
};

export const updateUserCBTData = async (userId, newData) => {
  try {
    const userDocRef = doc(db, 'userCBT', userId);
    await updateDoc(userDocRef, newData);
  } catch (error) {
    console.error('Error updating user CBT data:', error);
    throw error;
  }
};
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/ThoughtRecord.js`:

```````js
import React, { useState } from 'react';
import './ThoughtRecord.css';

const ThoughtRecord = ({ userData, onDataUpdate }) => {
  const [situation, setSituation] = useState('');
  const [thoughts, setThoughts] = useState('');
  const [emotions, setEmotions] = useState('');
  const [behaviors, setBehaviors] = useState('');
  const [alternativeThoughts, setAlternativeThoughts] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    const newThoughtRecord = {
      situation,
      thoughts,
      emotions,
      behaviors,
      alternativeThoughts,
      date: new Date().toISOString(),
    };
    onDataUpdate({ thoughtRecords: [...(userData.thoughtRecords || []), newThoughtRecord] });
    // Reset form
    setSituation('');
    setThoughts('');
    setEmotions('');
    setBehaviors('');
    setAlternativeThoughts('');
  };

  return (
    <div className="thought-record">
      <h2>Thought Record</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="situation">Situation:</label>
          <textarea
            id="situation"
            value={situation}
            onChange={(e) => setSituation(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label htmlFor="thoughts">Thoughts:</label>
          <textarea
            id="thoughts"
            value={thoughts}
            onChange={(e) => setThoughts(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label htmlFor="emotions">Emotions:</label>
          <textarea
            id="emotions"
            value={emotions}
            onChange={(e) => setEmotions(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label htmlFor="behaviors">Behaviors:</label>
          <textarea
            id="behaviors"
            value={behaviors}
            onChange={(e) => setBehaviors(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label htmlFor="alternativeThoughts">Alternative Thoughts:</label>
          <textarea
            id="alternativeThoughts"
            value={alternativeThoughts}
            onChange={(e) => setAlternativeThoughts(e.target.value)}
            required
          />
        </div>
        <button type="submit">Save Thought Record</button>
      </form>
      <div className="thought-record-history">
        <h3>Previous Thought Records</h3>
        {userData.thoughtRecords && userData.thoughtRecords.length > 0 ? (
          userData.thoughtRecords.map((record, index) => (
            <div key={index} className="thought-record-item">
              <p><strong>Date:</strong> {new Date(record.date).toLocaleDateString()}</p>
              <p><strong>Situation:</strong> {record.situation}</p>
              <p><strong>Thoughts:</strong> {record.thoughts}</p>
              <p><strong>Emotions:</strong> {record.emotions}</p>
              <p><strong>Behaviors:</strong> {record.behaviors}</p>
              <p><strong>Alternative Thoughts:</strong> {record.alternativeThoughts}</p>
            </div>
          ))
        ) : (
          <p>No thought records yet.</p>
        )}
      </div>
    </div>
  );
};

export default ThoughtRecord;
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/BeliefChallenger.css`:

```````css
.belief-challenger form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .belief-challenge-history {
    margin-top: 2rem;
  }
  
  .belief-challenge-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/CBT/CBTProgress.css`:

```````css
.cbt-progress .progress-stats {
    display: flex;
    justify-content: space-between;
    margin-bottom: 2rem;
  }
  
  .stat {
    text-align: center;
  }
  
  .mood-chart {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationInsights.css`:

```````css
.meditation-insights {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .insight-stat {
    margin-bottom: 1rem;
  }
  
  .insight-stat h3 {
    margin: 0;
    font-size: 1rem;
    color: #666;
  }
  
  .insight-stat p {
    margin: 0;
    font-size: 1.2rem;
    font-weight: bold;
  }
  
  .category-breakdown {
    margin-top: 2rem;
  }
  
  .insight-recommendations {
    margin-top: 2rem;
  }
  
  .insight-recommendations ul {
    padding-left: 1.5rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/Meditation.css`:

```````css
.meditation-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .meditation-content {
    display: flex;
    gap: 2rem;
  }
  
  .meditation-sidebar {
    flex: 1;
  }
  
  .meditation-main {
    flex: 2;
  }
  
  .meditation-welcome {
    text-align: center;
    padding: 2rem;
    background-color: #f0f0f0;
    border-radius: 8px;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationTimer.css`:

```````css
.meditation-timer {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 2rem;
  }
  
  .timer-display {
    font-size: 3rem;
    text-align: center;
    margin: 1rem 0;
  }
  
  .timer-controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  
  .timer-controls input[type="range"] {
    width: 100%;
  }
  
  .timer-notification {
    background-color: #4CAF50;
    color: white;
    text-align: center;
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationPlayer.js`:

```````js
import React, { useState, useRef, useEffect } from 'react';
import './MeditationPlayer.css';

const MeditationPlayer = ({ meditation, onComplete }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const audioRef = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      audioRef.current.play();
    } else {
      audioRef.current.pause();
    }
  }, [isPlaying]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleTimeUpdate = () => {
    setCurrentTime(audioRef.current.currentTime);
  };

  const handleEnded = () => {
    setIsPlaying(false);
    onComplete(meditation.duration);
  };

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  return (
    <div className="meditation-player">
      <h2>{meditation.title}</h2>
      <p>{meditation.description}</p>
      <audio 
        ref={audioRef}
        src={meditation.audioUrl} 
        onTimeUpdate={handleTimeUpdate}
        onEnded={handleEnded}
      />
      <div className="player-controls">
        <button onClick={handlePlayPause}>
          {isPlaying ? 'Pause' : 'Play'}
        </button>
        <div className="progress-bar">
          <div 
            className="progress" 
            style={{ width: `${(currentTime / meditation.duration) * 100}%` }}
          ></div>
        </div>
        <span>{formatTime(currentTime)} / {formatTime(meditation.duration)}</span>
      </div>
    </div>
  );
};

export default MeditationPlayer;
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/CustomMeditation.css`:

```````css
.custom-meditation {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 2rem;
  }
  
  .custom-setting {
    margin-bottom: 1rem;
  }
  
  .custom-setting label {
    display: block;
    margin-bottom: 0.5rem;
  }
  
  .custom-setting input,
  .custom-setting select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationList.css`:

```````css
.meditation-list ul {
    list-style-type: none;
    padding: 0;
  }
  
  .meditation-list li {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    padding: 1rem;
    background-color: #f0f0f0;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .meditation-list li:hover {
    background-color: #e0e0e0;
  }
  
  .meditation-list img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 1rem;
  }
  
  .meditation-info h3 {
    margin: 0 0 0.5rem 0;
  }
  
  .meditation-info p {
    margin: 0;
    font-size: 0.9rem;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationPlayer.css`:

```````css
.meditation-player {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
  }
  
  .player-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .progress-bar {
    flex-grow: 1;
    height: 8px;
    background-color: #ddd;
    border-radius: 4px;
    overflow: hidden;
  }
  
  .progress {
    height: 100%;
    background-color: #4CAF50;
  }
  
  button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #45a049;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationTimer.js`:

```````js
import React, { useState, useEffect } from 'react';
import './MeditationTimer.css';

const MeditationTimer = () => {
  const [duration, setDuration] = useState(5);
  const [timeLeft, setTimeLeft] = useState(duration * 60);
  const [isActive, setIsActive] = useState(false);
  const [showNotification, setShowNotification] = useState(false);

  useEffect(() => {
    let interval = null;
    if (isActive && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(timeLeft => timeLeft - 1);
      }, 1000);
    } else if (isActive && timeLeft === 0) {
      setIsActive(false);
      setShowNotification(true);
      clearInterval(interval);
    }
    return () => clearInterval(interval);
  }, [isActive, timeLeft]);

  const handleStart = () => {
    setIsActive(true);
    setTimeLeft(duration * 60);
    setShowNotification(false);
  };

  const handlePause = () => {
    setIsActive(false);
  };

  const handleReset = () => {
    setIsActive(false);
    setTimeLeft(duration * 60);
    setShowNotification(false);
  };

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  return (
    <div className="meditation-timer">
      <h2>Meditation Timer</h2>
      <div className="timer-display">{formatTime(timeLeft)}</div>
      <div className="timer-controls">
        <input 
          type="range" 
          min="1" 
          max="60" 
          value={duration} 
          onChange={(e) => setDuration(parseInt(e.target.value))} 
        />
        <span>{duration} minutes</span>
        {!isActive ? (
          <button onClick={handleStart}>Start</button>
        ) : (
          <button onClick={handlePause}>Pause</button>
        )}
        <button onClick={handleReset}>Reset</button>
      </div>
      {showNotification && (
        <div className="timer-notification">
          Meditation session complete!
        </div>
      )}
    </div>
  );
};

export default MeditationTimer;
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationList.js`:

```````js
import React from 'react';
import './MeditationList.css';

const MeditationList = ({ meditations, onSelectMeditation }) => {
  return (
    <div className="meditation-list">
      <h2>Guided Meditations</h2>
      <ul>
        {meditations.map((meditation) => (
          <li key={meditation.id} onClick={() => onSelectMeditation(meditation)}>
            <img src={meditation.thumbnailUrl} alt={meditation.title} />
            <div className="meditation-info">
              <h3>{meditation.title}</h3>
              <p>{meditation.duration} minutes - {meditation.category}</p>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default MeditationList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/CustomMeditation.js`:

```````js
import React, { useState } from 'react';
import './CustomMeditation.css';

const CustomMeditation = () => {
  const [duration, setDuration] = useState(10);
  const [focus, setFocus] = useState('breath');
  const [background, setBackground] = useState('nature');

  const handleStartCustomMeditation = () => {
    // Here you would typically start a custom meditation session
    console.log('Starting custom meditation:', { duration, focus, background });
  };

  return (
    <div className="custom-meditation">
      <h2>Create Custom Meditation</h2>
      <div className="custom-setting">
        <label htmlFor="duration">Duration (minutes)</label>
        <input
          type="number"
          id="duration"
          value={duration}
          onChange={(e) => setDuration(parseInt(e.target.value))}
          min="1"
          max="60"
        />
      </div>
      <div className="custom-setting">
        <label htmlFor="focus">Focus</label>
        <select
          id="focus"
          value={focus}
          onChange={(e) => setFocus(e.target.value)}
        >
          <option value="breath">Breath Awareness</option>
          <option value="body-scan">Body Scan</option>
          <option value="loving-kindness">Loving-Kindness</option>
          <option value="visualization">Visualization</option>
        </select>
      </div>
      <div className="custom-setting">
        <label htmlFor="background">Background Sound</label>
        <select
          id="background"
          value={background}
          onChange={(e) => setBackground(e.target.value)}
        >
          <option value="nature">Nature Sounds</option>
          <option value="rain">Rain</option>
          <option value="ocean">Ocean Waves</option>
          <option value="white-noise">White Noise</option>
          <option value="none">No Background Sound</option>
        </select>
      </div>
      <button onClick={handleStartCustomMeditation}>Start Custom Meditation</button>
    </div>
  );
};

export default CustomMeditation;
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationProgress.css`:

```````css
.meditation-progress {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .progress-stats {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
  }
  
  .stat {
    text-align: center;
  }
  
  .stat h3 {
    margin: 0;
    font-size: 1rem;
    color: #666;
  }
  
  .stat p {
    margin: 0;
    font-size: 1.5rem;
    font-weight: bold;
  }
  
  .progress-chart {
    height: 200px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/meditationService.js`:

```````js
import { db, collection, getDocs, query, where, addDoc, updateDoc, doc } from '../../firebase/firebase';

export const fetchMeditations = async () => {
  try {
    const meditationsRef = collection(db, 'meditations');
    const querySnapshot = await getDocs(meditationsRef);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error('Error fetching meditations:', error);
    throw error;
  }
};

export const fetchUserMeditationData = async (userId) => {
  try {
    const userMeditationRef = collection(db, 'userMeditations');
    const q = query(userMeditationRef, where('userId', '==', userId));
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      return null;
    }
    
    return querySnapshot.docs[0].data();
  } catch (error) {
    console.error('Error fetching user meditation data:', error);
    throw error;
  }
};

export const updateUserMeditationData = async (userId, meditationData) => {
  try {
    const userMeditationRef = collection(db, 'userMeditations');
    const q = query(userMeditationRef, where('userId', '==', userId));
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      await addDoc(userMeditationRef, { userId, ...meditationData });
    } else {
      const docRef = doc(db, 'userMeditations', querySnapshot.docs[0].id);
      await updateDoc(docRef, meditationData);
    }
  } catch (error) {
    console.error('Error updating user meditation data:', error);
    throw error;
  }
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationProgress.js`:

```````js
import React from 'react';
import { Line } from 'react-chartjs-2';
import './MeditationProgress.css';

const MeditationProgress = ({ userData }) => {
  const chartData = {
    labels: userData ? userData.meditationHistory.map(entry => entry.date) : [],
    datasets: [
      {
        label: 'Minutes Meditated',
        data: userData ? userData.meditationHistory.map(entry => entry.duration) : [],
        fill: false,
        backgroundColor: 'rgb(75, 192, 192)',
        borderColor: 'rgba(75, 192, 192, 0.2)',
      },
    ],
  };

  const options = {
    scales: {
      y: {
        beginAtZero: true,
      },
    },
  };

  return (
    <div className="meditation-progress">
      <h2>Your Meditation Progress</h2>
      {userData ? (
        <>
          <div className="progress-stats">
            <div className="stat">
              <h3>Total Sessions</h3>
              <p>{userData.totalSessions}</p>
            </div>
            <div className="stat">
              <h3>Total Minutes</h3>
              <p>{userData.totalMinutes}</p>
            </div>
            <div className="stat">
              <h3>Current Streak</h3>
              <p>{userData.currentStreak} days</p>
            </div>
          </div>
          <div className="progress-chart">
            <Line data={chartData} options={options} />
          </div>
        </>
      ) : (
        <p>Start meditating to see your progress!</p>
      )}
    </div>
  );
};

export default MeditationProgress;
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationSettings.css`:

```````css
.meditation-settings {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .setting {
    margin-bottom: 1rem;
  }
  
  .setting label {
    display: block;
    margin-bottom: 0.5rem;
  }
  
  .setting input,
  .setting select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationInsights.js`:

```````js
import React from 'react';
import { Pie } from 'react-chartjs-2';
import './MeditationInsights.css';

const MeditationInsights = ({ userData }) => {
  const categoryData = userData ? {
    labels: Object.keys(userData.categoryBreakdown),
    datasets: [
      {
        data: Object.values(userData.categoryBreakdown),
        backgroundColor: [
          '#FF6384',
          '#36A2EB',
          '#FFCE56',
          '#4BC0C0',
          '#9966FF',
        ],
        hoverBackgroundColor: [
          '#FF6384',
          '#36A2EB',
          '#FFCE56',
          '#4BC0C0',
          '#9966FF',
        ],
      },
    ],
  } : null;

  return (
    <div className="meditation-insights">
      <h2>Meditation Insights</h2>
      {userData ? (
        <>
          <div className="insight-stat">
            <h3>Most Frequent Time</h3>
            <p>{userData.mostFrequentTime}</p>
          </div>
          <div className="insight-stat">
            <h3>Favorite Category</h3>
            <p>{userData.favoriteCategory}</p>
          </div>
          <div className="insight-stat">
            <h3>Longest Session</h3>
            <p>{userData.longestSession} minutes</p>
          </div>
          <div className="category-breakdown">
            <h3>Category Breakdown</h3>
            <Pie data={categoryData} />
          </div>
          <div className="insight-recommendations">
            <h3>Recommendations</h3>
            <ul>
              {userData.recommendations.map((rec, index) => (
                <li key={index}>{rec}</li>
              ))}
            </ul>
          </div>
        
     </> ) : (
        <p>Meditate more to unlock insights!</p>
      )}
    </div>
  );
};

export default MeditationInsights;
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/Meditation.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import MeditationList from './MeditationList';
import MeditationPlayer from './MeditationPlayer';
import MeditationProgress from './MeditationProgress';
import MeditationTimer from './MeditationTimer';
import MeditationSettings from './MeditationSettings';
import CustomMeditation from './CustomMeditation';
import MeditationInsights from './MeditationInsights';
import { fetchMeditations, fetchUserMeditationData } from './meditationService';
import './Meditation.css';
import Navbar from '../Routes/Navbar';

const Meditation = () => {
  const { user } = useUserContext();
  const [meditations, setMeditations] = useState([]);
  const [selectedMeditation, setSelectedMeditation] = useState(null);
  const [userMeditationData, setUserMeditationData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadMeditationData = async () => {
      setIsLoading(true);
      try {
        const fetchedMeditations = await fetchMeditations();
        setMeditations(fetchedMeditations);

        if (user) {
          const userData = await fetchUserMeditationData(user.uid);
          setUserMeditationData(userData);
        }
      } catch (error) {
        console.error('Error loading meditation data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadMeditationData();
  }, [user]);

  const handleSelectMeditation = (meditation) => {
    setSelectedMeditation(meditation);
  };

  const handleCompleteMeditation = async (duration) => {
    // Update user's meditation data
    // This would typically involve a call to your backend service
    console.log(`Completed meditation for ${duration} minutes`);
  };

  if (isLoading) {
    return <div className="loading">Loading meditation data...</div>;
  }

  return (
      
      <div className="meditation-container">
        <h1>Meditation Center</h1>
        <div className="meditation-content">
          <div className="meditation-sidebar">
            <MeditationList 
              meditations={meditations} 
              onSelectMeditation={handleSelectMeditation}
            />
            <MeditationProgress userData={userMeditationData} />
          </div>
          <div className="meditation-main">
            {selectedMeditation ? (
              <MeditationPlayer 
                meditation={selectedMeditation}
                onComplete={handleCompleteMeditation}
              />
            ) : (
              <div className="meditation-welcome">
                <h2>Welcome to your meditation journey</h2>
                <p>Select a meditation from the list to begin your practice.</p>
              </div>
            )}
            <MeditationTimer />
            <CustomMeditation />
          </div>
          <div className="meditation-sidebar">
            <MeditationSettings userData={userMeditationData} />
            <MeditationInsights userData={userMeditationData} />
          </div>
        </div>
      </div>
    
  );
};

export default Meditation;
```````

`/Users/charlesdeng/code/rintzai/src/components/Meditation/MeditationSettings.js`:

```````js
import React, { useState } from 'react';
import './MeditationSettings.css';

const MeditationSettings = ({ userData }) => {
  const [dailyGoal, setDailyGoal] = useState(userData ? userData.dailyGoal : 10);
  const [reminderTime, setReminderTime] = useState(userData ? userData.reminderTime : '09:00');
  const [backgroundSound, setBackgroundSound] = useState(userData ? userData.backgroundSound : 'nature');

  const handleSaveSettings = () => {
    // Here you would typically update these settings in your backend
    console.log('Saving settings:', { dailyGoal, reminderTime, backgroundSound });
  };

  return (
    <div className="meditation-settings">
      <h2>Meditation Settings</h2>
      <div className="setting">
        <label htmlFor="dailyGoal">Daily Meditation Goal (minutes)</label>
        <input
          type="number"
          id="dailyGoal"
          value={dailyGoal}
          onChange={(e) => setDailyGoal(parseInt(e.target.value))}
          min="1"
          max="120"
        />
      </div>
      <div className="setting">
        <label htmlFor="reminderTime">Daily Reminder Time</label>
        <input
          type="time"
          id="reminderTime"
          value={reminderTime}
          onChange={(e) => setReminderTime(e.target.value)}
        />
      </div>
      <div className="setting">
        <label htmlFor="backgroundSound">Background Sound</label>
        <select
          id="backgroundSound"
          value={backgroundSound}
          onChange={(e) => setBackgroundSound(e.target.value)}
        >
          <option value="nature">Nature Sounds</option>
          <option value="rain">Rain</option>
          <option value="ocean">Ocean Waves</option>
          <option value="white-noise">White Noise</option>
          <option value="none">No Background Sound</option>
        </select>
      </div>
      <button onClick={handleSaveSettings}>Save Settings</button>
    </div>
  );
};

export default MeditationSettings;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/progressService.js`:

```````js
import { db, doc, getDoc } from '../../firebase/firebase';

export const fetchUserProgressData = async (userId) => {
  console.log('Fetching progress data for user:', userId);
  try {
    const userDocRef = doc(db, 'userProgress', userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists()) {
      console.log('Progress data found:', userDocSnap.data());
      return userDocSnap.data();
    } else {
      console.log('No progress data found for user');
      return null;
    }
  } catch (error) {
    console.error('Error fetching user progress data:', error);
    throw error;
  }
};

export const analyzeProgressData = (data) => {
  console.log('Analyzing progress data:', data);
  
  const analyzedData = {
    ...data,
    wellbeingTrend: calculateTrend(data.overallWellbeing),
    wellbeingChange: calculatePercentageChange(data.overallWellbeing),
    moodStabilityTrend: calculateMoodStability(data.moodScores),
    moodStabilityChange: calculatePercentageChange(data.moodScores),
    anxietyTrend: calculateTrend(data.anxietyScores),
    anxietyChange: calculatePercentageChange(data.anxietyScores),
    resilienceScore: calculateResilienceScore(data),
    mentalHealthIndex: calculateMentalHealthIndex(data),
    moodPatterns: analyzeMoodPatterns(data.moodScores),
    moodTriggers: identifyMoodTriggers(data),
    emotionalIntelligenceScore: calculateEmotionalIntelligenceScore(data),
    habitImpactOnWellbeing: analyzeHabitImpact(data),
    recommendedNewHabit: suggestNewHabit(data),
    longestHabitStreak: calculateLongestStreak(data.habitData),
    sentimentTrend: analyzeSentimentTrend(data.journalEntries),
    emotionalDepthScore: calculateEmotionalDepthScore(data.journalEntries),
    writingFrequency: analyzeWritingFrequency(data.journalEntries),
    timeOfDayPattern: analyzeTimeOfDayPattern(data.journalEntries),
    goalAchievementTrend: analyzeGoalAchievementTrend(data.goalData),
    averageTimeToCompleteGoal: calculateAverageTimeToCompleteGoal(data.goalData),
    goalConsistencyScore: calculateGoalConsistencyScore(data.goalData),
    recommendedFocusArea: suggestFocusArea(data),
    therapyProgressTrend: analyzeTherapyProgressTrend(data.therapyData),
    therapyEngagementScore: calculateTherapyEngagementScore(data.therapyData),
    effectiveTechniques: identifyEffectiveTechniques(data.therapyData),
  };

  console.log('Analyzed data:', analyzedData);
  return analyzedData;
};

const calculateTrend = (data) => {
  const firstHalf = data.slice(0, Math.floor(data.length / 2));
  const secondHalf = data.slice(Math.floor(data.length / 2));
  const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;
  const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;
  return secondAvg > firstAvg ? 'improved' : 'declined';
};

const calculatePercentageChange = (data) => {
  const first = data[0];
  const last = data[data.length - 1];
  return ((last - first) / first * 100).toFixed(2);
};

const calculateMoodStability = (moodScores) => {
  const variance = moodScores.reduce((sum, score) => sum + Math.pow(score - average(moodScores), 2), 0) / moodScores.length;
  return variance < 2 ? 'stable' : 'variable';
};

const average = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;

const calculateResilienceScore = (data) => {
  let score = 0;
  score += data.moodStabilityTrend === 'stable' ? 3 : 1;
  score += data.anxietyTrend === 'improved' ? 3 : 1;
  score += data.overallHabitAdherence > 70 ? 3 : 1;
  score += data.goalCompletionRate > 50 ? 1 : 0;
  return Math.min(score, 10);
};

const calculateMentalHealthIndex = (data) => {
  let index = 0;
  index += data.overallWellbeing[data.overallWellbeing.length - 1] * 0.3;
  index += (10 - average(data.anxietyScores)) * 0.2;
  index += data.resilienceScore * 0.2;
  index += data.emotionalIntelligenceScore * 0.15;
  index += data.therapyEngagementScore * 0.15;
  return Math.round(index * 10);
};

// Implement the following functions based on your specific requirements
const analyzeMoodPatterns = (moodScores) => {
  // Implementation
};

const identifyMoodTriggers = (data) => {
  // Implementation
};

const calculateEmotionalIntelligenceScore = (data) => {
  // Implementation
};

const analyzeHabitImpact = (data) => {
  // Implementation
};

const suggestNewHabit = (data) => {
  // Implementation
};

const calculateLongestStreak = (habitData) => {
  // Implementation
};

const analyzeSentimentTrend = (journalEntries) => {
  // Implementation
};

const calculateEmotionalDepthScore = (journalEntries) => {
  // Implementation
};

const analyzeWritingFrequency = (journalEntries) => {
  // Implementation
};

const analyzeTimeOfDayPattern = (journalEntries) => {
  // Implementation
};

const analyzeGoalAchievementTrend = (goalData) => {
  // Implementation
};

const calculateAverageTimeToCompleteGoal = (goalData) => {
  // Implementation
};

const calculateGoalConsistencyScore = (goalData) => {
  // Implementation
};

const suggestFocusArea = (data) => {
  // Implementation
};

const analyzeTherapyProgressTrend = (therapyData) => {
  // Implementation
};

const calculateTherapyEngagementScore = (therapyData) => {
  // Implementation
};

const identifyEffectiveTechniques = (therapyData) => {
  // Implementation
};

console.log('progressService loaded');

export default {
  fetchUserProgressData,
  analyzeProgressData
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/MoodAnalysis.js`:

```````js
import React from 'react';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const MoodAnalysis = ({ data }) => {
  console.log('Rendering MoodAnalysis with data:', data);

  const chartData = {
    labels: Object.keys(data.moodFrequency),
    datasets: [
      {
        label: 'Mood Frequency',
        data: Object.values(data.moodFrequency),
        backgroundColor: [
          'rgba(255, 99, 132, 0.5)',
          'rgba(54, 162, 235, 0.5)',
          'rgba(255, 206, 86, 0.5)',
          'rgba(75, 192, 192, 0.5)',
          'rgba(153, 102, 255, 0.5)',
          'rgba(255, 159, 64, 0.5)',
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Mood Frequency Analysis'
      }
    }
  };

  return (
    <div className="mood-analysis">
      <h2>Mood Analysis</h2>
      <Bar data={chartData} options={options} />
      <div className="mood-insights">
        <h3>Insights</h3>
        <p>Your most frequent mood: <strong>{data.mostFrequentMood}</strong></p>
        <p>Your mood variability: <strong>{data.moodVariability}</strong></p>
        <p>Mood improvement areas: <strong>{data.moodImprovementAreas.join(', ')}</strong></p>
        <p>Mood patterns: {data.moodPatterns}</p>
        <p>Mood triggers: {data.moodTriggers.join(', ')}</p>
        <p>Emotional intelligence score: {data.emotionalIntelligenceScore} out of 10</p>
      </div>
    </div>
  );
};

export default MoodAnalysis;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/JournalInsights.js`:

```````js
import React from 'react';
import './JournalInsights.css';

const JournalInsights = ({ data }) => {
  console.log('Rendering JournalInsights with data:', data);

  return (
    <div className="journal-insights">
      <h2>Journal Insights</h2>
      <div className="word-frequency">
        <h3>Most Used Words</h3>
        <ul className="word-list">
          {data.wordFrequency.slice(0, 10).map((word, index) => (
            <li key={index} style={{fontSize: `${14 + word.value * 10}px`}}>
              {word.text}
            </li>
          ))}
        </ul>
      </div>
      <div className="sentiment-analysis">
        <h3>Sentiment Analysis</h3>
        <p>Overall sentiment: <strong>{data.overallSentiment}</strong></p>
        <p>Positive entries: <strong>{data.positiveSentimentPercentage}%</strong></p>
        <p>Negative entries: <strong>{data.negativeSentimentPercentage}%</strong></p>
        <p>Neutral entries: <strong>{data.neutralSentimentPercentage}%</strong></p>
        <p>Sentiment trend: {data.sentimentTrend}</p>
        <p>Emotional depth score: {data.emotionalDepthScore} out of 10</p>
      </div>
      <div className="topic-analysis">
        <h3>Common Topics</h3>
        <ul>
          {data.commonTopics.map((topic, index) => (
            <li key={index}>{topic}</li>
          ))}
        </ul>
      </div>
      <div className="writing-patterns">
        <h3>Writing Patterns</h3>
        <p>Average entry length: {data.averageEntryLength} words</p>
        <p>Writing frequency: {data.writingFrequency}</p>
        <p>Time of day pattern: {data.timeOfDayPattern}</p>
      </div>
    </div>
  );
};

export default JournalInsights;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/TherapyProgress.js`:

```````js
import React from 'react';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const TherapyProgress = ({ data }) => {
  console.log('Rendering TherapyProgress with data:', data);

  const chartData = {
    labels: data.therapyDates,
    datasets: [
      {
        label: 'Therapy Session Rating',
        data: data.therapyRatings,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      }
    ]
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Therapy Progress Over Time'
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        max: 10
      }
    }
  };

  return (
    <div className="therapy-progress">
      <h2>Therapy Progress</h2>
      <Line data={chartData} options={options} />
      <div className="therapy-insights">
        <h3>Therapy Insights</h3>
        <p>Total sessions: <strong>{data.totalSessions}</strong></p>
        <p>Average session rating: <strong>{data.averageSessionRating.toFixed(1)}</strong></p>
        <p>Most discussed topics:</p>
        <ul>
          {data.topDiscussedTopics.map((topic, index) => (
            <li key={index}>{topic}</li>
          ))}
        </ul>
        <p>Therapist's notes: <strong>{data.therapistNotes}</strong></p>
        <p>Progress trend: {data.therapyProgressTrend}</p>
        <p>Recommended focus areas: {data.recommendedFocusAreas.join(', ')}</p>
        <p>Therapy engagement score: {data.therapyEngagementScore} out of 10</p>
      </div>
      <div className="therapy-techniques">
        <h3>Effective Techniques</h3>
        <ul>
          {data.effectiveTechniques.map((technique, index) => (
            <li key={index}>{technique}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default TherapyProgress;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/CustomMetrics.js`:

```````js
import React, { useState } from 'react';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const CustomMetrics = ({ data }) => {
  console.log('Rendering CustomMetrics with data:', data);

  const [selectedMetric, setSelectedMetric] = useState(data.customMetrics[0].name);

  const chartData = {
    labels: data.dates,
    datasets: [
      {
        label: selectedMetric,
        data: data.customMetrics.find(metric => metric.name === selectedMetric).values,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      }
    ]
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: `Custom Metric: ${selectedMetric}`
      }
    }
  };
  
  return (
    <div className="custom-metrics">
      <h2>Custom Metrics</h2>
      <select 
        value={selectedMetric} 
        onChange={(e) => setSelectedMetric(e.target.value)}
        className="metric-selector"
      >
        {data.customMetrics.map(metric => (
          <option key={metric.name} value={metric.name}>{metric.name}</option>
        ))}
      </select>
      <Line data={chartData} options={options} />
      <div className="metric-insights">
        <h3>Metric Insights</h3>
        <p>Average value: <strong>{data.customMetrics.find(metric => metric.name === selectedMetric).average.toFixed(2)}</strong></p>
        <p>Trend: <strong>{data.customMetrics.find(metric => metric.name === selectedMetric).trend}</strong></p>
        <p>Correlation with mood: <strong>{data.customMetrics.find(metric => metric.name === selectedMetric).moodCorrelation}</strong></p>
        <p>Impact on overall well-being: {data.customMetrics.find(metric => metric.name === selectedMetric).impactOnWellbeing}</p>
        <p>Recommended actions: {data.customMetrics.find(metric => metric.name === selectedMetric).recommendedActions.join(', ')}</p>
      </div>
    </div>
  );
  };
  
  export default CustomMetrics;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/GoalProgress.js`:

```````js
import React from 'react';
import { Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const GoalProgress = ({ data }) => {
  console.log('Rendering GoalProgress with data:', data);

  const chartData = {
    labels: ['Completed', 'In Progress', 'Not Started'],
    datasets: [
      {
        data: [data.completedGoals, data.inProgressGoals, data.notStartedGoals],
        backgroundColor: [
          'rgba(75, 192, 192, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(255, 99, 132, 0.6)',
        ],
        borderColor: [
          'rgba(75, 192, 192, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(255, 99, 132, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Goal Progress Overview'
      }
    }
  };

  return (
    <div className="goal-progress">
      <h2>Goal Progress</h2>
      <div className="goal-chart">
        <Doughnut data={chartData} options={options} />
      </div>
      <div className="goal-insights">
        <h3>Goal Insights</h3>
        <p>Total goals: <strong>{data.totalGoals}</strong></p>
        <p>Completion rate: <strong>{data.goalCompletionRate}%</strong></p>
        <p>Most challenging goal: <strong>{data.mostChallengingGoal}</strong></p>
        <p>Next milestone: <strong>{data.nextMilestone}</strong></p>
        <p>Goal achievement trend: {data.goalAchievementTrend}</p>
        <p>Average time to complete a goal: {data.averageTimeToCompleteGoal} days</p>
        <p>Goal consistency score: {data.goalConsistencyScore} out of 10</p>
        <p>Recommended focus area: {data.recommendedFocusArea}</p>
      </div>
      <div className="goal-breakdown">
        <h3>Goal Breakdown</h3>
        <ul>
          {data.goalCategories.map((category, index) => (
            <li key={index}>
              {category.name}: {category.completionRate}% complete
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default GoalProgress;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/Progress.css`:

```````css
.progress-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .progress-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .progress-nav {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .progress-nav button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .progress-nav button:hover {
    background-color: #45a049;
  }
  
  .progress-main {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
  
  .overall-progress,
  .mood-analysis,
  .habit-tracker,
  .journal-insights,
  .goal-progress,
  .therapy-progress,
  .custom-metrics {
    margin-bottom: 2rem;
  }
  
  .progress-summary,
  .mood-insights,
  .habit-insights,
  .sentiment-analysis,
  .topic-analysis,
  .goal-insights,
  .therapy-insights,
  .metric-insights {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .word-cloud-container {
    height: 400px;
    width: 100%;
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .metric-selector {
    margin-bottom: 1rem;
    padding: 0.5rem;
    font-size: 1rem;
    width: 100%;
    max-width: 300px;
  }
  
  .chart-container {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .goal-breakdown,
  .therapy-techniques,
  .writing-patterns {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .goal-breakdown ul,
  .therapy-techniques ul {
    list-style-type: none;
    padding-left: 0;
  }
  
  .goal-breakdown li,
  .therapy-techniques li {
    margin-bottom: 0.5rem;
  }
  
  .custom-metrics .metric-insights {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }
  
  .custom-metrics .metric-insights p {
    background-color: #f9f9f9;
    padding: 0.5rem;
    border-radius: 4px;
    margin: 0;
  }
  
  @media (max-width: 768px) {
    .progress-nav {
      flex-direction: column;
    }
  
    .progress-nav button {
      width: 100%;
    }
  
    .custom-metrics .metric-insights {
      grid-template-columns: 1fr;
    }
  }
  
  .trend-positive {
    color: #4CAF50;
  }
  
  .trend-negative {
    color: #f44336;
  }
  
  .trend-neutral {
    color: #FFA500;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/OverallProgress.js`:

```````js
import React from 'react';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const OverallProgress = ({ data }) => {
  console.log('Rendering OverallProgress with data:', data);

  const chartData = {
    labels: data.dates,
    datasets: [
      {
        label: 'Overall Well-being',
        data: data.overallWellbeing,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      },
      {
        label: 'Mood',
        data: data.moodScores,
        borderColor: 'rgb(255, 99, 132)',
        tension: 0.1
      },
      {
        label: 'Anxiety',
        data: data.anxietyScores,
        borderColor: 'rgb(255, 205, 86)',
        tension: 0.1
      }
    ]
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Overall Mental Health Progress'
      }
    }
  };

  return (
    <div className="overall-progress">
      <h2>Overall Progress</h2>
      <Line data={chartData} options={options} />
      <div className="progress-summary">
        <h3>Summary</h3>
        <p>Your overall well-being has {data.wellbeingTrend} by {data.wellbeingChange}% in the last 30 days.</p>
        <p>Your mood stability has {data.moodStabilityTrend} by {data.moodStabilityChange}%.</p>
        <p>Your anxiety levels have {data.anxietyTrend} by {data.anxietyChange}%.</p>
        <p>Resilience Score: {data.resilienceScore} out of 10</p>
        <p>Mental Health Index: {data.mentalHealthIndex} out of 100</p>
      </div>
    </div>
  );
};

export default OverallProgress;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/JournalInsights.css`:

```````css
.journal-insights {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .word-frequency, .sentiment-analysis, .topic-analysis, .writing-patterns {
    margin-bottom: 2rem;
  }
  
  .word-list {
    list-style-type: none;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
  }
  
  .word-list li {
    background-color: #f0f0f0;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    transition: all 0.3s ease;
  }
  
  .word-list li:hover {
    transform: scale(1.05);
    background-color: #e0e0e0;
  }
  
  .sentiment-analysis p, .writing-patterns p {
    margin: 0.5rem 0;
  }
  
  .topic-analysis ul {
    list-style-type: none;
    padding: 0;
  }
  
  .topic-analysis li {
    background-color: #f0f0f0;
    margin: 0.5rem 0;
    padding: 0.5rem 1rem;
    border-radius: 4px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/Progress.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import OverallProgress from './OverallProgress';
import MoodAnalysis from './MoodAnalysis';
import HabitTracker from './HabitTracker';
import JournalInsights from './JournalInsights';
import GoalProgress from './GoalProgress';
import TherapyProgress from './TherapyProgress';
import CustomMetrics from './CustomMetrics';
import MentalHealthIndex from './MentalHealthIndex';
import { fetchUserProgressData, analyzeProgressData } from './progressService';
import './Progress.css';
import Navbar from '../Routes/Navbar';

const Progress = () => {
  const { user } = useUserContext();
  const [progressData, setProgressData] = useState(null);
  const [activeComponent, setActiveComponent] = useState('OverallProgress');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadProgressData = async () => {
      setIsLoading(true);
      try {
        if (user) {
          console.log('Fetching progress data for user:', user.uid);
          const rawData = await fetchUserProgressData(user.uid);
          console.log('Raw progress data:', rawData);
          const analyzedData = analyzeProgressData(rawData);
          console.log('Analyzed progress data:', analyzedData);
          setProgressData(analyzedData);
        }
      } catch (error) {
        console.error('Error loading progress data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadProgressData();
  }, [user]);

  const renderActiveComponent = () => {
    console.log('Rendering active component:', activeComponent);
    switch (activeComponent) {
      case 'OverallProgress':
        return <OverallProgress data={progressData} />;
      case 'MoodAnalysis':
        return <MoodAnalysis data={progressData} />;
      case 'HabitTracker':
        return <HabitTracker data={progressData} />;
      case 'JournalInsights':
        return <JournalInsights data={progressData} />;
      case 'GoalProgress':
        return <GoalProgress data={progressData} />;
      case 'TherapyProgress':
        return <TherapyProgress data={progressData} />;
      case 'CustomMetrics':
        return <CustomMetrics data={progressData} />;
      case 'MentalHealthIndex':
        return <MentalHealthIndex data={progressData} />;
      default:
        console.warn('Unknown active component:', activeComponent);
        return <OverallProgress data={progressData} />;
    }
  };

  if (isLoading) {
    return <div className="loading">Loading progress data...</div>;
  }

  return (
      
      <div className="progress-container">
        <h1>Your Mental Health Progress</h1>
        <div className="progress-content">
          <nav className="progress-nav">
            <button onClick={() => setActiveComponent('OverallProgress')}>Overall Progress</button>
            <button onClick={() => setActiveComponent('MoodAnalysis')}>Mood Analysis</button>
            <button onClick={() => setActiveComponent('HabitTracker')}>Habit Tracker</button>
            <button onClick={() => setActiveComponent('JournalInsights')}>Journal Insights</button>
            <button onClick={() => setActiveComponent('GoalProgress')}>Goal Progress</button>
            <button onClick={() => setActiveComponent('TherapyProgress')}>Therapy Progress</button>
            <button onClick={() => setActiveComponent('CustomMetrics')}>Custom Metrics</button>
            <button onClick={() => setActiveComponent('MentalHealthIndex')}>Mental Health Index</button>
          </nav>
          <main className="progress-main">
            {renderActiveComponent()}
          </main>
        </div>
      </div>
    
  );
};

export default Progress;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/MentalHealthIndex.js`:

```````js
import React from 'react';
import { Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const MentalHealthIndex = ({ data }) => {
  console.log('Rendering MentalHealthIndex with data:', data);

  const chartData = {
    labels: ['Mental Health Index', 'Room for Improvement'],
    datasets: [
      {
        data: [data.mentalHealthIndex, 100 - data.mentalHealthIndex],
        backgroundColor: [
          'rgba(75, 192, 192, 0.6)',
          'rgba(255, 99, 132, 0.6)',
        ],
        borderColor: [
          'rgba(75, 192, 192, 1)',
          'rgba(255, 99, 132, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Mental Health Index'
      }
    },
    cutout: '70%',
  };

  const getIndexCategory = (index) => {
    if (index >= 80) return 'Excellent';
    if (index >= 60) return 'Good';
    if (index >= 40) return 'Fair';
    return 'Needs Improvement';
  };

  return (
    <div className="mental-health-index">
      <h2>Mental Health Index</h2>
      <div className="index-chart">
        <Doughnut data={chartData} options={options} />
      </div>
      <div className="index-insights">
        <h3>Index Insights</h3>
        <p>Your Mental Health Index: <strong>{data.mentalHealthIndex}</strong></p>
        <p>Category: <strong>{getIndexCategory(data.mentalHealthIndex)}</strong></p>
        <p>This index is calculated based on your overall well-being, anxiety levels, resilience score, emotional intelligence, and therapy engagement.</p>
        <h4>Component Breakdown:</h4>
        <ul>
          <li>Overall Well-being: {data.overallWellbeing[data.overallWellbeing.length - 1]} / 10</li>
          <li>Anxiety Levels: {10 - data.anxietyScores[data.anxietyScores.length - 1]} / 10 (inverted)</li>
          <li>Resilience Score: {data.resilienceScore} / 10</li>
          <li>Emotional Intelligence: {data.emotionalIntelligenceScore} / 10</li>
          <li>Therapy Engagement: {data.therapyEngagementScore} / 10</li>
        </ul>
        <p>Focus areas for improvement:</p>
        <ul>
          {data.focusAreas.map((area, index) => (
            <li key={index}>{area}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default MentalHealthIndex;
```````

`/Users/charlesdeng/code/rintzai/src/components/Progress/HabitTracker.js`:

```````js
import React from 'react';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const MoodAnalysis = ({ data }) => {
  console.log('Rendering MoodAnalysis with data:', data);

  const chartData = {
    labels: Object.keys(data.moodFrequency),
    datasets: [
      {
        label: 'Mood Frequency',
        data: Object.values(data.moodFrequency),
        backgroundColor: [
          'rgba(255, 99, 132, 0.5)',
          'rgba(54, 162, 235, 0.5)',
          'rgba(255, 206, 86, 0.5)',
          'rgba(75, 192, 192, 0.5)',
          'rgba(153, 102, 255, 0.5)',
          'rgba(255, 159, 64, 0.5)',
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Mood Frequency Analysis'
      }
    }
  };

  return (
    <div className="mood-analysis">
      <h2>Mood Analysis</h2>
      <Bar data={chartData} options={options} />
      <div className="mood-insights">
        <h3>Insights</h3>
        <p>Your most frequent mood: <strong>{data.mostFrequentMood}</strong></p>
        <p>Your mood variability: <strong>{data.moodVariability}</strong></p>
        <p>Mood improvement areas: <strong>{data.moodImprovementAreas.join(', ')}</strong></p>
        <p>Mood patterns: {data.moodPatterns}</p>
        <p>Mood triggers: {data.moodTriggers.join(', ')}</p>
        <p>Emotional intelligence score: {data.emotionalIntelligenceScore} out of 10</p>
      </div>
    </div>
  );
};

export default MoodAnalysis;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/conversationSearch.css`:

```````css
.conversation-search {
    padding: 10px;
    border-bottom: 1px solid var(--border-color);
  }
  
  .conversation-search-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 20px;
    font-size: 14px;
    outline: none;
    transition: border-color 0.3s ease;
  }
  
  .conversation-search-input:focus {
    border-color: var(--primary-color);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/chatWindow.css`:

```````css
.chat-window {
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: #fff;
  overflow-y: auto;
  padding: 1rem;
}

.message-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.message {
  max-width: 70%;
  padding: 0.75rem 1rem;
  border-radius: 18px;
  box-shadow: var(--shadow);
  animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.message.sent {
  background-color: var(--primary-color);
  color: #fff;
  align-self: flex-end;
  border-bottom-right-radius: 4px;
}

.message.received {
  background-color: var(--secondary-color);
  align-self: flex-start;
  border-bottom-left-radius: 4px;
}

.message-content {
  word-wrap: break-word;
}

.message-timestamp {
  font-size: 0.8rem;
  color: var(--light-text);
  margin-top: 0.25rem;
  text-align: right;
}

.empty-chat-placeholder {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: var(--light-text);
  font-style: italic;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/UserSearch.js`:

```````js
import React, { useState } from 'react';
import { searchUsers } from './userChatService';
import './userSearch.css';

const UserSearch = ({ onClose, onStartChat }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  const handleSearch = async (e) => {
    e.preventDefault();
    if (searchTerm.trim() === '') return;

    try {
      const results = await searchUsers(searchTerm);
      setSearchResults(results);
      console.log('User search results:', results);
    } catch (error) {
      console.error('Error searching users:', error);
    }
  };

  return (
    <div className="user-search-overlay">
      <div className="user-search-modal">
        <h2>Find a user to chat with</h2>
        <form onSubmit={handleSearch}>
          <input
            type="text"
            placeholder="Search by name, email, or handle"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <button type="submit">Search</button>
        </form>
        <ul className="user-search-results">
          {searchResults.map((user) => (
            <li key={user.id} onClick={() => onStartChat(user)}>
              <div className="user-avatar">
                {user.avatarUrl ? (
                  <img src={user.avatarUrl} alt={`${user.name}'s avatar`} />
                ) : (
                  <div className="default-avatar">{user.name.charAt(0).toUpperCase()}</div>
                )}
              </div>
              <div className="user-info">
                <span className="user-name">{user.name}</span>
                <span className="user-email">{user.email}</span>
              </div>
            </li>
          ))}
        </ul>
        <button className="close-button" onClick={onClose}>Close</button>
      </div>
    </div>
  );
};

export default UserSearch;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/ChatWindow.js`:

```````js
import React, { useEffect, useRef, useState } from 'react';
import { db, collection, onSnapshot, query, where, orderBy } from '../../firebase/firebase';
import './chatWindow.css';
import ChatMessage from './ChatMessage';

const ChatWindow = ({ selectedConversation, loggedInUser, selectedMessage }) => {
  const [messages, setMessages] = useState([]);
  const chatWindowRef = useRef(null);

  useEffect(() => {
    const fetchConversationMessages = async () => {
      if (selectedConversation) {
        const messagesRef = collection(db, 'messages');
        const q = query(
          messagesRef,
          where('conversationId', '==', selectedConversation.id),
          orderBy('timestamp', 'asc')
        );
        const unsubscribe = onSnapshot(q, (snapshot) => {
          const fetchedMessages = snapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          }));
          setMessages(fetchedMessages);
          console.log('Fetched messages:', fetchedMessages);
        });

        return () => {
          unsubscribe();
        };
      } else {
        setMessages([]);
      }
    };

    fetchConversationMessages();
  }, [selectedConversation]);

  useEffect(() => {
    if (chatWindowRef.current) {
      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;
    }
  }, [messages]);

  useEffect(() => {
    if (selectedMessage) {
      const messageElement = document.getElementById(selectedMessage.id);
      if (messageElement) {
        messageElement.scrollIntoView({ behavior: 'smooth' });
        messageElement.classList.add('highlighted');
      }
    }
  }, [selectedMessage]);

  return (
    <div className="chat-window" ref={chatWindowRef}>
      <div className="message-list">
        {messages.length > 0 ? (
          messages.map((message) => (
            <ChatMessage
              key={message.id}
              message={message}
              loggedInUser={loggedInUser}
              messageId={message.id}
              isHighlighted={message.id === selectedMessage?.id}
            />
          ))
        ) : (
          <div className="empty-chat-placeholder">No messages yet</div>
        )}
      </div>
    </div>
  );
};

export default ChatWindow;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/ConversationList.js`:

```````js
import React, { useState, useEffect } from 'react';
import './conversationList.css';
import { db, collection, getDocs, query, where } from '../../firebase/firebase';
import ConversationItem from './ConversationItem';
import SearchResultItem from './SearchResultItem';

const ConversationList = ({ conversations, searchResults, onSelectConversation, selectedConversation, loggedInUser }) => {
  const [participantNames, setParticipantNames] = useState({});

  useEffect(() => {
    const fetchParticipantNames = async () => {
      if (conversations.length === 0) return;

      const participantIds = conversations.reduce((ids, conversation) => [...ids, ...conversation.participants], []);
      const uniqueParticipantIds = [...new Set(participantIds)];

      const usersRef = collection(db, 'users');
      const userDocs = await Promise.all(
        uniqueParticipantIds.map((userId) => getDocs(query(usersRef, where('userId', '==', userId))))
      );

      const names = {};
      userDocs.forEach((querySnapshot) => {
        querySnapshot.forEach((doc) => {
          names[doc.data().userId] = doc.data().name;
        });
      });

      setParticipantNames(names);
      console.log('Fetched participant names:', names);
    };

    fetchParticipantNames();
  }, [conversations]);

  const getParticipantNames = (conversation) => {
    const names = conversation.participants
      .map((participantId) => participantNames[participantId])
      .filter((name) => name !== loggedInUser.name);
    return names.join(', ');
  };

  return (
    <div className="conversation-list-container">
      <div className="conversation-list-wrapper">
        <ul className="conversation-list">
          {searchResults.length > 0 ? (
            searchResults.map((result) => (
              <SearchResultItem
                key={result.id}
                result={result}
                onSelectConversation={onSelectConversation}
                loggedInUser={loggedInUser}
              />
            ))
          ) : (
            conversations.map((conversation) => (
              <ConversationItem
                key={conversation.id}
                conversation={conversation}
                onSelectConversation={() => onSelectConversation(conversation)}
                isSelected={selectedConversation?.id === conversation.id}
                getParticipantNames={getParticipantNames}
                loggedInUser={loggedInUser}
              />
            ))
          )}
        </ul>
      </div>
    </div>
  );
};

export default ConversationList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/userSearch.css`:

```````css
.user-search-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.user-search-modal {
  background-color: #fff;
  padding: 2rem;
  border-radius: 12px;
  width: 400px;
  max-width: 90%;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.user-search-modal h2 {
  margin-top: 0;
  margin-bottom: 1rem;
  font-size: 1.5rem;
  color: #333;
}

.user-search-modal form {
  display: flex;
  margin-bottom: 1rem;
}

.user-search-modal input {
  flex: 1;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  outline: none;
}

.user-search-modal button {
  padding: 0.75rem 1.25rem;
  font-size: 1rem;
  background-color: #4a90e2;
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-left: 0.5rem;
}

.user-search-modal button:hover {
  background-color: #3a7bc8;
}

.user-search-results {
  list-style: none;
  padding: 0;
  margin: 0;
  max-height: 300px;
  overflow-y: auto;
}

.user-search-results li {
  display: flex;
  align-items: center;
  padding: 0.75rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  border-radius: 6px;
}

.user-search-results li:hover {
  background-color: #f5f5f5;
}

.user-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 1rem;
  overflow: hidden;
}

.user-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.default-avatar {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #4a90e2;
  color: #fff;
  font-size: 1.2rem;
  font-weight: 500;
}

.user-info {
  display: flex;
  flex-direction: column;
}

.user-name {
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.user-email {
  font-size: 0.9rem;
  color: #666;
}

.close-button {
  margin-top: 1rem;
  padding: 0.75rem 1.25rem;
  font-size: 1rem;
  background-color: #f0f0f0;
  color: #333;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.close-button:hover {
  background-color: #e0e0e0;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/conversationService.js`:

```````js
import { db, collection, getDocs, query, where, orderBy } from '../../firebase';

const fetchConversations = async (userId) => {
  const conversationsRef = collection(db, 'conversations');
  const q = query(
    conversationsRef,
    where('participants', 'array-contains', userId),
    orderBy('lastMessageTimestamp', 'desc')
  );
  const snapshot = await getDocs(q);
  const conversations = snapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  }));
  return conversations;
};
export { fetchConversations };
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/conversationList.css`:

```````css
.conversation-list-container {
  flex: 1;
  overflow-y: auto;
}

.conversation-list-wrapper {
  padding: 1rem;
}

.conversation-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.conversation-item {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.conversation-item:hover {
  background-color: var(--hover-color);
}

.conversation-item.active {
  background-color: var(--hover-color);
}

.conversation-avatar {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  margin-right: 1rem;
  object-fit: cover;
}

.conversation-details {
  flex: 1;
  min-width: 0;
}

.conversation-name {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 0.25rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.conversation-last-message {
  font-size: 0.9rem;
  color: var(--light-text);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.unread-count {
  background-color: var(--accent-color);
  color: #fff;
  font-size: 0.8rem;
  font-weight: 600;
  padding: 0.25rem 0.5rem;
  border-radius: 12px;
  margin-left: 0.5rem;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/SearchResultItem.js`:

```````js
import React from 'react';
import { formatRelativeTime } from './utils';
import './searchResultItem.css';

const SearchResultItem = ({ result, onSelectConversation, loggedInUser }) => {
  const handleClick = () => {
    onSelectConversation(result, result.matchingMessages[0]);
  };

  const previewText = result.matchingMessages[0].content;
  const highlightIndex = result.matchingMessages[0].highlighted;
  const searchTerm = previewText.substring(highlightIndex, highlightIndex + result.matchingMessages[0].content.length - highlightIndex);

  return (
    <li className="search-result-item" onClick={handleClick}>
      <div className="result-preview">
        {previewText.substring(0, highlightIndex)}
        <span className="highlight">
          {searchTerm}
        </span>
        {previewText.substring(highlightIndex + searchTerm.length)}
      </div>
      <div className="result-metadata">
        <span className="result-timestamp">
          {formatRelativeTime(result.matchingMessages[0].timestamp)}
        </span>
      </div>
    </li>
  );
};

export default SearchResultItem;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/userChatService.js`:

```````js
import { db, collection, getDocs, query, where } from '../../firebase/firebase';

const searchUsers = async (searchTerm) => {
  const usersRef = collection(db, 'users');
  const nameQuery = query(
    usersRef,
    where('name', '>=', searchTerm),
    where('name', '<=', searchTerm + '\uf8ff')
  );
  const emailQuery = query(
    usersRef,
    where('email', '>=', searchTerm),
    where('email', '<=', searchTerm + '\uf8ff')
  );
  const handleQuery = query(
    usersRef,
    where('handle', '>=', searchTerm),
    where('handle', '<=', searchTerm + '\uf8ff')
  );

  const [nameSnapshot, emailSnapshot, handleSnapshot] = await Promise.all([
    getDocs(nameQuery),
    getDocs(emailQuery),
    getDocs(handleQuery),
  ]);

  const users = new Set();

  nameSnapshot.forEach((doc) => users.add({ id: doc.id, ...doc.data() }));
  emailSnapshot.forEach((doc) => users.add({ id: doc.id, ...doc.data() }));
  handleSnapshot.forEach((doc) => users.add({ id: doc.id, ...doc.data() }));

  console.log('Search results:', Array.from(users));
  return Array.from(users);
};

export { searchUsers };
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/chat.css`:

```````css
:root {
  --primary-color: #4a90e2;
  --secondary-color: #f0f4f8;
  --accent-color: #ff6b6b;
  --text-color: #333;
  --light-text: #777;
  --border-color: #e1e4e8;
  --hover-color: #e8f1fd;
  --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.chat-app {
  display: flex;
  height: calc(100vh - 60px); /* Adjust based on your navbar height */
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  color: var(--text-color);
  background-color: var(--secondary-color);
}

.sidebar {
  width: 300px;
  background-color: #fff;
  border-right: 1px solid var(--border-color);
  display: flex;
  flex-direction: column;
  transition: width 0.3s ease;
}

.chat-area {
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: #fff;
}

.header {
  padding: 20px;
  border-bottom: 1px solid var(--border-color);
}

.new-chat-button {
  width: 100%;
  padding: 12px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  font-weight: 600;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.new-chat-button:hover {
  background-color: #3a7bc8;
  transform: translateY(-2px);
}

.no-chat-selected {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  font-size: 18px;
  color: var(--light-text);
  background-color: #fafafa;
}

@media (max-width: 768px) {
  .chat-app {
    flex-direction: column;
  }

  .sidebar {
    width: 100%;
    height: 50vh;
  }
}


/* ... existing styles ... */

.search-result-item {
  border-bottom: 1px solid var(--border-color);
}

.search-result-item:last-child {
  border-bottom: none;
}

.highlight {
  background-color: rgba(255, 255, 0, 0.5);
  padding: 2px 0;
}

.no-results {
  padding: 20px;
  text-align: center;
  color: var(--light-text);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/chatInput.css`:

```````css
.chat-input-container {
  display: flex;
  align-items: center;
  padding: 1rem;
  background-color: #fff;
  border-top: 1px solid var(--border-color);
}

.chat-input {
  flex: 1;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border: 1px solid var(--border-color);
  border-radius: 20px;
  outline: none;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.chat-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);
}

.chat-send-button {
  margin-left: 0.75rem;
  padding: 0.75rem 1.25rem;
  font-size: 1rem;
  background-color: var(--primary-color);
  color: #fff;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.chat-send-button:hover {
  background-color: #3a7bc8;
  transform: translateY(-2px);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/conversationItem.css`:

```````css
.conversation-item {
    display: flex;
    align-items: center;
    padding: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .conversation-item:hover {
    background-color: #f5f5f5;
  }
  
  .conversation-item.active {
    background-color: #e6f2ff;
  }
  
  .conversation-avatar {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .conversation-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .default-avatar {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background-color: #764ba2;
    color: #fff;
    font-size: 1.2rem;
    font-weight: 500;
  }
  
  .conversation-details {
    flex: 1;
    min-width: 0;
  }
  
  .conversation-name {
    font-size: 1.1rem;
    font-weight: 500;
    margin-bottom: 0.25rem;
    color: #333;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .conversation-last-message {
    display: flex;
    align-items: center;
    font-size: 0.9rem;
    color: #777;
  }
  
  .last-message-text {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-right: 0.5rem;
  }
  
  .last-message-timestamp {
    font-size: 0.8rem;
    color: #888;
    white-space: nowrap;
  }
  
  .unread-count {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 20px;
    height: 20px;
    margin-left: 0.5rem;
    background-color: #764ba2;
    color: #fff;
    font-size: 0.8rem;
    font-weight: 500;
    border-radius: 50%;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* ... existing styles ... */

.search-preview {
  font-style: italic;
  color: var(--accent-color);
}

.conversation-item.active .search-preview {
  color: white;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/ConversationItem.js`:

```````js
import React, { useState, useEffect } from 'react';
import { formatRelativeTime } from './utils';
import './conversationItem.css';
import { db, doc, getDoc } from '../../firebase/firebase';

const ConversationItem = ({ conversation, onSelectConversation, isSelected, loggedInUser, isSearchResult }) => {
  const [participantName, setParticipantName] = useState('');

  useEffect(() => {
    const fetchParticipantName = async () => {
      const otherParticipant = conversation.participants.find((participantId) => participantId !== loggedInUser.uid);

      if (otherParticipant) {
        const userDoc = await getDoc(doc(db, 'users', otherParticipant));

        if (userDoc.exists()) {
          const userData = userDoc.data();
          setParticipantName(userData.name);
        }
      } else {
        setParticipantName(loggedInUser.displayName);
      }
    };

    fetchParticipantName();
  }, [conversation.participants, loggedInUser.uid]);

  const handleClick = () => onSelectConversation(conversation, isSearchResult ? conversation.matchingMessages[0] : null);

  const { avatarUrl, lastMessage, unreadCount, lastMessageTimestamp } = conversation;

  return (
    <li className={`conversation-item ${isSelected ? 'active' : ''}`} onClick={handleClick}>
      <div className="conversation-avatar">
        {avatarUrl ? (
          <img src={avatarUrl} alt="Participant Avatar" />
        ) : (
          <div className="default-avatar">{participantName?.charAt(0).toUpperCase()}</div>
        )}
      </div>
      <div className="conversation-details">
        <div className="conversation-name">{participantName}</div>
        <div className="conversation-last-message">
          {isSearchResult ? (
            <span className="search-preview">{conversation.matchingMessages[0].content}</span>
          ) : (
            <span className="last-message-text">{lastMessage}</span>
          )}
          <span className="last-message-timestamp">{formatRelativeTime(lastMessageTimestamp)}</span>
        </div>
      </div>
      {unreadCount > 0 && <div className="unread-count">{unreadCount}</div>}
    </li>
  );
};

export default ConversationItem;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/messageService.js`:

```````js
import { db, collection, getDocs, query, where, addDoc, orderBy, doc, updateDoc, arrayUnion } from '../../firebase/firebase';


// Fetch messages for a conversation
const fetchMessages = async (conversationId) => {
  const messagesRef = collection(db, 'messages');
  const q = query(messagesRef, where('conversationId', '==', conversationId), orderBy('timestamp', 'asc'));
  const querySnapshot = await getDocs(q);
  const fetchedMessages = [];
  querySnapshot.forEach((doc) => {
    fetchedMessages.push({ id: doc.id, ...doc.data() });
  });
  return fetchedMessages;
};

// Send a new message
const sendMessage = async (message, conversationId, senderId, timestamp) => {
  try {
    const messagesRef = collection(db, 'messages');
    const newMessage = {
      conversationId,
      senderId,
      content: message,
      timestamp: timestamp,
    };
    const docRef = await addDoc(messagesRef, newMessage);
    const messageId = docRef.id;

    const conversationRef = doc(db, 'conversations', conversationId);
    await updateDoc(conversationRef, {
      messageIds: arrayUnion(messageId),
      lastMessage: message,
      lastMessageTimestamp: timestamp,
    });

    console.log('Message sent!');
  } catch (error) {
    console.error('Error sending message:', error);
    throw error;
  }
};

const fetchConversationsForUser = async (userId) => {
  const conversationsRef = collection(db, 'conversations');
  const q = query(conversationsRef, where('participants', 'array-contains', userId));
  const querySnapshot = await getDocs(q);
  const fetchedConversations = [];
  querySnapshot.forEach((doc) => {
    fetchedConversations.push({ id: doc.id, ...doc.data() });
  });
  return fetchedConversations;
};

const createNewConversation = async (userId1, userId2) => {
  try {
    const conversationsRef = collection(db, 'conversations');
    const newConversation = {
      participants: [userId1, userId2],
      lastMessage: '',
      lastMessageTimestamp: null,
    };
    const docRef = await addDoc(conversationsRef, newConversation);
    return { id: docRef.id, ...newConversation };
  } catch (error) {
    console.error('Error creating new conversation:', error);
    throw error;
  }
};

export { fetchMessages, sendMessage, fetchConversationsForUser, createNewConversation };
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/searchResultItem.css`:

```````css
.search-result-item {
    padding: 10px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .search-result-item:hover {
    background-color: var(--hover-color);
  }
  
  .result-preview {
    font-size: 14px;
    margin-bottom: 5px;
  }
  
  .highlight {
    background-color: yellow;
    font-weight: bold;
  }
  
  .result-metadata {
    font-size: 12px;
    color: var(--light-text);
  }
  
  .result-timestamp {
    font-style: italic;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/utils.js`:

```````js
export const formatRelativeTime = (timestamp) => {
  if (!timestamp) {
    return ''; // Return an empty string if timestamp is null or undefined
  }

  const date = timestamp.toDate(); // Convert Timestamp to Date
  const now = new Date();
  const diff = now - date;

  const minute = 60 * 1000;
  const hour = 60 * minute;
  const day = 24 * hour;

  if (diff < minute) {
    return 'Just now';
  } else if (diff < hour) {
    const minutes = Math.floor(diff / minute);
    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
  } else if (diff < day) {
    const hours = Math.floor(diff / hour);
    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  } else {
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return date.toLocaleDateString(undefined, options);
  }
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/Chat.js`:

```````js
import React, { useState, useEffect } from 'react';
import ChatWindow from './ChatWindow';
import ConversationList from './ConversationList';
import ChatInput from './ChatInput';
import UserSearch from './UserSearch';
import ConversationSearch from './ConversationSearch';
import { sendMessage, createNewConversation, fetchConversationsForUser } from './messageService';
import { db, collection, onSnapshot, query, where, orderBy } from '../../firebase/firebase';
import './chat.css';
import { useUserContext } from '../User/UserContext';
import Navbar from '../Routes/Navbar';

const Chat = () => {
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [conversations, setConversations] = useState([]);
  const [isUserSearchOpen, setIsUserSearchOpen] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [selectedMessage, setSelectedMessage] = useState(null);
  const { user } = useUserContext();

  useEffect(() => {
    const fetchUserConversations = async () => {
      if (user) {
        const conversationsRef = collection(db, 'conversations');
        const q = query(
          conversationsRef,
          where('participants', 'array-contains', user.uid),
          orderBy('lastMessageTimestamp', 'desc')
        );
        const unsubscribe = onSnapshot(q, (snapshot) => {
          const updatedConversations = snapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          }));
          setConversations(updatedConversations);
          console.log('Fetched user conversations:', updatedConversations);
        });
  
        return () => {
          unsubscribe();
        };
      }
    };
  
    fetchUserConversations();
  }, [user]);

  const handleSearchResults = (results) => {
    setSearchResults(results);
    console.log('Search results:', results);
  };

  const handleNewChat = () => {
    setIsUserSearchOpen(true);
  };

  const handleCloseUserSearch = () => {
    setIsUserSearchOpen(false);
  };

  const handleStartChat = async (selectedUser) => {
    try {
      const existingConversation = conversations.find(conv => 
        conv.participants.includes(selectedUser.id) && conv.participants.includes(user.uid)
      );

      if (existingConversation) {
        setSelectedConversation(existingConversation);
      } else {
        const newConversation = await createNewConversation(user.uid, selectedUser.id);
        setSelectedConversation(newConversation);
      }
      handleCloseUserSearch();
      console.log('Started chat with:', selectedUser.name);
    } catch (error) {
      console.error('Error creating new conversation:', error);
    }
  };

  const handleSelectConversation = (conversation, message = null) => {
    setSelectedConversation(conversation);
    setSelectedMessage(message);
    console.log('Selected conversation:', conversation);
    if (message) {
      console.log('Selected message:', message);
    }
  };

  const handleSendMessage = (message) => {
    if (selectedConversation) {
      const currentTimestamp = new Date();
      sendMessage(message, selectedConversation.id, user.uid, currentTimestamp)
        .then(() => {
          console.log('Message sent:', message);
        })
        .catch((error) => {
          console.error('Error sending message:', error);
        });
    }
  };

  return (
    
      
      <div className="chat-app">
        <div className="sidebar">
          <div className="header">
            <button className="new-chat-button" onClick={handleNewChat}>
              New Chat
            </button>
          </div>
          <ConversationSearch
            conversations={conversations}
            onSearchResults={handleSearchResults}
          />
          <ConversationList
            conversations={conversations}
            searchResults={searchResults}
            onSelectConversation={handleSelectConversation}
            selectedConversation={selectedConversation}
            loggedInUser={user}
          />
        </div>
        <div className="chat-area">
          {selectedConversation ? (
            <>
              <ChatWindow 
                selectedConversation={selectedConversation} 
                loggedInUser={user} 
                selectedMessage={selectedMessage}
              />
              <ChatInput onSendMessage={handleSendMessage} />
            </>
          ) : (
            <div className="no-chat-selected">Select a conversation or start a new chat</div>
          )}
        </div>
        {isUserSearchOpen && (
          <UserSearch onClose={handleCloseUserSearch} onStartChat={handleStartChat} />
        )}
      </div>
    
  );
};

export default Chat;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/ProfileIcon.js`:

```````js
import React from 'react';
// import "./ProfileIcon.css"

const ProfileIcon = ({ name }) => {
  // Logic to determine initials (e.g., first letter of first and last name)
  const initials = name
    .split(' ')
    .map(word => word.charAt(0).toUpperCase())
    .join('');

  return (
    <div className="profile-icon">
      {initials} 
    </div>
  );
};

export default ProfileIcon;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/ChatMessage.js`:

```````js
import React from 'react';
import { formatRelativeTime } from './utils';
import './chatMessage.css';
const ChatMessage = ({ message, loggedInUser, messageId, isHighlighted }) => {
  const { content, senderId, timestamp } = message;
  const isSentByLoggedInUser = senderId === loggedInUser.uid;

  return (
    <div
      className={`message ${isSentByLoggedInUser ? 'sent' : 'received'} ${isHighlighted ? 'highlighted' : ''}`}
      id={messageId}
    >
      <div className="message-content">{content}</div>
      <div className="message-timestamp">
        {timestamp ? formatRelativeTime(timestamp) : ''}
      </div>
    </div>
  );
};

export default ChatMessage;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/ConversationSearch.js`:

```````js
import React, { useState } from 'react';
import { db, collection, getDocs, query, where, orderBy } from '../../firebase/firebase';
import './conversationSearch.css';

const ConversationSearch = ({ conversations, onSearchResults }) => {
  const [searchTerm, setSearchTerm] = useState('');

  const handleSearch = async (e) => {
    const term = e.target.value.toLowerCase();
    setSearchTerm(term);

    if (term.trim() === '') {
      onSearchResults([]);
      return;
    }

    try {
      const messagesRef = collection(db, 'messages');
      const q = query(
        messagesRef,
        where('content', '>=', term),
        where('content', '<=', term + '\uf8ff'),
        orderBy('content'),
        orderBy('timestamp', 'desc')
      );
      const querySnapshot = await getDocs(q);
      
      const matchingMessages = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        highlighted: doc.data().content.toLowerCase().indexOf(term)
      }));

      console.log('Matching messages:', matchingMessages);

      const groupedResults = groupMessagesByConversation(matchingMessages, conversations);
      onSearchResults(groupedResults);
    } catch (error) {
      console.error('Error searching messages:', error);
    }
  };

  const groupMessagesByConversation = (messages, allConversations) => {
    const groupedMessages = {};
    messages.forEach(message => {
      if (!groupedMessages[message.conversationId]) {
        groupedMessages[message.conversationId] = [];
      }
      groupedMessages[message.conversationId].push(message);
    });

    return Object.keys(groupedMessages).map(conversationId => {
      const conversation = allConversations.find(c => c.id === conversationId);
      return {
        ...conversation,
        matchingMessages: groupedMessages[conversationId]
      };
    });
  };

  return (
    <div className="conversation-search">
      <input
        type="text"
        placeholder="Search conversations..."
        value={searchTerm}
        onChange={handleSearch}
        className="conversation-search-input"
      />
    </div>
  );
};

export default ConversationSearch;
```````

`/Users/charlesdeng/code/rintzai/src/components/Chat/ChatInput.js`:

```````js
// ChatInput.js
import React, { useState } from 'react';
import './chatInput.css';

const ChatInput = ({ onSendMessage }) => {
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim() !== '') {
      onSendMessage(message);
      setMessage('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="chat-input-container">
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder="Type your message..."
        className="chat-input"
      />
      <button type="submit" className="chat-send-button">
        Send
      </button>
    </form>
  );
};

export default ChatInput;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalVisualization.js`:

```````js
import React from 'react';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
import './GoalVisualization.css';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const GoalVisualization = ({ goals, moodData }) => {
  const data = {
    labels: goals.map(goal => goal.title),
    datasets: [
      {
        label: 'Goal Progress',
        data: goals.map(goal => goal.progress),
        fill: false,
        backgroundColor: 'rgb(75, 192, 192)',
        borderColor: 'rgba(75, 192, 192, 0.2)',
        yAxisID: 'y',
      },
      {
        label: 'Average Mood',
        data: goals.map(goal => {
          const relevantMoodData = moodData.filter(mood => {
            const moodDate = new Date(mood.date);
            const goalStartDate = new Date(goal.createdAt);
            const goalEndDate = new Date(goal.deadline);
            return moodDate >= goalStartDate && moodDate <= goalEndDate;
          });
          if (relevantMoodData.length === 0) return null;
          const sum = relevantMoodData.reduce((acc, mood) => acc + mood.score, 0);
          return sum / relevantMoodData.length;
        }),
        fill: false,
        backgroundColor: 'rgb(255, 99, 132)',
        borderColor: 'rgba(255, 99, 132, 0.2)',
        yAxisID: 'y1',
      },
    ],
  };

  const options = {
    scales: {
      y: {
        type: 'linear',
        display: true,
        position: 'left',
        title: {
          display: true,
          text: 'Goal Progress (%)',
        },
        beginAtZero: true,
        max: 100,
      },
      y1: {
        type: 'linear',
        display: true,
        position: 'right',
        title: {
          display: true,
          text: 'Average Mood (1-10)',
        },
        beginAtZero: true,
        max: 10,
        grid: {
          drawOnChartArea: false,
        },
      },
    },
  };

  return (
    <div className="goal-visualization">
      <h3>Goal Progress and Mood Visualization</h3>
      <Line data={data} options={options} />
    </div>
  );
};

export default GoalVisualization;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalReminders.css`:

```````css
.goal-reminders {
    background-color: #f8f8f8;
    border-radius: 8px;
    padding: 15px;
    margin-top: 20px;
  }
  
  .goal-reminders h3 {
    color: #333;
    margin-bottom: 10px;
  }
  
  .goal-reminders ul {
    list-style-type: none;
    padding: 0;
  }
  
  .goal-reminders li {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .reminder-title {
    font-weight: bold;
    color: #333;
  }
  
  .reminder-deadline {
    color: #666;
    font-size: 0.9em;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/MoodJournalIntegration.js`:

```````js
import React from 'react';
import './MoodJournalIntegration.css';

const MoodJournalIntegration = ({ goals, moodData, journalEntries, onUpdateGoal }) => {
  const getRelevantMoodData = (goal) => {
    return moodData.filter(mood => {
      const moodDate = new Date(mood.date);
      const goalStartDate = new Date(goal.createdAt);
      const goalEndDate = new Date(goal.deadline);
      return moodDate >= goalStartDate && moodDate <= goalEndDate;
    });
  };

  const getRelevantJournalEntries = (goal) => {
    return journalEntries.filter(entry => {
      const entryDate = new Date(entry.date);
      const goalStartDate = new Date(goal.createdAt);
      const goalEndDate = new Date(goal.deadline);
      return entryDate >= goalStartDate && entryDate <= goalEndDate;
    });
  };

  const calculateAverageMood = (moodData) => {
    if (moodData.length === 0) return 'N/A';
    const sum = moodData.reduce((acc, mood) => acc + mood.score, 0);
    return (sum / moodData.length).toFixed(2);
  };

  const handleInsightSubmit = (goalId, insight) => {
    onUpdateGoal(goalId, { insight });
  };

  return (
    <div className="mood-journal-integration">
      <h2>Mood and Journal Insights</h2>
      {goals.map(goal => {
        const relevantMoodData = getRelevantMoodData(goal);
        const relevantJournalEntries = getRelevantJournalEntries(goal);
        const averageMood = calculateAverageMood(relevantMoodData);

        return (
          <div key={goal.id} className="goal-insight">
            <h3>{goal.title}</h3>
            <p>Average Mood: {averageMood}</p>
            <p>Journal Entries: {relevantJournalEntries.length}</p>
            <div className="journal-snippets">
              {relevantJournalEntries.slice(0, 3).map(entry => (
                <p key={entry.id}>{entry.content.substring(0, 100)}...</p>
              ))}
            </div>
            <textarea
              placeholder="Record your insights based on mood and journal data..."
              value={goal.insight || ''}
              onChange={(e) => handleInsightSubmit(goal.id, e.target.value)}
            />
          </div>
        );
      })}
    </div>
  );
};

export default MoodJournalIntegration;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/Goals.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import GoalList from './GoalList';
import GoalForm from './GoalForm';
import GoalCategories from './GoalCategories';
import GoalReminders from './GoalReminders';
import GoalShare from './GoalShare';
import GoalVisualization from './GoalVisualization';
import MoodJournalIntegration from './MoodJournalIntegration';
import { db, collection, query, where, getDocs, addDoc, updateDoc, deleteDoc, doc } from '../../firebase/firebase';
import './Goals.css';
import Navbar from '../Routes/Navbar';

const Goals = () => {
  const { user } = useUserContext();
  const [goals, setGoals] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [showShareModal, setShowShareModal] = useState(false);
  const [selectedGoal, setSelectedGoal] = useState(null);
  const [moodData, setMoodData] = useState([]);
  const [journalEntries, setJournalEntries] = useState([]);

  useEffect(() => {
    fetchGoals();
    fetchMoodData();
    fetchJournalEntries();
  }, [user]);

  const fetchGoals = async () => {
    if (user) {
      const goalsRef = collection(db, 'goals');
      const q = query(goalsRef, where('userId', '==', user.uid));
      const querySnapshot = await getDocs(q);
      const fetchedGoals = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setGoals(fetchedGoals);
    }
  };

  const fetchMoodData = async () => {
    if (user) {
      const moodRef = collection(db, 'moodEntries');
      const q = query(moodRef, where('userId', '==', user.uid));
      const querySnapshot = await getDocs(q);
      const fetchedMoodData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setMoodData(fetchedMoodData);
    }
  };

  const fetchJournalEntries = async () => {
    if (user) {
      const journalRef = collection(db, 'journalEntries');
      const q = query(journalRef, where('userId', '==', user.uid));
      const querySnapshot = await getDocs(q);
      const fetchedJournalEntries = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setJournalEntries(fetchedJournalEntries);
    }
  };

  const addGoal = async (newGoal) => {
    const goalWithUser = { ...newGoal, userId: user.uid };
    const docRef = await addDoc(collection(db, 'goals'), goalWithUser);
    setGoals([...goals, { id: docRef.id, ...goalWithUser }]);
  };

  const updateGoal = async (id, updatedGoal) => {
    await updateDoc(doc(db, 'goals', id), updatedGoal);
    setGoals(goals.map(goal => goal.id === id ? { ...goal, ...updatedGoal } : goal));
  };

  const deleteGoal = async (id) => {
    await deleteDoc(doc(db, 'goals', id));
    setGoals(goals.filter(goal => goal.id !== id));
  };

  const filteredGoals = selectedCategory === 'All' 
    ? goals 
    : goals.filter(goal => goal.category === selectedCategory);

  const handleShareGoal = (goal) => {
    setSelectedGoal(goal);
    setShowShareModal(true);
  };

  return (
    
    <div className="goals-container">
      <h1>Goal Planner</h1>
      <GoalCategories 
        selectedCategory={selectedCategory} 
        onSelectCategory={setSelectedCategory} 
      />
      <GoalForm onAddGoal={addGoal} />
      <GoalList 
        goals={filteredGoals} 
        onUpdateGoal={updateGoal} 
        onDeleteGoal={deleteGoal}
        onShareGoal={handleShareGoal}
      />
      <GoalReminders goals={goals} />
      <GoalVisualization goals={goals} moodData={moodData} />
      <MoodJournalIntegration 
        goals={goals}
        moodData={moodData}
        journalEntries={journalEntries}
        onUpdateGoal={updateGoal}
      />
      {showShareModal && (
        <GoalShare 
          goal={selectedGoal} 
          onClose={() => setShowShareModal(false)} 
        />
      )}
    </div>
    

  );
};

export default Goals;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalReflection.css`:

```````css
.goal-reflection {
    margin-top: 15px;
  }
  
  .goal-reflection h4 {
    margin-bottom: 10px;
    color: #333;
  }
  
  .goal-reflection textarea {
    width: 100%;
    height: 100px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: vertical;
  }
  
  .goal-reflection button {
    margin-top: 10px;
    padding: 8px 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .goal-reflection button:hover {
    background-color: #45a049;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalList.css`:

```````css
.goal-list {
    margin-top: 20px;
  }
  
  .goal-list h2 {
    color: #333;
    margin-bottom: 15px;
    font-size: 1.8em;
  }
  
  .goal-list p {
    text-align: center;
    color: #666;
    font-style: italic;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalProgress.css`:

```````css
.goal-progress {
    margin-top: 15px;
  }
  
  .goal-progress label {
    display: block;
    margin-bottom: 5px;
    color: #333;
    font-weight: bold;
  }
  
  .goal-progress input[type="range"] {
    width: 100%;
    -webkit-appearance: none;
    height: 10px;
    border-radius: 5px;
    background: #ddd;
    outline: none;
    opacity: 0.7;
    transition: opacity 0.2s;
  }
  
  .goal-progress input[type="range"]:hover {
    opacity: 1;
  }
  
  .goal-progress input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #4CAF50;
    cursor: pointer;
    transition: background 0.3s ease;
  }
  
  .goal-progress input[type="range"]::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #4CAF50;
    cursor: pointer;
    transition: background 0.3s ease;
  }
  
  .goal-progress input[type="range"]::-webkit-slider-thumb:hover {
    background: #45a049;
  }
  
  .goal-progress input[type="range"]::-moz-range-thumb:hover {
    background: #45a049;
  }
  
  .goal-progress .progress-value {
    font-size: 1.2em;
    font-weight: bold;
    color: #4CAF50;
    margin-top: 5px;
  }
  
  .goal-progress .progress-bar {
    height: 20px;
    background-color: #e0e0e0;
    border-radius: 10px;
    overflow: hidden;
    margin-top: 10px;
  }
  
  .goal-progress .progress-bar-fill {
    height: 100%;
    background-color: #4CAF50;
    transition: width 0.5s ease-in-out;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalMilestones.css`:

```````css
.goal-milestones {
    margin-top: 15px;
  }
  
  .goal-milestones h4 {
    margin-bottom: 10px;
    color: #333;
  }
  
  .goal-milestones ul {
    list-style-type: none;
    padding: 0;
  }
  
  .goal-milestones li {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .goal-milestones li.completed span {
    text-decoration: line-through;
    color: #888;
  }
  
  .goal-milestones input[type="checkbox"] {
    margin-right: 10px;
  }
  
  .add-milestone {
    display: flex;
    margin-top: 10px;
  }
  
  .add-milestone input {
    flex-grow: 1;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .add-milestone button {
    margin-left: 10px;
    padding: 5px 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalReminders.js`:

```````js
import React, { useState, useEffect } from 'react';
import './GoalReminders.css';

const GoalReminders = ({ goals }) => {
  const [reminders, setReminders] = useState([]);

  useEffect(() => {
    const currentDate = new Date();
    const upcomingGoals = goals.filter(goal => {
      const deadline = new Date(goal.deadline);
      const daysUntilDeadline = Math.ceil((deadline - currentDate) / (1000 * 60 * 60 * 24));
      return daysUntilDeadline <= 7 && daysUntilDeadline > 0;
    });

    setReminders(upcomingGoals);

    // Set up notifications
    upcomingGoals.forEach(goal => {
      if (Notification.permission === "granted") {
        new Notification(`Goal Reminder: ${goal.title}`, {
          body: `Your goal "${goal.title}" is due in ${Math.ceil((new Date(goal.deadline) - currentDate) / (1000 * 60 * 60 * 24))} days.`
        });
      }
    });
  }, [goals]);

  return (
    <div className="goal-reminders">
      <h3>Upcoming Deadlines</h3>
      {reminders.length > 0 ? (
        <ul>
          {reminders.map(goal => (
            <li key={goal.id}>
              <span className="reminder-title">{goal.title}</span>
              <span className="reminder-deadline">Due: {goal.deadline}</span>
            </li>
          ))}
        </ul>
      ) : (
        <p>No upcoming deadlines in the next 7 days.</p>
      )}
    </div>
  );
};

export default GoalReminders;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalProgress.js`:

```````js
import React from 'react';
import './GoalProgress.css';

const GoalProgress = ({ goal, onUpdateGoal }) => {
  const handleProgressChange = (e) => {
    const progress = parseInt(e.target.value);
    onUpdateGoal(goal.id, { ...goal, progress });
  };

  return (
    <div className="goal-progress">
      <label htmlFor={`progress-${goal.id}`}>Progress: {goal.progress}%</label>
      <input
        id={`progress-${goal.id}`}
        type="range"
        min="0"
        max="100"
        value={goal.progress}
        onChange={handleProgressChange}
      />
    </div>
  );
};

export default GoalProgress;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalList.js`:

```````js
import React from 'react';
import GoalItem from './GoalItem';
import './GoalList.css';

const GoalList = ({ goals, onUpdateGoal, onDeleteGoal, onShareGoal }) => {
  return (
    <div className="goal-list">
      <h2>Your Goals</h2>
      {goals.length === 0 ? (
        <p>No goals yet. Start by adding a new goal!</p>
      ) : (
        goals.map(goal => (
          <GoalItem 
            key={goal.id} 
            goal={goal} 
            onUpdateGoal={onUpdateGoal} 
            onDeleteGoal={onDeleteGoal}
            onShareGoal={onShareGoal}
          />
        ))
      )}
    </div>
  );
};

export default GoalList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalShare.css`:

```````css
.goal-share-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .goal-share-content {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    width: 300px;
  }
  
  .goal-share-content h2 {
    margin-top: 0;
  }
  
  .goal-share-content input {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .goal-share-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }
  
  .goal-share-actions button {
    padding: 8px 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .goal-share-actions button:last-child {
    background-color: #f44336;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/MoodJournalIntegration.css`:

```````css
.mood-journal-integration {
    background-color: #f8f8f8;
    border-radius: 8px;
    padding: 20px;
    margin-top: 30px;
  }
  
  .mood-journal-integration h2 {
    color: #333;
    margin-bottom: 20px;
  }
  
  .goal-insight {
    background-color: #fff;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .goal-insight h3 {
    color: #4CAF50;
    margin-bottom: 10px;
  }
  
  .journal-snippets {
    margin-top: 10px;
    margin-bottom: 10px;
  }
  
  .journal-snippets p {
    font-style: italic;
    color: #666;
    margin-bottom: 5px;
  }
  
  .goal-insight textarea {
    width: 100%;
    height: 100px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: vertical;
    margin-top: 10px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/Goals.css`:

```````css
.goals-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5f5f5;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  
  .goals-container h1 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
    font-size: 2.5em;
  }
  
  @media (max-width: 768px) {
    .goals-container {
      padding: 10px;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalItem.js`:

```````js
import React, { useState } from 'react';
import GoalProgress from './GoalProgress';
import GoalReflection from './GoalReflection';
import GoalMilestones from './GoalMilestones';
import './GoalItem.css';

const GoalItem = ({ goal, onUpdateGoal, onDeleteGoal, onShareGoal }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedGoal, setEditedGoal] = useState(goal);

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = () => {
    onUpdateGoal(goal.id, editedGoal);
    setIsEditing(false);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedGoal({ ...editedGoal, [name]: value });
  };

  return (
    <div className="goal-item">
      {isEditing ? (
        <div className="goal-edit-form">
          <input
            type="text"
            name="title"
            value={editedGoal.title}
            onChange={handleChange}
          />
          <textarea
            name="description"
            value={editedGoal.description}
            onChange={handleChange}
          />
          <input
            type="date"
            name="deadline"
            value={editedGoal.deadline}
            onChange={handleChange}
          />
          <select
            name="category"
            value={editedGoal.category}
            onChange={handleChange}
          >
            <option value="Personal">Personal</option>
            <option value="Professional">Professional</option>
            <option value="Health">Health</option>
            <option value="Financial">Financial</option>
          </select>
          <button onClick={handleSave}>Save</button>
        </div>
      ) : (
        <>
          <h3>{goal.title}</h3>
          <p>{goal.description}</p>
          <p>Deadline: {goal.deadline}</p>
          <p>Category: {goal.category}</p>
          <GoalProgress goal={goal} onUpdateGoal={onUpdateGoal} />
          <GoalMilestones goal={goal} onUpdateGoal={onUpdateGoal} />
          <GoalReflection goal={goal} onUpdateGoal={onUpdateGoal} />
          <div className="goal-actions">
            <button onClick={handleEdit}>Edit</button>
            <button onClick={() => onDeleteGoal(goal.id)}>Delete</button>
            <button onClick={() => onShareGoal(goal)}>Share</button>
          </div>
        </>
      )}
    </div>
  );
};

export default GoalItem;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalCategories.css`:

```````css
.goal-categories {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
  }
  
  .category-button {
    padding: 8px 16px;
    background-color: #f0f0f0;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
  }
  
  .category-button:hover {
    background-color: #e0e0e0;
  }
  
  .category-button.active {
    background-color: #4CAF50;
    color: white;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalForm.css`:

```````css
.goal-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .goal-form input,
  .goal-form textarea,
  .goal-form select {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }
  
  .goal-form textarea {
    min-height: 100px;
    resize: vertical;
  }
  
  .goal-form button {
    padding: 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }
  
  .goal-form button:hover {
    background-color: #45a049;
  }
  
  .milestones-section {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .milestones-section h3 {
    margin-bottom: 5px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalShare.js`:

```````js
import React, { useState } from 'react';
import './GoalShare.css';

const GoalShare = ({ goal, onClose }) => {
  const [email, setEmail] = useState('');

  const handleShare = () => {
    // Implement sharing functionality (e.g., send an email or notification)
    console.log(`Sharing goal "${goal.title}" with ${email}`);
    onClose();
  };

  return (
    <div className="goal-share-modal">
      <div className="goal-share-content">
        <h2>Share Your Goal</h2>
        <p>Share your goal "{goal.title}" with a friend or support group.</p>
        <input
          type="email"
          placeholder="Enter email address"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <div className="goal-share-actions">
          <button onClick={handleShare}>Share</button>
          <button onClick={onClose}>Cancel</button>
        </div>
      </div>
    </div>
  );
};

export default GoalShare;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalItem.css`:

```````css
.goal-item {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }
  
  .goal-item:hover {
    transform: translateY(-5px);
  }
  
  .goal-item h3 {
    margin-top: 0;
    color: #333;
    font-size: 1.5em;
  }
  
  .goal-item p {
    color: #666;
    margin-bottom: 10px;
  }
  
  .goal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 15px;
  }
  
  .goal-actions button {
    padding: 8px 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .goal-actions button:hover {
    background-color: #45a049;
  }
  
  .goal-edit-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .goal-edit-form input,
  .goal-edit-form textarea,
  .goal-edit-form select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .goal-edit-form button {
    align-self: flex-end;
    padding: 8px 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalForm.js`:

```````js
import React, { useState } from 'react';
import './GoalForm.css';

const GoalForm = ({ onAddGoal }) => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [deadline, setDeadline] = useState('');
  const [category, setCategory] = useState('Personal');
  const [milestones, setMilestones] = useState([]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!title.trim()) return;
    onAddGoal({ 
      title, 
      description, 
      deadline, 
      category, 
      milestones,
      progress: 0, 
      createdAt: new Date() 
    });
    resetForm();
  };

  const addMilestone = () => {
    setMilestones([...milestones, { title: '', completed: false }]);
  };

  const updateMilestone = (index, title) => {
    const updatedMilestones = [...milestones];
    updatedMilestones[index].title = title;
    setMilestones(updatedMilestones);
  };

  const resetForm = () => {
    setTitle('');
    setDescription('');
    setDeadline('');
    setCategory('Personal');
    setMilestones([]);
  };

  return (
    <form className="goal-form" onSubmit={handleSubmit}>
      <input
        type="text"
        placeholder="Goal Title"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        required
      />
      <textarea
        placeholder="Goal Description"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
      />
      <input
        type="date"
        value={deadline}
        onChange={(e) => setDeadline(e.target.value)}
      />
      <select value={category} onChange={(e) => setCategory(e.target.value)}>
        <option value="Personal">Personal</option>
        <option value="Professional">Professional</option>
        <option value="Health">Health</option>
        <option value="Financial">Financial</option>
      </select>
      <div className="milestones-section">
        <h3>Milestones</h3>
        {milestones.map((milestone, index) => (
          <input
            key={index}
            type="text"
            placeholder="Milestone title"
            value={milestone.title}
            onChange={(e) => updateMilestone(index, e.target.value)}
          />
        ))}
        <button type="button" onClick={addMilestone}>Add Milestone</button>
      </div>
      <button type="submit">Add Goal</button>
    </form>
  );
};

export default GoalForm;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalMilestones.js`:

```````js
import React, { useState } from 'react';
import './GoalMilestones.css';

const GoalMilestones = ({ goal, onUpdateGoal }) => {
  const [newMilestone, setNewMilestone] = useState('');

  const handleAddMilestone = () => {
    if (newMilestone.trim()) {
      const updatedMilestones = [...(goal.milestones || []), { title: newMilestone, completed: false }];
      onUpdateGoal(goal.id, { ...goal, milestones: updatedMilestones });
      setNewMilestone('');
    }
  };

  const toggleMilestone = (index) => {
    const updatedMilestones = goal.milestones.map((milestone, i) => 
      i === index ? { ...milestone, completed: !milestone.completed } : milestone
    );
    onUpdateGoal(goal.id, { ...goal, milestones: updatedMilestones });
  };

  return (
    <div className="goal-milestones">
      <h4>Milestones</h4>
      <ul>
        {goal.milestones && goal.milestones.map((milestone, index) => (
          <li key={index} className={milestone.completed ? 'completed' : ''}>
            <input
              type="checkbox"
              checked={milestone.completed}
              onChange={() => toggleMilestone(index)}
            />
            <span>{milestone.title}</span>
          </li>
        ))}
      </ul>
      <div className="add-milestone">
        <input
          type="text"
          value={newMilestone}
          onChange={(e) => setNewMilestone(e.target.value)}
          placeholder="New milestone"
        />
        <button onClick={handleAddMilestone}>Add</button>
      </div>
    </div>
  );
};

export default GoalMilestones;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalReflection.js`:

```````js
import React, { useState } from 'react';
import './GoalReflection.css';

const GoalReflection = ({ goal, onUpdateGoal }) => {
  const [reflection, setReflection] = useState(goal.reflection || '');

  const handleReflectionChange = (e) => {
    setReflection(e.target.value);
  };

  const handleReflectionSubmit = () => {
    onUpdateGoal(goal.id, { ...goal, reflection });
  };

  return (
    <div className="goal-reflection">
      <h4>Reflection</h4>
      <textarea
        value={reflection}
        onChange={handleReflectionChange}
        placeholder="Reflect on your progress..."
      />
      <button onClick={handleReflectionSubmit}>Save Reflection</button>
    </div>
  );
};

export default GoalReflection;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalCategories.js`:

```````js
import React from 'react';
import './GoalCategories.css';

const categories = ['All', 'Personal', 'Professional', 'Health', 'Financial'];

const GoalCategories = ({ selectedCategory, onSelectCategory }) => {
  return (
    <div className="goal-categories">
      {categories.map(category => (
        <button
          key={category}
          className={`category-button ${selectedCategory === category ? 'active' : ''}`}
          onClick={() => onSelectCategory(category)}
        >
          {category}
        </button>
      ))}
    </div>
  );
};

export default GoalCategories;
```````

`/Users/charlesdeng/code/rintzai/src/components/Goals/GoalVisualization.css`:

```````css
.goal-visualization {
    margin-top: 30px;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .goal-visualization h3 {
    margin-bottom: 15px;
    color: #333;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/quoteCustomization.css`:

```````css
.quote-customization {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
  }
  
  .customization-options {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  .option {
    display: flex;
    align-items: center;
  }
  
  .option label {
    margin-right: 10px;
  }
  
  select, input[type="color"] {
    padding: 5px;
    border-radius: 4px;
    border: 1px solid #ced4da;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/QuoteCustomization.js`:

```````js
// QuoteCustomization.js
import React from 'react';
import './quoteCustomization.css';

const QuoteCustomization = ({ customization, onCustomizationChange }) => {
  return (
    <div className="quote-customization">
      <h3>Customize Display</h3>
      <div className="customization-options">
        <div className="option">
          <label htmlFor="font-select">Font:</label>
          <select
            id="font-select"
            value={customization.font}
            onChange={(e) => onCustomizationChange('font', e.target.value)}
          >
            <option value="Arial">Arial</option>
            <option value="Verdana">Verdana</option>
            <option value="Times New Roman">Times New Roman</option>
          </select>
        </div>
        <div className="option">
          <label htmlFor="color-picker">Text Color:</label>
          <input
            id="color-picker"
            type="color"
            value={customization.color}
            onChange={(e) => onCustomizationChange('color', e.target.value)}
          />
        </div>
        <div className="option">
          <label htmlFor="bg-color-picker">Background Color:</label>
          <input
            id="bg-color-picker"
            type="color"
            value={customization.backgroundColor}
            onChange={(e) => onCustomizationChange('backgroundColor', e.target.value)}
          />
        </div>
      </div>
    </div>
  );
};

export default QuoteCustomization;
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/quoteDisplay.css`:

```````css
.quote-display {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .quote-display blockquote {
    font-size: 1.2em;
    font-style: italic;
    color: #333;
    margin: 0 0 10px 0;
  }
  
  .quote-display cite {
    display: block;
    text-align: right;
    color: #666;
  }
  
  .quote-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 15px;
  }
  
  .action-button {
    margin-left: 10px;
    padding: 5px 10px;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
  }
  
  .quote-context, .reflection-prompt {
    margin-top: 15px;
    font-size: 0.9em;
    color: #555;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/quoteService.js`:

```````js
// quoteService.js
import { db } from '../../firebase/firebase';
import { collection, addDoc, getDocs, query, where, limit, orderBy, serverTimestamp } from 'firebase/firestore';

export const fetchQuoteOfDay = async () => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const quotesRef = collection(db, 'quotesOfDay');
  const q = query(quotesRef, where('date', '==', today), limit(1));
  const querySnapshot = await getDocs(q);

  if (querySnapshot.empty) {
    // If no quote for today, generate a new one
    const newQuote = await generateRandomQuote();
    await addDoc(quotesRef, { ...newQuote, date: today });
    return newQuote;
  } else {
    return querySnapshot.docs[0].data();
  }
};

export const fetchQuotes = async (category = 'all') => {
  const quotesRef = collection(db, 'quotes');
  let q = quotesRef;

  if (category !== 'all') {
    q = query(quotesRef, where('category', '==', category));
  }

  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

export const submitUserQuote = async (quote) => {
  const userQuotesRef = collection(db, 'userQuotes');
  await addDoc(userQuotesRef, { ...quote, createdAt: serverTimestamp() });
};

export const fetchUserQuotes = async () => {
    const userQuotesRef = collection(db, 'userQuotes');
    const q = query(userQuotesRef, orderBy('createdAt', 'desc'));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  };
  
  export const generateRandomQuote = async () => {
    const quotesRef = collection(db, 'quotes');
    const q = query(quotesRef, orderBy('random'), limit(1));
    const querySnapshot = await getDocs(q);
    
    if (!querySnapshot.empty) {
      return querySnapshot.docs[0].data();
    } else {
      // Fallback quote if no quotes are found
      return {
        text: "The best way to predict the future is to create it.",
        author: "Peter Drucker"
      };
    }
  };
  
  export const favoriteQuote = async (userId, quoteId) => {
    const userFavoritesRef = collection(db, 'userFavorites');
    await addDoc(userFavoritesRef, { 
      userId, 
      quoteId, 
      createdAt: serverTimestamp() 
    });
  };
  
  export const fetchFavoriteQuotes = async (userId) => {
    const userFavoritesRef = collection(db, 'userFavorites');
    const q = query(userFavoritesRef, where('userId', '==', userId), orderBy('createdAt', 'desc'));
    const querySnapshot = await getDocs(q);
    
    const favoriteIds = querySnapshot.docs.map(doc => doc.data().quoteId);
    
    // Fetch the actual quotes
    const quotesRef = collection(db, 'quotes');
    const quotesSnapshot = await getDocs(query(quotesRef, where('id', 'in', favoriteIds)));
    
    return quotesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  };
  
  export const searchQuotes = async (searchTerm) => {
    const quotesRef = collection(db, 'quotes');
    const q = query(
      quotesRef,
      where('text', '>=', searchTerm),
      where('text', '<=', searchTerm + '\uf8ff'),
      limit(20)
    );
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  };
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/QuoteOfDay.js`:

```````js
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { fetchQuoteOfDay } from './quoteService';
import './quoteOfDay.css';

const QuoteOfDay = ({ customization }) => {
  const [quote, setQuote] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadQuoteOfDay = async () => {
      setIsLoading(true);
      try {
        const dailyQuote = await fetchQuoteOfDay();
        setQuote(dailyQuote);
      } catch (error) {
        console.error('Error fetching quote of the day:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadQuoteOfDay();
  }, []);

  const quoteVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
    exit: { opacity: 0, y: -50, transition: { duration: 0.5 } }
  };

  return (
    <div className="quote-of-day-container" style={{ backgroundColor: customization.backgroundColor }}>
      <h2 className="quote-of-day-title">Quote of the Day</h2>
      <AnimatePresence mode="wait">
        {isLoading ? (
          <motion.div
            key="loading"
            initial="hidden"
            animate="visible"
            exit="exit"
            variants={quoteVariants}
            className="quote-loading"
          >
            <div className="quote-loader"></div>
          </motion.div>
        ) : quote ? (
          <motion.div
            key="quote"
            initial="hidden"
            animate="visible"
            exit="exit"
            variants={quoteVariants}
            className="quote-content"
            style={{ color: customization.color, fontFamily: customization.font }}
          >
            <p className="quote-text">"{quote.text}"</p>
            <p className="quote-author">- {quote.author}</p>
          </motion.div>
        ) : (
          <motion.div
            key="error"
            initial="hidden"
            animate="visible"
            exit="exit"
            variants={quoteVariants}
            className="quote-error"
          >
            <p>Oops! Couldn't fetch the quote of the day. Please try again later.</p>
          </motion.div>
        )}
      </AnimatePresence>
      <div className="quote-inspiration">
        <p>Let this quote inspire your day!</p>
        <button className="share-button" onClick={() => navigator.share({ text: quote?.text, title: 'Quote of the Day' })}>
          Share Inspiration
        </button>
      </div>
    </div>
  );
};

export default QuoteOfDay;
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/QuoteDisplay.js`:

```````js
// QuoteDisplay.js
import React from 'react';
import './quoteDisplay.css';

const QuoteDisplay = ({ quote, onCopy, onShare, onFavorite }) => {
  if (!quote) return <div>No quote selected</div>;

  return (
    <div className="quote-display">
      <blockquote>{quote.text}</blockquote>
      <cite>- {quote.author}</cite>
      <div className="quote-actions">
        <button onClick={() => onCopy(quote)} className="action-button">
          Copy
        </button>
        <button onClick={() => onShare(quote)} className="action-button">
          Share
        </button>
        <button onClick={() => onFavorite(quote)} className="action-button">
          Favorite
        </button>
      </div>
      {quote.context && (
        <div className="quote-context">
          <h4>Context:</h4>
          <p>{quote.context}</p>
        </div>
      )}
      {quote.reflectionPrompt && (
        <div className="reflection-prompt">
          <h4>Reflect:</h4>
          <p>{quote.reflectionPrompt}</p>
        </div>
      )}
    </div>
  );
};

export default QuoteDisplay;
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/QuoteSection.js`:

```````js
import React from 'react';
import "./QuoteSection.css";

const QuoteSection = () => {
  return (
    <div className="quote-section">
      <p>Here's a motivational quote for you:</p>
      <p className="quote">"The best way to get started is to quit talking and begin doing." - Walt Disney</p>
    </div>
  );
};

export default QuoteSection;
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/UserQuotesList.js`:

```````js
import React from 'react';
import './userQuotesList.css';

const UserQuotesList = ({ quotes, onQuoteSelect }) => {
  return (
    <div className="user-quotes-list">
      <h3>Community Quotes</h3>
      {quotes.length > 0 ? (
        <ul>
          {quotes.map((quote, index) => (
            <li key={index} onClick={() => onQuoteSelect(quote)}>
              <blockquote>{quote.text}</blockquote>
              <cite>- {quote.author}</cite>
            </li>
          ))}
        </ul>
      ) : (
        <p>No user-submitted quotes yet. Be the first to contribute!</p>
      )}
    </div>
  );
};

export default UserQuotesList;

```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/userQuoteSubmission.css`:

```````css
.user-quote-submission {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .user-quote-submission form {
    display: flex;
    flex-direction: column;
  }
  
  .user-quote-submission textarea,
  .user-quote-submission input {
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
  }
  
  .user-quote-submission textarea {
    height: 100px;
    resize: vertical;
  }
  
  .user-quote-submission button {
    padding: 10px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .user-quote-submission button:hover {
    background-color: #218838;
  }
  
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/userQuotesList.css`:

```````css
.user-quotes-list {
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .user-quotes-list ul {
    list-style-type: none;
    padding: 0;
  }
  
  .user-quotes-list li {
    background-color: #ffffff;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 10px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .user-quotes-list li:hover {
    background-color: #e9ecef;
  }
  
  .user-quotes-list blockquote {
    font-style: italic;
    margin: 0 0 5px 0;
  }
  
  .user-quotes-list cite {
    display: block;
    text-align: right;
    font-size: 0.9em;
    color: #6c757d;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/Quotes.js`:

```````js
import React, { useState, useEffect } from 'react';
import Navbar from '../Routes/Navbar';
import QuoteOfDay from './QuoteOfDay';
import QuoteDisplay from './QuoteDisplay';
import QuoteCustomization from './QuoteCustomization';
import QuoteCategories from './QuoteCategories';
import UserQuoteSubmission from './UserQuoteSubmission';
import UserQuotesList from './UserQuotesList';
import { fetchQuoteOfDay, fetchQuotes, submitUserQuote, fetchUserQuotes, favoriteQuote, fetchFavoriteQuotes, searchQuotes } from './quoteService';
import { useUserContext } from '../User/UserContext';
import './quotes.css';

const Quotes = () => {
  const [quoteOfDay, setQuoteOfDay] = useState(null);
  const [currentQuote, setCurrentQuote] = useState(null);
  const [category, setCategory] = useState('all');
  const [userQuotes, setUserQuotes] = useState([]);
  const [favoriteQuotes, setFavoriteQuotes] = useState([]);
  const [customization, setCustomization] = useState({
    font: 'Arial',
    color: '#000000',
    backgroundColor: '#ffffff'
  });
  const [searchTerm, setSearchTerm] = useState('');
  const { user } = useUserContext();

  console.log('Quotes component rendered');

  useEffect(() => {
    const loadQuotes = async () => {
      console.log('Loading quotes...');
      try {
        const dailyQuote = await fetchQuoteOfDay();
        console.log('Daily quote fetched:', dailyQuote);
        setQuoteOfDay(dailyQuote);
        setCurrentQuote(dailyQuote);

        const userSubmittedQuotes = await fetchUserQuotes();
        console.log('User submitted quotes fetched:', userSubmittedQuotes);
        setUserQuotes(userSubmittedQuotes);

        if (user) {
          const userFavorites = await fetchFavoriteQuotes(user.uid);
          console.log('User favorites fetched:', userFavorites);
          setFavoriteQuotes(userFavorites);
        }
      } catch (error) {
        console.error('Error loading quotes:', error);
      }
    };

    loadQuotes();
  }, [user]);

  useEffect(() => {
    const loadQuotesByCategory = async () => {
      console.log('Loading quotes by category:', category);
      try {
        const quotes = await fetchQuotes(category);
        console.log('Quotes fetched:', quotes);
        if (quotes.length > 0) {
          const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
          console.log('Random quote selected:', randomQuote);
          setCurrentQuote(randomQuote);
        }
      } catch (error) {
        console.error('Error loading quotes by category:', error);
      }
    };

    if (category !== 'all') {
      loadQuotesByCategory();
    }
  }, [category]);

  const handleRandomQuote = async () => {
    console.log('Fetching random quote...');
    try {
      const quotes = await fetchQuotes(category);
      const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
      console.log('Random quote fetched:', randomQuote);
      setCurrentQuote(randomQuote);
    } catch (error) {
      console.error('Error fetching random quote:', error);
    }
  };

  const handleSubmitQuote = async (newQuote) => {
    console.log('Submitting new quote:', newQuote);
    try {
      await submitUserQuote(newQuote);
      const updatedUserQuotes = await fetchUserQuotes();
      console.log('Updated user quotes:', updatedUserQuotes);
      setUserQuotes(updatedUserQuotes);
    } catch (error) {
      console.error('Error submitting quote:', error);
    }
  };

  const handleFavoriteQuote = async (quote) => {
    console.log('Favoriting quote:', quote);
    if (user) {
      try {
        await favoriteQuote(user.uid, quote.id);
        const updatedFavorites = await fetchFavoriteQuotes(user.uid);
        console.log('Updated favorites:', updatedFavorites);
        setFavoriteQuotes(updatedFavorites);
      } catch (error) {
        console.error('Error favoriting quote:', error);
      }
    } else {
      console.log('User not logged in, cannot favorite quote');
    }
  };

  const handleCustomizationChange = (key, value) => {
    console.log('Customization changed:', key, value);
    setCustomization(prev => ({ ...prev, [key]: value }));
  };

  const handleSearch = async (e) => {
    e.preventDefault();
    console.log('Searching quotes with term:', searchTerm);
    if (searchTerm.trim()) {
      try {
        const searchResults = await searchQuotes(searchTerm);
        console.log('Search results:', searchResults);
        if (searchResults.length > 0) {
          setCurrentQuote(searchResults[0]);
        } else {
          console.log('No quotes found for search term');
        }
      } catch (error) {
        console.error('Error searching quotes:', error);
      }
    }
  };

  return (
  
      
      <div className="quotes-container" style={{ fontFamily: customization.font }}>
        <h1 className="quotes-title">Daily Inspiration</h1>
        
        <div className="quote-of-the-day-section">
          <h2>Quote of the Day</h2>
          <QuoteOfDay quote={quoteOfDay} customization={customization} />
        </div>

        <div className="quote-interaction-section">
          <div className="quote-categories-search">
            <QuoteCategories selectedCategory={category} onSelectCategory={setCategory} />
            <form onSubmit={handleSearch} className="quote-search-form">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search quotes..."
                className="quote-search-input"
              />
              <button type="submit" className="quote-search-button">Search</button>
            </form>
          </div>

          <div className="quote-display-section">
            {currentQuote && (
              <QuoteDisplay
                quote={currentQuote}
                onCopy={() => {
                  navigator.clipboard.writeText(currentQuote.text);
                  console.log('Quote copied to clipboard');
                }}
                onShare={() => {
                  console.log('Share functionality not implemented');
                  /* Implement share functionality */
                }}
                onFavorite={() => handleFavoriteQuote(currentQuote)}
                customization={customization}
              />
            )}
            <button onClick={handleRandomQuote} className="random-quote-button">Get Random Quote</button>
          </div>

          <QuoteCustomization customization={customization} onCustomizationChange={handleCustomizationChange} />
        </div>

        <div className="user-quotes-section">
          <h2>Community Quotes</h2>
          <UserQuoteSubmission onQuoteSubmit={handleSubmitQuote} />
          <UserQuotesList quotes={userQuotes} />
        </div>

        <div className="favorite-quotes-section">
          <h2>My Favorite Quotes</h2>
          <div className="favorite-quotes-list">
            {favoriteQuotes.map(quote => (
              <QuoteDisplay
                key={quote.id}
                quote={quote}
                onCopy={() => {
                  navigator.clipboard.writeText(quote.text);
                  console.log('Favorite quote copied to clipboard');
                }}
                onShare={() => {
                  console.log('Share functionality not implemented for favorite quote');
                  /* Implement share functionality */
                }}
                onFavorite={() => handleFavoriteQuote(quote)}
                customization={customization}
              />
            ))}
          </div>
        </div>
      </div>
    
  );
};

export default Quotes;
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/quotes.css`:

```````css
.daily-quote-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .daily-quote-title {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    color: #764ba2;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .quote {
    font-size: 1.5rem;
    font-style: italic;
    margin-bottom: 1rem;
    color: #333;
    text-align: center;
    line-height: 1.6;
  }
  
  .quote-author {
    font-size: 1.2rem;
    color: #888;
    text-align: right;
    width: 100%;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/quoteCategories.css`:

```````css
.quote-categories {
    margin-bottom: 20px;
  }
  
  .category-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .category-button {
    padding: 8px 16px;
    border: none;
    border-radius: 20px;
    background-color: #e9ecef;
    color: #495057;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .category-button:hover {
    background-color: #ced4da;
  }
  
  .category-button.active {
    background-color: #007bff;
    color: white;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/QuoteCategories.js`:

```````js
// QuoteCategories.js
import React from 'react';
import './quoteCategories.css';

const categories = ['Inspirational', 'Motivational', 'Love', 'Life', 'Success'];

const QuoteCategories = ({ selectedCategory, onSelectCategory }) => {
  return (
    <div className="quote-categories">
      <h3>Categories</h3>
      <div className="category-buttons">
        {categories.map(category => (
          <button
            key={category}
            className={`category-button ${selectedCategory === category ? 'active' : ''}`}
            onClick={() => onSelectCategory(category)}
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  );
};

export default QuoteCategories;
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/quoteOfDay.css`:

```````css
.quote-of-day-container {
    background-color: #f8f9fa;
    border-radius: 15px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    max-width: 600px;
    margin: 2rem auto;
    position: relative;
    overflow: hidden;
  }
  
  .quote-of-day-container::before {
    content: '"';
    position: absolute;
    top: -20px;
    left: 20px;
    font-size: 150px;
    color: rgba(0, 0, 0, 0.1);
    font-family: Georgia, serif;
  }
  
  .quote-of-day-title {
    font-size: 1.8rem;
    color: #333;
    margin-bottom: 1.5rem;
    position: relative;
    z-index: 1;
  }
  
  .quote-content {
    position: relative;
    z-index: 1;
  }
  
  .quote-text {
    font-size: 1.4rem;
    line-height: 1.6;
    margin-bottom: 1rem;
    font-style: italic;
  }
  
  .quote-author {
    font-size: 1.1rem;
    color: #666;
    font-weight: bold;
  }
  
  .quote-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 150px;
  }
  
  .quote-loader {
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .quote-error {
    color: #dc3545;
    font-style: italic;
  }
  
  .quote-inspiration {
    margin-top: 2rem;
    font-size: 1.1rem;
    color: #6c757d;
  }
  
  .share-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 1rem;
  }
  
  .share-button:hover {
    background-color: #0056b3;
  }
  
  @media (max-width: 768px) {
    .quote-of-day-container {
      padding: 1.5rem;
      margin: 1rem;
    }
  
    .quote-of-day-title {
      font-size: 1.5rem;
    }
  
    .quote-text {
      font-size: 1.2rem;
    }
  
    .quote-author {
      font-size: 1rem;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/UserQuoteSubmission.js`:

```````js
import React, { useState } from 'react';
import { submitUserQuote } from './quoteService';
import './userQuoteSubmission.css';

const UserQuoteSubmission = ({ onQuoteSubmit }) => {
  const [quoteText, setQuoteText] = useState('');
  const [author, setAuthor] = useState('');
  const [category, setCategory] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (quoteText && author) {
      const newQuote = { text: quoteText, author, category };
      await submitUserQuote(newQuote);
      onQuoteSubmit(newQuote);
      setQuoteText('');
      setAuthor('');
      setCategory('');
    }
  };

  return (
    <div className="user-quote-submission">
      <h3>Submit Your Own Quote</h3>
      <form onSubmit={handleSubmit}>
        <textarea
          value={quoteText}
          onChange={(e) => setQuoteText(e.target.value)}
          placeholder="Enter your quote"
          required
        />
        <input
          type="text"
          value={author}
          onChange={(e) => setAuthor(e.target.value)}
          placeholder="Author"
          required
        />
        <input
          type="text"
          value={category}
          onChange={(e) => setCategory(e.target.value)}
          placeholder="Category (optional)"
        />
        <button type="submit">Submit Quote</button>
      </form>
    </div>
  );
};

export default UserQuoteSubmission;
```````

`/Users/charlesdeng/code/rintzai/src/components/Quotes/QuoteSection.css`:

```````css
.quote-section {
  margin-bottom: 1rem;
}

.quote {
  font-style: italic;
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
  text-align: center;
  color: #333;
}

.quote-author {
  font-size: 0.8rem;
  color: #aaa;
  text-align: center;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Sleep/SleepTracker.js`:

```````js
import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import { db, collection, addDoc, query, where, getDocs, orderBy } from '../../firebase/firebase';
import './SleepTracker.css';

const SleepTracker = ({ userId }) => {
  const [sleepData, setSleepData] = useState([]);
  const [newEntry, setNewEntry] = useState({ date: '', hoursSlept: '', quality: 5 });
  const [showTips, setShowTips] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (userId) {
      fetchSleepData();
    }
  }, [userId]);

  const fetchSleepData = async () => {
    if (!userId) {
      setError("User ID is undefined. Please ensure you're logged in.");
      return;
    }

    try {
      const sleepRef = collection(db, 'sleepData');
      const q = query(sleepRef, where('userId', '==', userId), orderBy('date', 'desc'));
      const querySnapshot = await getDocs(q);
      const fetchedData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setSleepData(fetchedData);
    } catch (error) {
      console.error("Error fetching sleep data:", error);
      setError("Failed to fetch sleep data. Please try again later.");
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewEntry(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!userId) {
      setError("User ID is undefined. Please ensure you're logged in.");
      return;
    }

    try {
      const entryData = {
        ...newEntry,
        userId,
        date: new Date(newEntry.date).toISOString(),
        hoursSlept: parseFloat(newEntry.hoursSlept),
        quality: parseInt(newEntry.quality)
      };
      await addDoc(collection(db, 'sleepData'), entryData);
      setNewEntry({ date: '', hoursSlept: '', quality: 5 });
      fetchSleepData();
    } catch (error) {
      console.error("Error adding sleep entry:", error);
      setError("Failed to add sleep entry. Please try again.");
    }
  };

  const renderSleepChart = () => {
    const data = {
      labels: sleepData.map(entry => new Date(entry.date).toLocaleDateString()),
      datasets: [
        {
          label: 'Hours Slept',
          data: sleepData.map(entry => entry.hoursSlept),
          borderColor: 'rgb(75, 192, 192)',
          tension: 0.1
        },
        {
          label: 'Sleep Quality',
          data: sleepData.map(entry => entry.quality),
          borderColor: 'rgb(255, 99, 132)',
          tension: 0.1
        }
      ]
    };

    return <Line data={data} />;
  };

  const sleepTips = [
    "Stick to a consistent sleep schedule, even on weekends.",
    "Create a relaxing bedtime routine.",
    "Ensure your bedroom is dark, quiet, and cool.",
    "Avoid caffeine, alcohol, and large meals before bedtime.",
    "Exercise regularly, but not too close to bedtime.",
    "Limit exposure to blue light from screens before sleep.",
    "Consider using a white noise machine or app.",
    "Practice relaxation techniques like deep breathing or meditation.",
    "Invest in a comfortable mattress and pillows.",
    "If you can't sleep, don't force it. Get up and do a calming activity."
  ];

  return (
    <div className="sleep-tracker">
      <h2>Sleep Tracker</h2>
      {error && <div className="error-message">{error}</div>}
      <form onSubmit={handleSubmit} className="sleep-form">
        <input
          type="date"
          name="date"
          value={newEntry.date}
          onChange={handleInputChange}
          required
        />
        <input
          type="number"
          name="hoursSlept"
          value={newEntry.hoursSlept}
          onChange={handleInputChange}
          placeholder="Hours slept"
          step="0.1"
          min="0"
          max="24"
          required
        />
        <label>
          Sleep Quality:
          <input
            type="range"
            name="quality"
            value={newEntry.quality}
            onChange={handleInputChange}
            min="1"
            max="10"
          />
          {newEntry.quality}
        </label>
        <button type="submit">Add Entry</button>
      </form>

      <div className="sleep-chart">
        <h3>Sleep Pattern</h3>
        {renderSleepChart()}
      </div>

      <div className="sleep-stats">
        <h3>Sleep Statistics</h3>
        <p>Average Sleep Duration: {(sleepData.reduce((sum, entry) => sum + entry.hoursSlept, 0) / sleepData.length || 0).toFixed(2)} hours</p>
        <p>Average Sleep Quality: {(sleepData.reduce((sum, entry) => sum + entry.quality, 0) / sleepData.length || 0).toFixed(2)} / 10</p>
      </div>

      <div className="sleep-tips">
        <h3>Sleep Hygiene Tips</h3>
        <button onClick={() => setShowTips(!showTips)}>
          {showTips ? 'Hide Tips' : 'Show Tips'}
        </button>
        {showTips && (
          <ul>
            {sleepTips.map((tip, index) => (
              <li key={index}>{tip}</li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default SleepTracker;
```````

`/Users/charlesdeng/code/rintzai/src/components/Sleep/SleepTracker.css`:

```````css
/* src/components/Sleep/SleepTracker.css */

.sleep-tracker {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    font-family: Arial, sans-serif;
  }
  
  .sleep-tracker h2 {
    color: #333;
    text-align: center;
  }
  
  .sleep-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 30px;
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 8px;
  }
  
  .sleep-form input[type="date"],
  .sleep-form input[type="number"] {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
  }
  
  .sleep-form label {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .sleep-form input[type="range"] {
    flex-grow: 1;
  }
  
  .sleep-form button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
  }
  
  .sleep-form button:hover {
    background-color: #45a049;
  }
  
  .sleep-chart {
    margin-bottom: 30px;
  }
  
  .sleep-chart h3 {
    color: #333;
    margin-bottom: 15px;
  }
  
  .sleep-stats {
    background-color: #e9e9e9;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
  }
  
  .sleep-stats h3 {
    color: #333;
    margin-bottom: 15px;
  }
  
  .sleep-stats p {
    margin: 10px 0;
  }
  
  .sleep-tips {
    background-color: #f0f0f0;
    padding: 20px;
    border-radius: 8px;
  }
  
  .sleep-tips h3 {
    color: #333;
    margin-bottom: 15px;
  }
  
  .sleep-tips button {
    padding: 10px 20px;
    background-color: #008CBA;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
  }
  
  .sleep-tips button:hover {
    background-color: #007B9A;
  }
  
  .sleep-tips ul {
    list-style-type: none;
    padding: 0;
  }
  
  .sleep-tips li {
    margin: 10px 0;
    padding: 10px;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  @media (max-width: 600px) {
    .sleep-tracker {
      padding: 10px;
    }
  
    .sleep-form {
      padding: 15px;
    }
  
    .sleep-form input[type="date"],
    .sleep-form input[type="number"],
    .sleep-form button {
      font-size: 14px;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTProgress.js`:

```````js
import React from 'react';
import { Line } from 'react-chartjs-2';
import './DBTProgress.css';

const DBTProgress = ({ dbtData }) => {
  const skillsData = Object.keys(dbtData.completedSkills).map(module => ({
    module,
    completed: dbtData.completedSkills[module].length
  }));

  const chartData = {
    labels: skillsData.map(item => item.module),
    datasets: [
      {
        label: 'Completed Skills',
        data: skillsData.map(item => item.completed),
        fill: false,
        backgroundColor: 'rgb(75, 192, 192)',
        borderColor: 'rgba(75, 192, 192, 0.2)',
      },
    ],
  };

  const options = {
    scales: {
      y: {
        beginAtZero: true,
      },
    },
  };

  return (
    <div className="dbt-progress">
      <h2>Your DBT Progress</h2>
      <div className="progress-stats">
        <div className="stat">
          <h3>Total Skills Completed</h3>
          <p>{Object.values(dbtData.completedSkills).flat().length}</p>
        </div>
        <div className="stat">
          <h3>Total Exercises Completed</h3>
          <p>{dbtData.completedExercises.length}</p>
        </div>
        <div className="stat">
          <h3>Diary Card Entries</h3>
          <p>{dbtData.diaryEntries.length}</p>
        </div>
      </div>
      <div className="progress-chart">
        <h3>Skills Progress by Module</h3>
        <Line data={chartData} options={options} />
      </div>
    </div>
  );
};

export default DBTProgress;
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTDiaryCard.js`:

```````js
import React, { useState } from 'react';
import './DBTDiaryCard.css';

const DBTDiaryCard = ({ dbtData, onDataUpdate }) => {
  const [entry, setEntry] = useState({
    date: new Date().toISOString().split('T')[0],
    emotions: '',
    urges: '',
    skillsUsed: '',
    selfHarmUrges: 0,
    suicidalIdeation: 0,
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEntry(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const updatedEntries = [...dbtData.diaryEntries, entry];
    onDataUpdate({ diaryEntries: updatedEntries });
    setEntry({
      date: new Date().toISOString().split('T')[0],
      emotions: '',
      urges: '',
      skillsUsed: '',
      selfHarmUrges: 0,
      suicidalIdeation: 0,
    });
  };

  return (
    <div className="dbt-diary-card">
      <h2>DBT Diary Card</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="date">Date:</label>
          <input
            type="date"
            id="date"
            name="date"
            value={entry.date}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <label htmlFor="emotions">Emotions:</label>
          <textarea
            id="emotions"
            name="emotions"
            value={entry.emotions}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <label htmlFor="urges">Urges:</label>
          <textarea
            id="urges"
            name="urges"
            value={entry.urges}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <label htmlFor="skillsUsed">Skills Used:</label>
          <textarea
            id="skillsUsed"
            name="skillsUsed"
            value={entry.skillsUsed}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <label htmlFor="selfHarmUrges">Self-Harm Urges (0-5):</label>
          <input
            type="number"
            id="selfHarmUrges"
            name="selfHarmUrges"
            min="0"
            max="5"
            value={entry.selfHarmUrges}
            onChange={handleInputChange}
            required
          />
        </div>
        <div>
          <label htmlFor="suicidalIdeation">Suicidal Ideation (0-5):</label>
          <input
            type="number"
            id="suicidalIdeation"
            name="suicidalIdeation"
            min="0"
            max="5"
            value={entry.suicidalIdeation}
            onChange={handleInputChange}
            required
          />
        </div>
        <button type="submit">Submit Entry</button>
      </form>
    </div>
  );
};

export default DBTDiaryCard;
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTExercises.js`:

```````js
import React, { useState } from 'react';
import './DBTExercises.css';

const exercises = [
  {
    id: 1,
    title: 'Mindful Breathing',
    description: 'Practice focusing on your breath for 5 minutes.',
    module: 'Mindfulness'
  },
  {
    id: 2,
    title: 'STOP Skill Practice',
    description: 'Use the STOP skill in a stressful situation today.',
    module: 'Distress Tolerance'
  },
  {
    id: 3,
    title: 'Emotion Identification',
    description: 'Identify and label your emotions throughout the day.',
    module: 'Emotion Regulation'
  },
  {
    id: 4,
    title: 'DEAR MAN Role Play',
    description: 'Practice using DEAR MAN in a hypothetical scenario.',
    module: 'Interpersonal Effectiveness'
  }
];

const DBTExercises = ({ dbtData, onDataUpdate }) => {
  const [selectedExercise, setSelectedExercise] = useState(null);

  const handleExerciseComplete = (exerciseId) => {
    const updatedExercises = [...dbtData.completedExercises, exerciseId];
    onDataUpdate({ completedExercises: updatedExercises });
  };

  return (
    <div className="dbt-exercises">
      <h2>DBT Exercises</h2>
      <div className="exercise-list">
        {exercises.map(exercise => (
          <div key={exercise.id} className="exercise-item">
            <h3>{exercise.title}</h3>
            <p>{exercise.description}</p>
            <p>Module: {exercise.module}</p>
            <button onClick={() => setSelectedExercise(exercise)}>Start Exercise</button>
            {dbtData.completedExercises.includes(exercise.id) && <span className="completed">Completed</span>}
          </div>
        ))}
      </div>
      {selectedExercise && (
        <div className="exercise-details">
          <h3>{selectedExercise.title}</h3>
          <p>{selectedExercise.description}</p>
          <button onClick={() => handleExerciseComplete(selectedExercise.id)}>Mark as Complete</button>
        </div>
      )}
    </div>
  );
};

export default DBTExercises;
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTResources.css`:

```````css
.dbt-resources {
    margin-bottom: 2rem;
  }
  
  .resource-list {
    list-style-type: none;
    padding: 0;
  }
  
  .resource-item {
    background-color: #fff;
    border-radius: 4px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .resource-item h3 {
    margin-top: 0;
  }
  
  .author {
    font-style: italic;
    color: #666;
  }
  
  .resource-item a {
    display: inline-block;
    margin-top: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    text-decoration: none;
    border-radius: 4px;
  }
  
  .additional-resources {
    margin-top: 2rem;
  }
  
  .additional-resources ul {
    list-style-type: none;
    padding: 0;
  }
  
  .additional-resources li {
    margin-bottom: 0.5rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTExercises.css`:

```````css
.dbt-exercises {
    margin-bottom: 2rem;
  }
  
  .exercise-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }
  
  .exercise-item {
    background-color: #fff;
    border-radius: 4px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .exercise-item button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .completed {
    color: #4CAF50;
    font-weight: bold;
    margin-left: 1rem;
  }
  
  .exercise-details {
    margin-top: 2rem;
    padding: 1rem;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/dbtService.js`:

```````js
import { db, doc, getDoc, setDoc, updateDoc } from '../../firebase/firebase';

export const fetchUserDBTData = async (userId) => {
  try {
    const userDocRef = doc(db, 'userDBT', userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists()) {
      return userDocSnap.data();
    } else {
      // If the document doesn't exist, create it with default values
      const defaultData = {
        completedSkills: {},
        completedExercises: [],
        diaryEntries: [],
      };
      await setDoc(userDocRef, defaultData);
      return defaultData;
    }
  } catch (error) {
    console.error('Error fetching user DBT data:', error);
    throw error;
  }
};

export const updateUserDBTData = async (userId, newData) => {
  try {
    const userDocRef = doc(db, 'userDBT', userId);
    await updateDoc(userDocRef, newData);
  } catch (error) {
    console.error('Error updating user DBT data:', error);
    throw error;
  }
};
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBT.css`:

```````css
.dbt-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .dbt-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .dbt-nav {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .dbt-nav button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .dbt-nav button:hover {
    background-color: #45a049;
  }
  
  .dbt-main {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBT.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import DBTSkills from './DBTSkills';
import DBTDiaryCard from './DBTDiaryCard';
import DBTExercises from './DBTExercises';
import DBTProgress from './DBTProgress';
import DBTResources from './DBTResources';
import { fetchUserDBTData, updateUserDBTData } from './dbtService';
import './DBT.css';
import Navbar from '../Routes/Navbar';

const DBT = () => {
  const { user } = useUserContext();
  const [dbtData, setDBTData] = useState(null);
  const [activeComponent, setActiveComponent] = useState('Skills');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadDBTData = async () => {
      setIsLoading(true);
      try {
        if (user) {
          const data = await fetchUserDBTData(user.uid);
          setDBTData(data);
        }
      } catch (error) {
        console.error('Error loading DBT data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadDBTData();
  }, [user]);

  const handleDataUpdate = async (newData) => {
    try {
      await updateUserDBTData(user.uid, newData);
      setDBTData(prevData => ({ ...prevData, ...newData }));
    } catch (error) {
      console.error('Error updating DBT data:', error);
    }
  };

  const renderActiveComponent = () => {
    switch (activeComponent) {
      case 'Skills':
        return <DBTSkills dbtData={dbtData} onDataUpdate={handleDataUpdate} />;
      case 'DiaryCard':
        return <DBTDiaryCard dbtData={dbtData} onDataUpdate={handleDataUpdate} />;
      case 'Exercises':
        return <DBTExercises dbtData={dbtData} onDataUpdate={handleDataUpdate} />;
      case 'Progress':
        return <DBTProgress dbtData={dbtData} />;
      case 'Resources':
        return <DBTResources />;
      default:
        return <DBTSkills dbtData={dbtData} onDataUpdate={handleDataUpdate} />;
    }
  };

  if (isLoading) {
    return <div className="loading">Loading DBT data...</div>;
  }

  return (
    <>
      
      <div className="dbt-container">
        <h1>Dialectical Behavior Therapy (DBT)</h1>
        <div className="dbt-content">
          <nav className="dbt-nav">
            <button onClick={() => setActiveComponent('Skills')}>Skills</button>
            <button onClick={() => setActiveComponent('DiaryCard')}>Diary Card</button>
            <button onClick={() => setActiveComponent('Exercises')}>Exercises</button>
            <button onClick={() => setActiveComponent('Progress')}>Progress</button>
            <button onClick={() => setActiveComponent('Resources')}>Resources</button>
          </nav>
          <main className="dbt-main">
            {renderActiveComponent()}
          </main>
        </div>
      </div>
    </>
  );
};

export default DBT;
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTResources.js`:

```````js
import React from 'react';
import './DBTResources.css';

const resources = [
  {
    title: 'DBT Skills Training Manual',
    author: 'Marsha M. Linehan',
    description: 'Comprehensive guide to DBT skills training.',
    link: 'https://example.com/dbt-manual'
  },
  {
    title: 'The Dialectical Behavior Therapy Skills Workbook',
    author: 'Matthew McKay, Jeffrey C. Wood, and Jeffrey Brantley',
    description: 'Practical DBT workbook for self-help and therapy.',
    link: 'https://example.com/dbt-workbook'
  },
  {
    title: 'DBT® Skills Training Handouts and Worksheets',
    author: 'Marsha M. Linehan',
    description: 'Collection of handouts and worksheets for DBT skills practice.',
    link: 'https://example.com/dbt-handouts'
  },
  {
    title: 'DBT Made Simple',
    author: 'Sheri Van Dijk',
    description: 'A step-by-step guide to Dialectical Behavior Therapy.',
    link: 'https://example.com/dbt-made-simple'
  }
];

const DBTResources = () => {
  return (
    <div className="dbt-resources">
      <h2>DBT Resources</h2>
      <ul className="resource-list">
        {resources.map((resource, index) => (
          <li key={index} className="resource-item">
            <h3>{resource.title}</h3>
            <p className="author">by {resource.author}</p>
            <p className="description">{resource.description}</p>
            <a href={resource.link} target="_blank" rel="noopener noreferrer">Learn More</a>
          </li>
        ))}
      </ul>
      <div className="additional-resources">
        <h3>Additional Resources</h3>
        <ul>
          <li><a href="https://behavioraltech.org" target="_blank" rel="noopener noreferrer">Behavioral Tech (Linehan Institute)</a></li>
          <li><a href="https://www.dbtselfhelp.com" target="_blank" rel="noopener noreferrer">DBT Self Help</a></li>
          <li><a href="https://www.nami.org/Learn-More/Treatment/Psychotherapy/Dialectical-Behavior-Therapy" target="_blank" rel="noopener noreferrer">NAMI: Dialectical Behavior Therapy</a></li>
        </ul>
      </div>
    </div>
  );
};

export default DBTResources;
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTSkills.css`:

```````css
.dbt-skills {
    margin-bottom: 2rem;
  }
  
  .skill-modules {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .skill-modules button {
    padding: 0.5rem 1rem;
    background-color: #f0f0f0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .skill-modules button.active {
    background-color: #4CAF50;
    color: white;
  }
  
  .skill-list ul {
    list-style-type: none;
    padding: 0;
  }
  
  .skill-list li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .skill-details {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #fff;
    border-radius: 4px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTSkills.js`:

```````js
import React, { useState } from 'react';
import './DBTSkills.css';

const dbtSkillModules = {
  'Mindfulness': [
    'Observe',
    'Describe',
    'Participate',
    'Non-judgmental stance',
    'One-mindfully',
    'Effectiveness'
  ],
  'Distress Tolerance': [
    'STOP skill',
    'Pros and cons',
    'TIPP skills',
    'Distract with ACCEPTS',
    'Self-soothe',
    'Improve the moment'
  ],
  'Emotion Regulation': [
    'Identifying emotions',
    'Check the facts',
    'Opposite action',
    'Problem solving',
    'ABC PLEASE',
    'Cope ahead'
  ],
  'Interpersonal Effectiveness': [
    'DEAR MAN',
    'GIVE',
    'FAST',
    'Validating others',
    'Building relationships',
    'Ending relationships'
  ]
};

const DBTSkills = ({ dbtData, onDataUpdate }) => {
  const [selectedModule, setSelectedModule] = useState(null);
  const [selectedSkill, setSelectedSkill] = useState(null);

  const handleSkillComplete = (module, skill) => {
    const updatedSkills = { ...dbtData.completedSkills };
    if (!updatedSkills[module]) {
      updatedSkills[module] = [];
    }
    if (updatedSkills[module].includes(skill)) {
      updatedSkills[module] = updatedSkills[module].filter(s => s !== skill);
    } else {
      updatedSkills[module].push(skill);
    }
    onDataUpdate({ completedSkills: updatedSkills });
  };

  return (
    <div className="dbt-skills">
      <h2>DBT Skills</h2>
      <div className="skill-modules">
        {Object.keys(dbtSkillModules).map(module => (
          <button 
            key={module}
            onClick={() => setSelectedModule(module)}
            className={selectedModule === module ? 'active' : ''}
          >
            {module}
          </button>
        ))}
      </div>
      {selectedModule && (
        <div className="skill-list">
          <h3>{selectedModule}</h3>
          <ul>
            {dbtSkillModules[selectedModule].map(skill => (
              <li key={skill}>
                <label>
                  <input 
                    type="checkbox"
                    checked={dbtData.completedSkills[selectedModule]?.includes(skill) || false}
                    onChange={() => handleSkillComplete(selectedModule, skill)}
                  />
                  {skill}
                </label>
                <button onClick={() => setSelectedSkill(skill)}>Learn More</button>
              </li>
            ))}
          </ul>
        </div>
      )}
      {selectedSkill && (
        <div className="skill-details">
          <h4>{selectedSkill}</h4>
          <p>Detailed information about {selectedSkill} would go here...</p>
        </div>
      )}
    </div>
  );
};

export default DBTSkills;
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTDiaryCard.css`:

```````css
.dbt-diary-card form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .dbt-diary-card label {
    font-weight: bold;
  }
  
  .dbt-diary-card input,
  .dbt-diary-card textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .dbt-diary-card textarea {
    height: 100px;
  }
  
  .dbt-diary-card button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/DBT/DBTProgress.css`:

```````css
.dbt-progress {
    margin-bottom: 2rem;
  }
  
  .progress-stats {
    display: flex;
    justify-content: space-between;
    margin-bottom: 2rem;
  }
  
  .stat {
    text-align: center;
  }
  
  .stat h3 {
    margin-bottom: 0.5rem;
  }
  
  .progress-chart {
    background-color: #fff;
    border-radius: 4px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/affirmationService.js`:

```````js
import { db, doc, getDoc, setDoc, updateDoc } from '../../firebase/firebase';

export const fetchUserAffirmations = async (userId) => {
  try {
    const userDocRef = doc(db, 'userAffirmations', userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists()) {
      return userDocSnap.data();
    } else {
      // If the document doesn't exist, create it with default values
      const defaultData = {
        dailyAffirmation: { text: "I am capable of achieving great things." },
        customAffirmations: [],
        reminders: [],
      };
      await setDoc(userDocRef, defaultData);
      return defaultData;
    }
  } catch (error) {
    console.error('Error fetching user affirmations:', error);
    throw error;
  }
};

export const updateUserAffirmations = async (userId, newData) => {
  try {
    const userDocRef = doc(db, 'userAffirmations', userId);
    await updateDoc(userDocRef, newData);
  } catch (error) {
    console.error('Error updating user affirmations:', error);
    throw error;
  }
};

export const fetchDailyAffirmation = async () => {
  // This function would fetch a new daily affirmation from your backend
  // For now, we'll return a static affirmation
  return { text: "You are strong, capable, and worthy of love and respect." };
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/DailyAffirmation.js`:

```````js
import React from 'react';
import './DailyAffirmation.css';

const DailyAffirmation = ({ affirmation }) => {
  return (
    <div className="daily-affirmation">
      <h2>Your Daily Affirmation</h2>
      <div className="affirmation-content">
        <p>{affirmation.text}</p>
        <button className="share-button">Share</button>
      </div>
    </div>
  );
};

export default DailyAffirmation;
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/AffirmationList.js`:

```````js
import React from 'react';
import './AffirmationList.css';

const AffirmationList = ({ affirmations, activeCategory, onDeleteAffirmation }) => {
  const filteredAffirmations = activeCategory === 'All' 
    ? affirmations 
    : affirmations.filter(affirmation => affirmation.category === activeCategory);

  return (
    <div className="affirmation-list">
      <h2>Your Affirmations</h2>
      {filteredAffirmations.map(affirmation => (
        <div key={affirmation.id} className="affirmation-item">
          <p>{affirmation.text}</p>
          <div className="affirmation-meta">
            <span className="affirmation-category">{affirmation.category}</span>
            <button onClick={() => onDeleteAffirmation(affirmation.id)}>Delete</button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default AffirmationList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/AffirmationList.css`:

```````css
.affirmation-list {
    margin-top: 2rem;
  }
  
  .affirmation-item {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }
  
  .affirmation-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.5rem;
  }
  
  .affirmation-category {
    font-size: 0.9rem;
    color: #666;
  }
  
  .affirmation-item button {
    padding: 0.25rem 0.5rem;
    background-color: #f44336;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/AffirmationCategories.css`:

```````css
.affirmation-categories {
    margin-top: 2rem;
  }
  
  .category-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .category-buttons button {
    padding: 0.5rem 1rem;
    background-color: #f0f0f0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .category-buttons button.active {
    background-color: #4CAF50;
    color: white;
  }
  
  .category-buttons button:hover {
    background-color: #e0e0e0;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/DailyAffirmation.css`:

```````css
.daily-affirmation {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .affirmation-content {
    font-size: 1.5rem;
    font-style: italic;
    margin-bottom: 1rem;
  }
  
  .share-button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/AffirmationReminders.css`:

```````css
.affirmation-reminders {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .add-reminder {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .day-toggles {
    display: flex;
    gap: 0.25rem;
  }
  
  .day-toggles button {
    padding: 0.25rem 0.5rem;
    background-color: #ddd;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .day-toggles button.active {
    background-color: #4CAF50;
    color: white;
  }
  
  .reminder-list {
    list-style-type: none;
    padding: 0;
  }
  
  .reminder-list li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background-color: white;
    border-radius: 4px;
    margin-bottom: 0.5rem;
  }
  
  .reminder-list button {
    padding: 0.25rem 0.5rem;
    background-color: #f44336;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/Affirmations.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import DailyAffirmation from './DailyAffirmation';
import AffirmationList from './AffirmationList';
import CreateAffirmation from './CreateAffirmation';
import AffirmationCategories from './AffirmationCategories';
import AffirmationReminders from './AffirmationReminders';
import { fetchUserAffirmations, updateUserAffirmations } from './affirmationService';
import './Affirmations.css';
import Navbar from '../Routes/Navbar';

const Affirmations = () => {
  const { user } = useUserContext();
  const [userAffirmations, setUserAffirmations] = useState(null);
  const [activeCategory, setActiveCategory] = useState('All');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadAffirmations = async () => {
      setIsLoading(true);
      try {
        if (user) {
          const data = await fetchUserAffirmations(user.uid);
          setUserAffirmations(data);
        }
      } catch (error) {
        console.error('Error loading affirmations:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadAffirmations();
  }, [user]);

  const handleAddAffirmation = async (newAffirmation) => {
    try {
      const updatedAffirmations = [...userAffirmations.customAffirmations, newAffirmation];
      await updateUserAffirmations(user.uid, { customAffirmations: updatedAffirmations });
      setUserAffirmations({ ...userAffirmations, customAffirmations: updatedAffirmations });
    } catch (error) {
      console.error('Error adding affirmation:', error);
    }
  };

  const handleDeleteAffirmation = async (affirmationId) => {
    try {
      const updatedAffirmations = userAffirmations.customAffirmations.filter(
        affirmation => affirmation.id !== affirmationId
      );
      await updateUserAffirmations(user.uid, { customAffirmations: updatedAffirmations });
      setUserAffirmations({ ...userAffirmations, customAffirmations: updatedAffirmations });
    } catch (error) {
      console.error('Error deleting affirmation:', error);
    }
  };

  const handleUpdateReminders = async (newReminders) => {
    try {
      await updateUserAffirmations(user.uid, { reminders: newReminders });
      setUserAffirmations({ ...userAffirmations, reminders: newReminders });
    } catch (error) {
      console.error('Error updating reminders:', error);
    }
  };

  if (isLoading) {
    return <div className="loading">Loading affirmations...</div>;
  }

  return (
    <>
      
      <div className="affirmations-container">
        <h1>Daily Affirmations</h1>
        <div className="affirmations-content">
          <div className="affirmations-main">
            <DailyAffirmation affirmation={userAffirmations.dailyAffirmation} />
            <CreateAffirmation onAddAffirmation={handleAddAffirmation} />
            <AffirmationCategories 
              categories={['All', ...new Set(userAffirmations.customAffirmations.map(a => a.category))]}
              activeCategory={activeCategory}
              onSelectCategory={setActiveCategory}
            />
            <AffirmationList 
              affirmations={userAffirmations.customAffirmations}
              activeCategory={activeCategory}
              onDeleteAffirmation={handleDeleteAffirmation}
            />
          </div>
          <div className="affirmations-sidebar">
            <AffirmationReminders 
              reminders={userAffirmations.reminders}
              onUpdateReminders={handleUpdateReminders}
            />
          </div>
        </div>
      </div>
    </>
  );
};

export default Affirmations;
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/AffirmationCategories.js`:

```````js
import React from 'react';
import './AffirmationCategories.css';

const AffirmationCategories = ({ categories, activeCategory, onSelectCategory }) => {
  return (
    <div className="affirmation-categories">
      <h3>Categories</h3>
      <div className="category-buttons">
        {categories.map(category => (
          <button
            key={category}
            className={category === activeCategory ? 'active' : ''}
            onClick={() => onSelectCategory(category)}
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  );
};

export default AffirmationCategories;
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/CreateAffirmation.js`:

```````js
import React, { useState } from 'react';
import './CreateAffirmation.css';

const CreateAffirmation = ({ onAddAffirmation }) => {
  const [text, setText] = useState('');
  const [category, setCategory] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (text.trim() && category.trim()) {
      onAddAffirmation({
        id: Date.now(),
        text: text.trim(),
        category: category.trim(),
      });
      setText('');
      setCategory('');
    }
  };

  return (
    <div className="create-affirmation">
      <h2>Create Your Own Affirmation</h2>
      <form onSubmit={handleSubmit}>
        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="Enter your affirmation"
          required
        />
        <input
          type="text"
          value={category}
          onChange={(e) => setCategory(e.target.value)}
          placeholder="Category"
          required
        />
        <button type="submit">Add Affirmation</button>
      </form>
    </div>
  );
};

export default CreateAffirmation;
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/CreateAffirmation.css`:

```````css
.create-affirmation {
    margin-top: 2rem;
  }
  
  .create-affirmation form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .create-affirmation textarea,
  .create-affirmation input {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .create-affirmation textarea {
    height: 100px;
  }
  
  .create-affirmation button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/AffirmationReminders.js`:

```````js
import React, { useState } from 'react';
import './AffirmationReminders.css';

const AffirmationReminders = ({ reminders, onUpdateReminders }) => {
  const [newReminder, setNewReminder] = useState({ time: '', days: [] });

  const handleAddReminder = () => {
    if (newReminder.time && newReminder.days.length > 0) {
      const updatedReminders = [...reminders, newReminder];
      onUpdateReminders(updatedReminders);
      setNewReminder({ time: '', days: [] });
    }
  };

  const handleDeleteReminder = (index) => {
    const updatedReminders = reminders.filter((_, i) => i !== index);
    onUpdateReminders(updatedReminders);
  };

  const handleDayToggle = (day) => {
    const updatedDays = newReminder.days.includes(day)
      ? newReminder.days.filter(d => d !== day)
      : [...newReminder.days, day];
    setNewReminder({ ...newReminder, days: updatedDays });
  };

  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

  return (
    <div className="affirmation-reminders">
      <h3>Reminders</h3>
      <div className="add-reminder">
        <input
          type="time"
          value={newReminder.time}
          onChange={(e) => setNewReminder({ ...newReminder, time: e.target.value })}
        />
        <div className="day-toggles">
          {days.map(day => (
            <button
              key={day}
              className={newReminder.days.includes(day) ? 'active' : ''}
              onClick={() => handleDayToggle(day)}
            >
              {day}
            </button>
          ))}
        </div>
        <button onClick={handleAddReminder}>Add Reminder</button>
      </div>
      <ul className="reminder-list">
        {reminders.map((reminder, index) => (
          <li key={index}>
            <span>{reminder.time}</span>
            <span>{reminder.days.join(', ')}</span>
            <button onClick={() => handleDeleteReminder(index)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AffirmationReminders;
```````

`/Users/charlesdeng/code/rintzai/src/components/Affirmations/Affirmations.css`:

```````css
.affirmations-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .affirmations-content {
    display: flex;
    gap: 2rem;
  }
  
  .affirmations-main {
    flex: 2;
  }
  
  .affirmations-sidebar {
    flex: 1;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceCategories.css`:

```````css
.resource-categories ul {
    list-style-type: none;
    padding: 0;
  }
  
  .resource-categories li {
    padding: 0.5rem;
    cursor: pointer;
  }
  
  .resource-categories li:hover {
    background-color: #f0f0f0;
  }
  
  .resource-categories li.active {
    font-weight: bold;
    background-color: #e0e0e0;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceDetails.js`:

```````js
import React from 'react';
import './ResourceDetails.css';

const ResourceDetails = ({ resource, isBookmarked, onBookmarkToggle }) => {
  return (
    <div className="resource-details">
      <h2>{resource.title}</h2>
      <p>{resource.description}</p>
      <div className="resource-meta">
        <span className="resource-category">{resource.category}</span>
        <span className="resource-type">{resource.type}</span>
      </div>
      {resource.url && (
        <a href={resource.url} target="_blank" rel="noopener noreferrer" className="resource-link">
          View Resource
        </a>
      )}
      <button 
        className={`bookmark-button ${isBookmarked ? 'bookmarked' : ''}`}
        onClick={() => onBookmarkToggle(resource.id)}
      >
        {isBookmarked ? 'Remove Bookmark' : 'Bookmark'}
      </button>
    </div>
  );
};

export default ResourceDetails;
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceBookmarks.js`:

```````js
import React from 'react';
import './ResourceBookmarks.css';

const ResourceBookmarks = ({ bookmarks, onResourceSelect }) => {
  return (
    <div className="resource-bookmarks">
      <h3>Your Bookmarks</h3>
      {bookmarks.length > 0 ? (
        <ul>
          {bookmarks.map(bookmark => (
            <li key={bookmark.id} onClick={() => onResourceSelect(bookmark)}>
              {bookmark.title}
            </li>
          ))}
        </ul>
      ) : (
        <p>You haven't bookmarked any resources yet.</p>
      )}
    </div>
  );
};

export default ResourceBookmarks;
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceList.css`:

```````css
.resource-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }
  
  .resource-item {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .resource-item h3 {
    margin-top: 0;
    cursor: pointer;
  }
  
  .resource-item h3:hover {
    text-decoration: underline;
  }
  
  .resource-meta {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  
  .bookmark-button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .bookmark-button.bookmarked {
    background-color: #f44336;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceBookmarks.css`:

```````css
.resource-bookmarks ul {
    list-style-type: none;
    padding: 0;
  }
  
  .resource-bookmarks li {
    padding: 0.5rem;
    cursor: pointer;
  }
  
  .resource-bookmarks li:hover {
    background-color: #f0f0f0;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceSearch.js`:

```````js
import React, { useState } from 'react';
import './ResourceSearch.css';

const ResourceSearch = ({ onSearch }) => {
  const [searchTerm, setSearchTerm] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    onSearch(searchTerm);
  };

  return (
    <div className="resource-search">
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Search resources..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button type="submit">Search</button>
      </form>
    </div>
  );
};

export default ResourceSearch;
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceSuggestions.css`:

```````css
.resource-suggestions ul {
    list-style-type: none;
    padding: 0;
  }
  
  .resource-suggestions li {
    padding: 0.5rem;
    cursor: pointer;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .resource-suggestions li:last-child {
    border-bottom: none;
  }
  
  .resource-suggestions li:hover {
    background-color: #f0f0f0;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceCategories.js`:

```````js
import React from 'react';
import './ResourceCategories.css';

const ResourceCategories = ({ categories, selectedCategory, onSelectCategory }) => {
  return (
    <div className="resource-categories">
      <h3>Categories</h3>
      <ul>
        {categories.map(category => (
          <li 
            key={category}
            className={category === selectedCategory ? 'active' : ''}
            onClick={() => onSelectCategory(category)}
          >
            {category}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ResourceCategories;
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/resourceService.js`:

```````js
import { db, collection, getDocs, query, where, addDoc, updateDoc, doc } from '../../firebase/firebase';

export const fetchResources = async () => {
  try {
    const resourcesRef = collection(db, 'resources');
    const querySnapshot = await getDocs(resourcesRef);
    return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error('Error fetching resources:', error);
    throw error;
  }
};

export const fetchUserBookmarks = async (userId) => {
  try {
    const bookmarksRef = collection(db, 'bookmarks');
    const q = query(bookmarksRef, where('userId', '==', userId));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => doc.data().resourceId);
  } catch (error) {
    console.error('Error fetching user bookmarks:', error);
    throw error;
  }
};

export const toggleBookmark = async (userId, resourceId) => {
  try {
    const bookmarksRef = collection(db, 'bookmarks');
    const q = query(bookmarksRef, where('userId', '==', userId), where('resourceId', '==', resourceId));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      // Add bookmark
      await addDoc(bookmarksRef, { userId, resourceId });
    } else {
      // Remove bookmark
      const bookmarkDoc = querySnapshot.docs[0];
      await updateDoc(doc(db, 'bookmarks', bookmarkDoc.id), { userId, resourceId });
    }
  } catch (error) {
    console.error('Error toggling bookmark:', error);
    throw error;
  }
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/Resources.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import ResourceList from './ResourceList';
import ResourceSearch from './ResourceSearch';
import ResourceCategories from './ResourceCategories';
import ResourceDetails from './ResourceDetails';
import ResourceBookmarks from './ResourceBookmarks';
import ResourceSuggestions from './ResourceSuggestions';
import { fetchResources, fetchUserBookmarks } from './resourceService';
import './Resources.css';
import Navbar from '../Routes/Navbar';

const Resources = () => {
  const { user } = useUserContext();
  const [resources, setResources] = useState([]);
  const [filteredResources, setFilteredResources] = useState([]);
  const [selectedResource, setSelectedResource] = useState(null);
  const [bookmarks, setBookmarks] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadResourceData = async () => {
      setIsLoading(true);
      try {
        const fetchedResources = await fetchResources();
        setResources(fetchedResources);
        setFilteredResources(fetchedResources);

        if (user) {
          const userBookmarks = await fetchUserBookmarks(user.uid);
          setBookmarks(userBookmarks);
        }
      } catch (error) {
        console.error('Error loading resource data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadResourceData();
  }, [user]);

  const handleSearch = (searchTerm) => {
    const filtered = resources.filter(resource => 
      resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      resource.description.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredResources(filtered);
  };

  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    if (category === 'All') {
      setFilteredResources(resources);
    } else {
      const filtered = resources.filter(resource => resource.category === category);
      setFilteredResources(filtered);
    }
  };

  const handleResourceSelect = (resource) => {
    setSelectedResource(resource);
  };

  const handleBookmarkToggle = async (resourceId) => {
    // This would typically involve a call to your backend service
    console.log(`Toggling bookmark for resource ${resourceId}`);
  };

  if (isLoading) {
    return <div className="loading">Loading resources...</div>;
  }

  return (
    
      
      <div className="resources-container">
        <h1>Mental Health Resources</h1>
        <div className="resources-content">
          <div className="resources-sidebar">
            <ResourceSearch onSearch={handleSearch} />
            <ResourceCategories 
              categories={['All', ...new Set(resources.map(r => r.category))]}
              selectedCategory={selectedCategory}
              onSelectCategory={handleCategorySelect}
            />
            <ResourceBookmarks 
              bookmarks={bookmarks}
              onResourceSelect={handleResourceSelect}
            />
          </div>
          <div className="resources-main">
            <ResourceList 
              resources={filteredResources}
              onResourceSelect={handleResourceSelect}
              bookmarks={bookmarks}
              onBookmarkToggle={handleBookmarkToggle}
            />
          </div>
          <div className="resources-sidebar">
            {selectedResource ? (
              <ResourceDetails 
                resource={selectedResource}
                isBookmarked={bookmarks.includes(selectedResource.id)}
                onBookmarkToggle={handleBookmarkToggle}
              />
            ) : (
              <ResourceSuggestions 
                resources={resources}
                onResourceSelect={handleResourceSelect}
              />
            )}
          </div>
        </div>
      </div>
    
  );
};

export default Resources;
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceSearch.css`:

```````css
.resource-search form {
    display: flex;
    gap: 1rem;
  }
  
  .resource-search input {
    flex-grow: 1;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .resource-search button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/Resources.css`:

```````css
.resources-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .resources-content {
    display: flex;
    gap: 2rem;
  }
  
  .resources-sidebar {
    flex: 1;
  }
  
  .resources-main {
    flex: 2;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceSuggestions.js`:

```````js
import React from 'react';
import './ResourceSuggestions.css';

const ResourceSuggestions = ({ resources, onResourceSelect }) => {
  // Get 5 random resources as suggestions
  const suggestedResources = resources
    .sort(() => 0.5 - Math.random())
    .slice(0, 5);

  return (
    <div className="resource-suggestions">
      <h3>Suggested Resources</h3>
      <ul>
        {suggestedResources.map(resource => (
          <li key={resource.id} onClick={() => onResourceSelect(resource)}>
            {resource.title}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ResourceSuggestions;
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceDetails.css`:

```````css
.resource-details {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .resource-details h2 {
    margin-top: 0;
  }
  
  .resource-meta {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  
  .resource-link {
    display: inline-block;
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    text-decoration: none;
    border-radius: 4px;
  }
  
  .bookmark-button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .bookmark-button.bookmarked {
    background-color: #f44336;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Resources/ResourceList.js`:

```````js
import React from 'react';
import './ResourceList.css';

const ResourceList = ({ resources, onResourceSelect, bookmarks, onBookmarkToggle }) => {
  return (
    <div className="resource-list">
      {resources.map(resource => (
        <div key={resource.id} className="resource-item">
          <h3 onClick={() => onResourceSelect(resource)}>{resource.title}</h3>
          <p>{resource.description.substring(0, 100)}...</p>
          <div className="resource-meta">
            <span className="resource-category">{resource.category}</span>
            <span className="resource-type">{resource.type}</span>
          </div>
          <button 
            className={`bookmark-button ${bookmarks.includes(resource.id) ? 'bookmarked' : ''}`}
            onClick={() => onBookmarkToggle(resource.id)}
          >
            {bookmarks.includes(resource.id) ? 'Bookmarked' : 'Bookmark'}
          </button>
        </div>
      ))}
    </div>
  );
};

export default ResourceList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitReminders.js`:

```````js
import React, { useState } from 'react';
import './HabitReminders.css';

const HabitReminders = ({ habits, onUpdateHabit }) => {
  const [selectedHabit, setSelectedHabit] = useState('');
  const [reminderTime, setReminderTime] = useState('');

  const handleSetReminder = () => {
    if (selectedHabit && reminderTime) {
      const habit = habits.find(h => h.id === selectedHabit);
      const updatedHabit = { ...habit, reminderTime };
      onUpdateHabit(updatedHabit);
      setSelectedHabit('');
      setReminderTime('');
    }
  };

  return (
    <div className="habit-reminders">
      <h2>Set Reminders</h2>
      <select 
        value={selectedHabit} 
        onChange={(e) => setSelectedHabit(e.target.value)}
      >
        <option value="">Select a habit</option>
        {habits.map(habit => (
          <option key={habit.id} value={habit.id}>{habit.name}</option>
        ))}
      </select>
      <input 
        type="time"
        value={reminderTime}
        onChange={(e) => setReminderTime(e.target.value)}
      />
      <button onClick={handleSetReminder}>Set Reminder</button>
      <div className="current-reminders">
        <h3>Current Reminders</h3>
        {habits.filter(habit => habit.reminderTime).map(habit => (
          <div key={habit.id} className="reminder-item">
            <span>{habit.name}: {habit.reminderTime}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default HabitReminders;
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/habitService.js`:

```````js
import { db, doc, getDoc, setDoc, updateDoc } from '../../firebase/firebase';

export const fetchUserHabits = async (userId) => {
  try {
    const userDocRef = doc(db, 'userHabits', userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists()) {
      return userDocSnap.data().habits;
    } else {
      // If the document doesn't exist, create it with an empty habits array
      await setDoc(userDocRef, { habits: [] });
      return [];
    }
  } catch (error) {
    console.error('Error fetching user habits:', error);
    throw error;
  }
};

export const updateUserHabits = async (userId, habits) => {
  try {
    const userDocRef = doc(db, 'userHabits', userId);
    await updateDoc(userDocRef, { habits });
  } catch (error) {
    console.error('Error updating user habits:', error);
    throw error;
  }
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitStats.js`:

```````js
import React from 'react';
import './HabitStats.css';

const HabitStats = ({ habit }) => {
  const calculateStreak = () => {
    let streak = 0;
    const sortedDates = habit.completedDates.sort((a, b) => new Date(b) - new Date(a));
    const today = new Date().toISOString().split('T')[0];
    
    for (let i = 0; i < sortedDates.length; i++) {
      const date = new Date(sortedDates[i]);
      const expectedDate = new Date(today);
      expectedDate.setDate(expectedDate.getDate() - i);
      
      if (date.toISOString().split('T')[0] === expectedDate.toISOString().split('T')[0]) {
        streak++;
      } else {
        break;
      }
    }
    
    return streak;
  };

  const completionRate = () => {
    const totalDays = Math.ceil((new Date() - new Date(habit.completedDates[0])) / (1000 * 60 * 60 * 24));
    return ((habit.completedDates.length / totalDays) * 100).toFixed(2);
  };

  return (
    <div className="habit-stats">
      <h2>{habit.name} Stats</h2>
      <p>Current Streak: {calculateStreak()} days</p>
      <p>Total Completions: {habit.completedDates.length}</p>
      <p>Completion Rate: {completionRate()}%</p>
    </div>
  );
};

export default HabitStats;
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/CreateHabit.css`:

```````css
.create-habit {
    margin-bottom: 2rem;
  }
  
  .create-habit form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .create-habit input,
  .create-habit select {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .create-habit button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/Habits.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import HabitList from './HabitList';
import CreateHabit from './CreateHabit';
import HabitCalendar from './HabitCalendar';
import HabitStats from './HabitStats';
import HabitReminders from './HabitReminders';
import { fetchUserHabits, updateUserHabits } from './habitService';
import './Habits.css';
import Navbar from '../Routes/Navbar';

const Habits = () => {
  const { user } = useUserContext();
  const [habits, setHabits] = useState([]);
  const [selectedHabit, setSelectedHabit] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadHabits = async () => {
      setIsLoading(true);
      try {
        if (user) {
          const userHabits = await fetchUserHabits(user.uid);
          setHabits(userHabits);
        }
      } catch (error) {
        console.error('Error loading habits:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadHabits();
  }, [user]);

  const handleAddHabit = async (newHabit) => {
    try {
      const updatedHabits = [...habits, { ...newHabit, id: Date.now().toString() }];
      await updateUserHabits(user.uid, updatedHabits);
      setHabits(updatedHabits);
    } catch (error) {
      console.error('Error adding habit:', error);
    }
  };

  const handleUpdateHabit = async (updatedHabit) => {
    try {
      const updatedHabits = habits.map(habit => 
        habit.id === updatedHabit.id ? updatedHabit : habit
      );
      await updateUserHabits(user.uid, updatedHabits);
      setHabits(updatedHabits);
    } catch (error) {
      console.error('Error updating habit:', error);
    }
  };

  const handleDeleteHabit = async (habitId) => {
    try {
      const updatedHabits = habits.filter(habit => habit.id !== habitId);
      await updateUserHabits(user.uid, updatedHabits);
      setHabits(updatedHabits);
      if (selectedHabit && selectedHabit.id === habitId) {
        setSelectedHabit(null);
      }
    } catch (error) {
      console.error('Error deleting habit:', error);
    }
  };

  const handleHabitSelect = (habit) => {
    setSelectedHabit(habit);
  };

  if (isLoading) {
    return <div className="loading">Loading habits...</div>;
  }

  return (
    
      
      <div className="habits-container">
        <h1>Habit Tracker</h1>
        <div className="habits-content">
          <div className="habits-sidebar">
            <CreateHabit onAddHabit={handleAddHabit} />
            <HabitList 
              habits={habits}
              onHabitSelect={handleHabitSelect}
              onDeleteHabit={handleDeleteHabit}
            />
          </div>
          <div className="habits-main">
            {selectedHabit ? (
              <>
                <HabitCalendar 
                  habit={selectedHabit}
                  onUpdateHabit={handleUpdateHabit}
                />
                <HabitStats habit={selectedHabit} />
              </>
            ) : (
              <p>Select a habit to view details</p>
            )}
          </div>
          <div className="habits-sidebar">
            <HabitReminders 
              habits={habits}
              onUpdateHabit={handleUpdateHabit}
            />
          </div>
        </div>
      </div>
    
  );
};

export default Habits;
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/Habits.css`:

```````css
.habits-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .habits-content {
    display: flex;
    gap: 2rem;
  }
  
  .habits-sidebar {
    flex: 1;
  }
  
  .habits-main {
    flex: 2;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitCalendar.js`:

```````js
import React from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import './HabitCalendar.css';

const HabitCalendar = ({ habit, onUpdateHabit }) => {
  const handleDateClick = (date) => {
    const dateString = date.toISOString().split('T')[0];
    let updatedCompletedDates;
    if (habit.completedDates.includes(dateString)) {
      updatedCompletedDates = habit.completedDates.filter(d => d !== dateString);
    } else {
      updatedCompletedDates = [...habit.completedDates, dateString];
    }
    onUpdateHabit({ ...habit, completedDates: updatedCompletedDates });
  };

  const tileClassName = ({ date }) => {
    const dateString = date.toISOString().split('T')[0];
    return habit.completedDates.includes(dateString) ? 'completed' : null;
  };

  return (
    <div className="habit-calendar">
      <h2>{habit.name} Calendar</h2>
      <Calendar
        onClickDay={handleDateClick}
        tileClassName={tileClassName}
      />
    </div>
  );
};

export default HabitCalendar;
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/CreateHabit.js`:

```````js
import React, { useState } from 'react';
import './CreateHabit.css';

const CreateHabit = ({ onAddHabit }) => {
  const [name, setName] = useState('');
  const [frequency, setFrequency] = useState('daily');
  const [category, setCategory] = useState('mental_health');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (name.trim()) {
      onAddHabit({
        name: name.trim(),
        frequency,
        category,
        streak: 0,
        completedDates: [],
      });
      setName('');
      setFrequency('daily');
      setCategory('mental_health');
    }
  };

  return (
    <div className="create-habit">
      <h2>Create New Habit</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Habit name"
          required
        />
        <select value={frequency} onChange={(e) => setFrequency(e.target.value)}>
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
        </select>
        <select value={category} onChange={(e) => setCategory(e.target.value)}>
          <option value="mental_health">Mental Health</option>
          <option value="substance_abuse">Substance Abuse</option>
        </select>
        <button type="submit">Add Habit</button>
      </form>
    </div>
  );
};

export default CreateHabit;
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitReminders.css`:

```````css
.habit-reminders {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .habit-reminders select,
  .habit-reminders input {
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .habit-reminders button {
    width: 100%;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .current-reminders {
    margin-top: 2rem;
  }
  
  .reminder-item {
    background-color: white;
    border-radius: 4px;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitList.js`:

```````js
import React from 'react';
import './HabitList.css';

const HabitList = ({ habits, onHabitSelect, onDeleteHabit }) => {
  return (
    <div className="habit-list">
      <h2>Your Habits</h2>
      {habits.map(habit => (
        <div key={habit.id} className="habit-item">
          <span onClick={() => onHabitSelect(habit)}>{habit.name}</span>
          <button onClick={() => onDeleteHabit(habit.id)}>Delete</button>
        </div>
      ))}
    </div>
  );
};

export default HabitList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitCalendar.css`:

```````css
.habit-calendar {
    margin-bottom: 2rem;
  }
  
  .habit-calendar .react-calendar {
    width: 100%;
    border: none;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .habit-calendar .react-calendar__tile--active {
    background-color: #4CAF50;
    color: white;
  }
  
  .habit-calendar .react-calendar__tile.completed {
    background-color: #81C784;
    color: white;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitStats.css`:

```````css
.habit-stats {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 2rem;
  }
  
  .habit-stats h2 {
    margin-bottom: 1rem;
  }
  
  .habit-stats p {
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Habits/HabitList.css`:

```````css
.habit-list {
    margin-top: 2rem;
  }
  
  .habit-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background-color: #f0f0f0;
    border-radius: 4px;
    margin-bottom: 0.5rem;
  }
  
  .habit-item span {
    cursor: pointer;
  }
  
  .habit-item button {
    padding: 0.25rem 0.5rem;
    background-color: #f44336;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/WelcomeMessage.css`:

```````css
.welcome-message {
  font-size: 1.5rem;
  margin-bottom: 0.5rem;
  text-align: center;
  color: #333;
  font-weight: 500;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/LoadingSpinner.js`:

```````js
// LoadingSpinner.js
import React from 'react';
import './loadingSpinner.css';

const LoadingSpinner = () => {
  return (
    <div className="loading-spinner">
      <div className="spinner"></div>
      <div className="loading-text">Loading...</div>
    </div>
  );
};

export default LoadingSpinner;
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/MentalIllness.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import { db, collection, query, where, getDocs, addDoc, updateDoc, doc } from '../../firebase/firebase';
import EducationalContent from './EducationalContent';
import PersonalStories from './PersonalStories';
import SelfAssessment from './SelfAssessment';
import CopingStrategies from './CopingStrategies';
import CrisisSupport from './CrisisSupport';
import PersonalizedDashboard from './PersonalizedDashboard';
import AccessibilityOptions from './AccessibilityOptions';
import PrivacySettings from './PrivacySettings';
import './MentalIllness.css';
import Navbar from '../Routes/Navbar';

const MentalIllness = () => {
  const { user } = useUserContext();
  const [userData, setUserData] = useState(null);
  const [activeSection, setActiveSection] = useState('education');

  useEffect(() => {
    const fetchUserData = async () => {
      if (user) {
        const userRef = collection(db, 'users');
        const q = query(userRef, where('userId', '==', user.uid));
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
          setUserData(querySnapshot.docs[0].data());
        } else {
          const newUserData = {
            userId: user.uid,
            preferences: {},
            assessments: [],
            goals: [],
          };
          const docRef = await addDoc(collection(db, 'users'), newUserData);
          setUserData({ id: docRef.id, ...newUserData });
        }
      }
    };
    fetchUserData();
  }, [user]);

  const updateUserData = async (newData) => {
    if (userData && userData.id) {
      const userRef = doc(db, 'users', userData.id);
      await updateDoc(userRef, newData);
      setUserData({ ...userData, ...newData });
    }
  };

  const renderActiveSection = () => {
    switch (activeSection) {
      case 'education':
        return <EducationalContent />;
      case 'stories':
        return <PersonalStories userId={user.uid} />;
      case 'assessment':
        return <SelfAssessment userData={userData} updateUserData={updateUserData} />;
      case 'coping':
        return <CopingStrategies userData={userData} updateUserData={updateUserData} />;
      case 'crisis':
        return <CrisisSupport />;
      case 'dashboard':
        return <PersonalizedDashboard userData={userData} updateUserData={updateUserData} />;
      case 'accessibility':
        return <AccessibilityOptions userData={userData} updateUserData={updateUserData} />;
      case 'privacy':
        return <PrivacySettings userData={userData} updateUserData={updateUserData} />;
      default:
        return <EducationalContent />;
    }
  };

  return (

    <div className="mental-illness-container">
      <h1>Mental Health Support and Education</h1>
      <nav className="mental-illness-nav">
        <button onClick={() => setActiveSection('education')}>Educational Content</button>
        <button onClick={() => setActiveSection('stories')}>Personal Stories</button>
        <button onClick={() => setActiveSection('assessment')}>Self-Assessment</button>
        <button onClick={() => setActiveSection('coping')}>Coping Strategies</button>
        <button onClick={() => setActiveSection('crisis')}>Crisis Support</button>
        <button onClick={() => setActiveSection('dashboard')}>My Dashboard</button>
        <button onClick={() => setActiveSection('accessibility')}>Accessibility</button>
        <button onClick={() => setActiveSection('privacy')}>Privacy</button>
      </nav>
      <main className="mental-illness-content">
        {renderActiveSection()}
      </main>
    </div>
    
  );
};

export default MentalIllness;
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/CopingStrategies.css`:

```````css
/* src/components/Mental/CopingStrategies.css */
.coping-strategies {
    padding: 1rem;
  }
  
  .strategies-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }
  
  .strategy-item {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .strategy-item h3 {
    color: #4CAF50;
    margin-bottom: 0.5rem;
  }
  
  .strategy-item button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 1rem;
  }
  
  .strategy-item button:hover {
    background-color: #45a049;
  }
  
  .strategy-item button.active {
    background-color: #2E7D32;
  }
  
  .strategy-steps {
    margin-top: 1rem;
  }
  
  .strategy-steps h4 {
    margin-bottom: 0.5rem;
  }
  
  .strategy-steps ol {
    padding-left: 1.5rem;
  }
  
  .strategy-steps li {
    margin-bottom: 0.5rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/PrivacySettings.js`:

```````js
// src/components/Mental/PrivacySettings.js
import React, { useState } from 'react';
import { db, doc, deleteDoc, collection, query, where, getDocs } from '../../firebase/firebase';
import { useUserContext } from '../User/UserContext';
import './PrivacySettings.css';

const PrivacySettings = ({ userData, updateUserData }) => {
  const { user, logout } = useUserContext();
  const [isExporting, setIsExporting] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const handleSettingChange = (setting, value) => {
    const updatedPrivacySettings = { ...userData.privacySettings, [setting]: value };
    updateUserData({ privacySettings: updatedPrivacySettings });
  };

  const exportUserData = async () => {
    setIsExporting(true);
    try {
      const userDataCopy = { ...userData };
      delete userDataCopy.id; // Remove the document ID from the exported data

      const jsonData = JSON.stringify(userDataCopy, null, 2);
      const blob = new Blob([jsonData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);

      const link = document.createElement('a');
      link.href = url;
      link.download = `user_data_${user.uid}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error exporting user data:', error);
      alert('An error occurred while exporting your data. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const deleteAccount = async () => {
    if (window.confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
      setIsDeleting(true);
      try {
        // Delete user data from Firestore
        await deleteDoc(doc(db, 'users', userData.id));

        // Delete user's personal stories
        const storiesRef = collection(db, 'personalStories');
        const q = query(storiesRef, where('userId', '==', user.uid));
        const querySnapshot = await getDocs(q);
        querySnapshot.forEach(async (doc) => {
          await deleteDoc(doc.ref);
        });

        // Sign out the user
        await logout();

        // Redirect to home page or show a message
        window.location.href = '/';
      } catch (error) {
        console.error('Error deleting account:', error);
        alert('An error occurred while deleting your account. Please try again.');
        setIsDeleting(false);
      }
    }
  };

  return (
    <div className="privacy-settings">
      <h2>Privacy Settings</h2>
      <div className="setting">
        <label htmlFor="shareProgress">Share Progress with Healthcare Provider</label>
        <input
          type="checkbox"
          id="shareProgress"
          checked={userData.privacySettings?.shareProgress || false}
          onChange={(e) => handleSettingChange('shareProgress', e.target.checked)}
        />
      </div>
      <div className="setting">
        <label htmlFor="anonymousStories">Post Stories Anonymously by Default</label>
        <input
          type="checkbox"
          id="anonymousStories"
          checked={userData.privacySettings?.anonymousStories || false}
          onChange={(e) => handleSettingChange('anonymousStories', e.target.checked)}
        />
      </div>
      <div className="setting">
        <label htmlFor="dataRetention">Data Retention Period</label>
        <select
          id="dataRetention"
          value={userData.privacySettings?.dataRetention || '1year'}
          onChange={(e) => handleSettingChange('dataRetention', e.target.value)}
        >
          <option value="3months">3 Months</option>
          <option value="6months">6 Months</option>
          <option value="1year">1 Year</option>
          <option value="indefinite">Indefinite</option>
        </select>
      </div>
      <div className="data-export">
        <h3>Export Your Data</h3>
        <p>Download a copy of all your data stored in our system.</p>
        <button onClick={exportUserData} disabled={isExporting}>
          {isExporting ? 'Exporting...' : 'Export Data'}
        </button>
      </div>
      <div className="account-deletion">
        <h3>Delete Your Account</h3>
        <p>Permanently delete your account and all associated data.</p>
        <button className="delete-account" onClick={deleteAccount} disabled={isDeleting}>
          {isDeleting ? 'Deleting...' : 'Delete Account'}
        </button>
      </div>
    </div>
  );
};

export default PrivacySettings;
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/PersonalStories.js`:

```````js
// /src/components/Mental/PersonalStories.js
import React, { useState, useEffect } from 'react';
import { db, collection, query, getDocs, addDoc, where, orderBy } from '../../firebase/firebase';
import './PersonalStories.css';

const PersonalStories = ({ userId }) => {
  const [stories, setStories] = useState([]);
  const [newStory, setNewStory] = useState({ title: '', content: '', anonymous: false });

  useEffect(() => {
    const fetchStories = async () => {
      const storiesRef = collection(db, 'personalStories');
      const q = query(storiesRef, orderBy('createdAt', 'desc'));
      const snapshot = await getDocs(q);
      const fetchedStories = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setStories(fetchedStories);
    };
    fetchStories();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const storyData = {
      ...newStory,
      userId: newStory.anonymous ? null : userId,
      createdAt: new Date(),
    };
    await addDoc(collection(db, 'personalStories'), storyData);
    setStories([storyData, ...stories]);
    setNewStory({ title: '', content: '', anonymous: false });
  };

  return (
    <div className="personal-stories">
      <h2>Share Your Story</h2>
      <form onSubmit={handleSubmit} className="story-form">
        <input
          type="text"
          value={newStory.title}
          onChange={(e) => setNewStory({ ...newStory, title: e.target.value })}
          placeholder="Story Title"
          required
        />
        <textarea
          value={newStory.content}
          onChange={(e) => setNewStory({ ...newStory, content: e.target.value })}
          placeholder="Share your experience..."
          required
        />
        <label>
          <input
            type="checkbox"
            checked={newStory.anonymous}
            onChange={(e) => setNewStory({ ...newStory, anonymous: e.target.checked })}
          />
          Post anonymously
        </label>
        <button type="submit">Share Story</button>
      </form>
      <h2>Community Stories</h2>
      <div className="stories-list">
        {stories.map(story => (
          <div key={story.id} className="story-item">
            <h3>{story.title}</h3>
            <p>{story.content}</p>
            <span className="story-meta">
              {story.anonymous ? 'Anonymous' : 'User'} | {new Date(story.createdAt.toDate()).toLocaleDateString()}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PersonalStories;

```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/CrisisSupport.css`:

```````css
/* src/components/Mental/CrisisSupport.css */
.crisis-support {
    padding: 1rem;
  }
  
  .emergency-message {
    background-color: #ffcccb;
    color: #d8000c;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 2rem;
  }
  
  .resource-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }
  
  .resource-item {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .resource-item h3 {
    color: #4CAF50;
    margin-bottom: 0.5rem;
  }
  
  .resource-item a {
    color: #4CAF50;
    text-decoration: none;
  }
  
  .resource-item a:hover {
    text-decoration: underline;
  }
  
  .crisis-plan {
    background-color: #f0f0f0;
    padding: 1rem;
    border-radius: 8px;
    margin-top: 2rem;
  }
  
  .crisis-plan h3 {
    color: #4CAF50;
    margin-bottom: 1rem;
  }
  
  .crisis-plan ul {
    padding-left: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .crisis-plan li {
    margin-bottom: 0.5rem;
  }
  
  .crisis-plan button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .crisis-plan button:hover {
    background-color: #45a049;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/PersonalizedDashboard.js`:

```````js
// /src/components/Mental/PersonalizedDashboard.js
import React from 'react';
import { Line } from 'react-chartjs-2';
import './PersonalizedDashboard.css';

const PersonalizedDashboard = ({ userData, updateUserData }) => {
  const renderMoodChart = () => {
    const moodData = userData.moodEntries || [];
    const data = {
      labels: moodData.map(entry => new Date(entry.date).toLocaleDateString()),
      datasets: [{
        label: 'Mood',
        data: moodData.map(entry => entry.score),
        fill: false,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      }]
    };

    return (
      <div className="mood-chart">
        <h3>Mood Tracker</h3>
        <Line data={data} />
      </div>
    );
  };

  const renderGoals = () => {
    return (
      <div className="goals-section">
        <h3>My Goals</h3>
        {userData.goals && userData.goals.length > 0 ? (
          <ul>
            {userData.goals.map((goal, index) => (
              <li key={index}>
                <input
                  type="checkbox"
                  checked={goal.completed}
                  onChange={() => {
                    const updatedGoals = [...userData.goals];
                    updatedGoals[index].completed = !updatedGoals[index].completed;
                    updateUserData({ goals: updatedGoals });
                  }}
                />
                {goal.text}
              </li>
            ))}
          </ul>
        ) : (
          <p>No goals set. Add some goals to track your progress!</p>
        )}
        <button onClick={() => {/* Open goal creation modal */}}>Add New Goal</button>
      </div>
    );
  };

  return (
    <div className="personalized-dashboard">
      <h2>My Mental Health Dashboard</h2>
      {renderMoodChart()}
      {renderGoals()}
      <div className="coping-strategies-summary">
        <h3>My Coping Strategies</h3>
        {userData.copingStrategies && userData.copingStrategies.length > 0 ? (
          <ul>
            {userData.copingStrategies.map((strategy, index) => (
              <li key={index}>{strategy}</li>
            ))}
          </ul>
        ) : (
          <p>No coping strategies added yet. Visit the Coping Strategies section to add some!</p>
        )}
      </div>
      <div className="next-steps">
        <h3>Recommended Next Steps</h3>
        <ul>
          <li>Complete your daily mood check-in</li>
          <li>Practice a coping strategy from your list</li>
          <li>Read an article about stress management</li>
          <li>Connect with a support group</li>
        </ul>
      </div>
    </div>
  );
};

export default PersonalizedDashboard;
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/PrivacySettings.css`:

```````css
/* src/components/Mental/PrivacySettings.css */
.privacy-settings {
    padding: 1rem;
  }
  
  .setting {
    margin-bottom: 1.5rem;
  }
  
  .setting label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  .setting input[type="checkbox"],
  .setting select {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .setting select {
    width: 100%;
    max-width: 300px;
  }
  
  .data-export,
  .account-deletion {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 2rem;
  }
  
  .data-export h3,
  .account-deletion h3 {
    color: #4CAF50;
    margin-bottom: 1rem;
  }
  
  .data-export button,
  .account-deletion button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 1rem;
  }
  
  .data-export button:hover,
  .account-deletion button:hover {
    background-color: #45a049;
  }
  
  .account-deletion button {
    background-color: #f44336;
  }
  
  .account-deletion button:hover {
    background-color: #d32f2f;
  }
  
  .data-export button:disabled,
  .account-deletion button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/SelfAssessment.js`:

```````js
import React, { useState } from 'react';
import './SelfAssessment.css';

const assessments = [
  {
    id: 'depression',
    title: 'Depression Screening (PHQ-9)',
    questions: [
      'Little interest or pleasure in doing things',
      'Feeling down, depressed, or hopeless',
      'Trouble falling or staying asleep, or sleeping too much',
      'Feeling tired or having little energy',
      'Poor appetite or overeating',
      'Feeling bad about yourself or that you are a failure or have let yourself or your family down',
      'Trouble concentrating on things, such as reading the newspaper or watching television',
      'Moving or speaking so slowly that other people could have noticed. Or the opposite — being so fidgety or restless that you have been moving around a lot more than usual',
      'Thoughts that you would be better off dead, or of hurting yourself',
    ],
  },
  {
    id: 'anxiety',
    title: 'Generalized Anxiety Disorder (GAD-7)',
    questions: [
      'Feeling nervous, anxious, or on edge',
      'Not being able to stop or control worrying',
      'Worrying too much about different things',
      'Trouble relaxing',
      'Being so restless that it\'s hard to sit still',
      'Becoming easily annoyed or irritable',
      'Feeling afraid as if something awful might happen',
    ],
  },
];

const SelfAssessment = ({ userData, updateUserData }) => {
  const [selectedAssessment, setSelectedAssessment] = useState(null);
  const [answers, setAnswers] = useState({});

  const handleAssessmentSelect = (assessment) => {
    setSelectedAssessment(assessment);
    setAnswers({});
  };

  const handleAnswerChange = (questionIndex, value) => {
    setAnswers({ ...answers, [questionIndex]: parseInt(value) });
  };

  const calculateScore = () => {
    return Object.values(answers).reduce((sum, value) => sum + value, 0);
  };

  const getAssessmentResult = (score) => {
    if (selectedAssessment.id === 'depression') {
      if (score <= 4) return 'Minimal depression';
      if (score <= 9) return 'Mild depression';
      if (score <= 14) return 'Moderate depression';
      if (score <= 19) return 'Moderately severe depression';
      return 'Severe depression';
    } else if (selectedAssessment.id === 'anxiety') {
      if (score <= 4) return 'Minimal anxiety';
      if (score <= 9) return 'Mild anxiety';
      if (score <= 14) return 'Moderate anxiety';
      return 'Severe anxiety';
    }
  };

  const handleSubmit = () => {
    const score = calculateScore();
    const result = getAssessmentResult(score);
    const assessmentResult = {
      id: selectedAssessment.id,
      title: selectedAssessment.title,
      score,
      result,
      date: new Date(),
    };
    updateUserData({
      assessments: [...(userData.assessments || []), assessmentResult],
    });
    setSelectedAssessment(null);
  };

  if (!selectedAssessment) {
    return (
      <div className="self-assessment">
        <h2>Self-Assessment Tools</h2>
        <div className="assessment-list">
          {assessments.map(assessment => (
            <button key={assessment.id} onClick={() => handleAssessmentSelect(assessment)}>
              {assessment.title}
            </button>
          ))}
        </div>
        {userData.assessments && userData.assessments.length > 0 && (
          <div className="assessment-history">
            <h3>Your Assessment History</h3>
            <ul>
              {userData.assessments.map((assessment, index) => (
                <li key={index}>
                  {assessment.title}: {assessment.result} (Score: {assessment.score}) - {new Date(assessment.date).toLocaleDateString()}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="self-assessment">
      <h2>{selectedAssessment.title}</h2>
      <p>Over the last 2 weeks, how often have you been bothered by any of the following problems?</p>
      <form onSubmit={(e) => e.preventDefault()}>
        {selectedAssessment.questions.map((question, index) => (
          <div key={index} className="question">
            <p>{question}</p>
            <div className="answer-options">
              {['Not at all', 'Several days', 'More than half the days', 'Nearly every day'].map((option, value) => (
                <label key={value}>
                  <input
                    type="radio"
                    name={`question-${index}`}
                    value={value}
                    checked={answers[index] === value}
                    onChange={(e) => handleAnswerChange(index, e.target.value)}
                  />
                  {option}
                </label>
              ))}
            </div>
          </div>
        ))}
        <button onClick={handleSubmit} disabled={Object.keys(answers).length !== selectedAssessment.questions.length}>
          Submit
        </button>
      </form>
    </div>
  );
};

export default SelfAssessment;

```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/CrisisSupport.js`:

```````js
import React from 'react';
import './CrisisSupport.css';

const CrisisSupport = () => {
  const emergencyResources = [
    { name: 'National Suicide Prevention Lifeline', phone: '1-800-273-8255', website: 'https://suicidepreventionlifeline.org/' },
    { name: 'Crisis Text Line', phone: 'Text HOME to 741741', website: 'https://www.crisistextline.org/' },
    { name: 'National Domestic Violence Hotline', phone: '1-800-799-7233', website: 'https://www.thehotline.org/' },
    { name: 'National Sexual Assault Hotline', phone: '1-800-656-4673', website: 'https://www.rainn.org/' },
    { name: 'SAMHSA National Helpline', phone: '1-800-662-4357', website: 'https://www.samhsa.gov/find-help/national-helpline' },
  ];

  return (
    <div className="crisis-support">
      <h2>Crisis Support Resources</h2>
      <div className="emergency-message">
        <h3>If you're in immediate danger, please call your local emergency services (911 in the US).</h3>
      </div>
      <div className="resource-list">
        {emergencyResources.map((resource, index) => (
          <div key={index} className="resource-item">
            <h3>{resource.name}</h3>
            <p>Phone: <a href={`tel:${resource.phone}`}>{resource.phone}</a></p>
            <p>Website: <a href={resource.website} target="_blank" rel="noopener noreferrer">{resource.website}</a></p>
          </div>
        ))}
      </div>
      <div className="crisis-plan">
        <h3>Create a Crisis Plan</h3>
        <p>Having a crisis plan can help you navigate difficult moments. Consider including:</p>
        <ul>
          <li>Warning signs that you may be entering a crisis</li>
          <li>Coping strategies that have worked for you in the past</li>
          <li>Names and contact information for your support network</li>
          <li>Professional help contacts (therapist, psychiatrist, etc.)</li>
          <li>A list of reasons to live or things that bring you joy</li>
        </ul>
        <button>Create My Crisis Plan</button>
      </div>
    </div>
  );
};

export default CrisisSupport;
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/PersonalStories.css`:

```````css
/* src/components/Mental/PersonalStories.css */
.personal-stories {
    padding: 1rem;
  }
  
  .story-form {
    background-color: #f0f0f0;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 2rem;
  }
  
  .story-form input[type="text"],
  .story-form textarea {
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .story-form textarea {
    min-height: 100px;
    resize: vertical;
  }
  
  .story-form label {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .story-form input[type="checkbox"] {
    margin-right: 0.5rem;
  }
  
  .story-form button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .story-form button:hover {
    background-color: #45a049;
  }
  
  .stories-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }
  
  .story-item {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .story-item h3 {
    color: #4CAF50;
    margin-bottom: 0.5rem;
  }
  
  .story-meta {
    font-size: 0.8rem;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/EducationalContent.js`:

```````js
import React, { useState, useEffect } from 'react';
import { db, collection, query, getDocs, addDoc, where, orderBy } from '../../firebase/firebase';
import './PersonalStories.css';

const PersonalStories = ({ userId }) => {
  const [stories, setStories] = useState([]);
  const [newStory, setNewStory] = useState({ title: '', content: '', anonymous: false });

  useEffect(() => {
    const fetchStories = async () => {
      const storiesRef = collection(db, 'personalStories');
      const q = query(storiesRef, orderBy('createdAt', 'desc'));
      const snapshot = await getDocs(q);
      const fetchedStories = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setStories(fetchedStories);
    };
    fetchStories();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const storyData = {
      ...newStory,
      userId: newStory.anonymous ? null : userId,
      createdAt: new Date(),
    };
    await addDoc(collection(db, 'personalStories'), storyData);
    setStories([storyData, ...stories]);
    setNewStory({ title: '', content: '', anonymous: false });
  };

  return (
    <div className="personal-stories">
      <h2>Share Your Story</h2>
      <form onSubmit={handleSubmit} className="story-form">
        <input
          type="text"
          value={newStory.title}
          onChange={(e) => setNewStory({ ...newStory, title: e.target.value })}
          placeholder="Story Title"
          required
        />
        <textarea
          value={newStory.content}
          onChange={(e) => setNewStory({ ...newStory, content: e.target.value })}
          placeholder="Share your experience..."
          required
        />
        <label>
          <input
            type="checkbox"
            checked={newStory.anonymous}
            onChange={(e) => setNewStory({ ...newStory, anonymous: e.target.checked })}
          />
          Post anonymously
        </label>
        <button type="submit">Share Story</button>
      </form>
      <h2>Community Stories</h2>
      <div className="stories-list">
        {stories.map(story => (
          <div key={story.id} className="story-item">
            <h3>{story.title}</h3>
            <p>{story.content}</p>
            <span className="story-meta">
              {story.anonymous ? 'Anonymous' : 'User'} | {new Date(story.createdAt.toDate()).toLocaleDateString()}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PersonalStories;

```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/AccessibilityOptions.js`:

```````js
import React from 'react';
import './AccessibilityOptions.css';

const AccessibilityOptions = ({ userData, updateUserData }) => {
  const preferences = userData?.preferences || {};

  const handleOptionChange = (option, value) => {
    const updatedPreferences = { ...preferences, [option]: value };
    updateUserData({ preferences: updatedPreferences });
  };

  return (
    <div className="accessibility-options">
      <h2>Accessibility Options</h2>
      <div className="option">
        <label htmlFor="fontSize">Font Size</label>
        <select
          id="fontSize"
          value={preferences.fontSize || 'medium'}
          onChange={(e) => handleOptionChange('fontSize', e.target.value)}
        >
          <option value="small">Small</option>
          <option value="medium">Medium</option>
          <option value="large">Large</option>
          <option value="x-large">Extra Large</option>
        </select>
      </div>
      <div className="option">
        <label htmlFor="contrast">High Contrast</label>
        <input
          type="checkbox"
          id="contrast"
          checked={preferences.highContrast || false}
          onChange={(e) => handleOptionChange('highContrast', e.target.checked)}
        />
      </div>
      <div className="option">
        <label htmlFor="reduceMotion">Reduce Motion</label>
        <input
          type="checkbox"
          id="reduceMotion"
          checked={preferences.reduceMotion || false}
          onChange={(e) => handleOptionChange('reduceMotion', e.target.checked)}
        />
      </div>
      <div className="option">
        <label htmlFor="textToSpeech">Text-to-Speech</label>
        <input
          type="checkbox"
          id="textToSpeech"
          checked={preferences.textToSpeech || false}
          onChange={(e) => handleOptionChange('textToSpeech', e.target.checked)}
        />
      </div>
      <div className="option">
        <label htmlFor="language">Language</label>
        <select
          id="language"
          value={preferences.language || 'en'}
          onChange={(e) => handleOptionChange('language', e.target.value)}
        >
          <option value="en">English</option>
          <option value="es">Español</option>
          <option value="fr">Français</option>
          <option value="de">Deutsch</option>
          <option value="zh">中文</option>
        </select>
      </div>
    </div>
  );
};

export default AccessibilityOptions;
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/MentalIllness.css`:

```````css
/* src/components/Mental/MentalIllness.css */
.mental-illness-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    font-family: Arial, sans-serif;
  }
  
  .mental-illness-nav {
    display: flex;
    justify-content: space-between;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }
  
  .mental-illness-nav button {
    padding: 0.75rem 1.5rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.1s ease;
    font-size: 1rem;
    margin: 0.5rem;
  }
  
  .mental-illness-nav button:hover {
    background-color: #45a049;
    transform: translateY(-2px);
  }
  
  .mental-illness-nav button:active {
    transform: translateY(1px);
  }
  
  .mental-illness-content {
    background-color: #f8f8f8;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  @media (max-width: 768px) {
    .mental-illness-nav {
      flex-direction: column;
    }
    
    .mental-illness-nav button {
      width: 100%;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/CopingStrategies.js`:

```````js
import React, { useState, useEffect } from 'react';
import { db, collection, getDocs } from '../../firebase/firebase';
import './CopingStrategies.css';

const CopingStrategies = ({ userData, updateUserData }) => {
  const [strategies, setStrategies] = useState([]);
  const [userStrategies, setUserStrategies] = useState(userData.copingStrategies || []);

  useEffect(() => {
    const fetchStrategies = async () => {
      const strategiesRef = collection(db, 'copingStrategies');
      const snapshot = await getDocs(strategiesRef);
      const fetchedStrategies = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setStrategies(fetchedStrategies);
    };
    fetchStrategies();
  }, []);

  const handleStrategyToggle = (strategyId) => {
    const updatedStrategies = userStrategies.includes(strategyId)
      ? userStrategies.filter(id => id !== strategyId)
      : [...userStrategies, strategyId];
    setUserStrategies(updatedStrategies);
    updateUserData({ copingStrategies: updatedStrategies });
  };

  return (
    <div className="coping-strategies">
      <h2>Coping Strategies</h2>
      <div className="strategies-list">
        {strategies.map(strategy => (
          <div key={strategy.id} className="strategy-item">
            <h3>{strategy.title}</h3>
            <p>{strategy.description}</p>
            <button
              onClick={() => handleStrategyToggle(strategy.id)}
              className={userStrategies.includes(strategy.id) ? 'active' : ''}
            >
              {userStrategies.includes(strategy.id) ? 'Remove from My Strategies' : 'Add to My Strategies'}
            </button>
            {strategy.steps && (
              <div className="strategy-steps">
                <h4>How to practice:</h4>
                <ol>
                  {strategy.steps.map((step, index) => (
                    <li key={index}>{step}</li>
                  ))}
                </ol>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default CopingStrategies;
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/EducationalContent.css`:

```````css
/* src/components/Mental/EducationalContent.css */
.educational-content {
    padding: 1rem;
  }
  
  .condition-list {
    margin-bottom: 2rem;
  }
  
  .condition-list ul {
    list-style-type: none;
    padding: 0;
  }
  
  .condition-list li {
    padding: 0.5rem 1rem;
    background-color: #e0e0e0;
    margin-bottom: 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .condition-list li:hover {
    background-color: #d0d0d0;
  }
  
  .condition-details {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .content-section {
    margin-bottom: 2rem;
  }
  
  .content-section h3 {
    color: #4CAF50;
    border-bottom: 2px solid #4CAF50;
    padding-bottom: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .content-section ul {
    padding-left: 2rem;
  }
  
  .content-section li {
    margin-bottom: 0.5rem;
  }
  
  iframe {
    max-width: 100%;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  button:hover {
    background-color: #45a049;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/AccessibilityOptions.css`:

```````css
/* src/components/Mental/AccessibilityOptions.css */
.accessibility-options {
    padding: 1rem;
  }
  
  .option {
    margin-bottom: 1.5rem;
  }
  
  .option label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  .option select,
  .option input[type="checkbox"] {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .option select {
    width: 100%;
    max-width: 300px;
  }
  
  .option input[type="checkbox"] {
    margin-right: 0.5rem;
  }
  
  @media (min-width: 768px) {
    .accessibility-options {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Mental/PersonalizedDashboard.css`:

```````css
.personalized-dashboard {
    padding: 1rem;
  }

  /* src/components/Mental/PersonalizedDashboard.css (continued) */
.mood-chart {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }
  
  .goals-section {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 2rem;
  }
  
  .goals-section h3 {
    color: #4CAF50;
    margin-bottom: 1rem;
  }
  
  .goals-section ul {
    list-style-type: none;
    padding: 0;
  }
  
  .goals-section li {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .goals-section input[type="checkbox"] {
    margin-right: 0.5rem;
  }
  
  .goals-section button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 1rem;
  }
  
  .goals-section button:hover {
    background-color: #45a049;
  }
  
  .coping-strategies-summary {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }
  
  .coping-strategies-summary h3 {
    color: #4CAF50;
    margin-bottom: 1rem;
  }
  
  .coping-strategies-summary ul {
    padding-left: 1.5rem;
  }
  
  .next-steps {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .next-steps h3 {
    color: #4CAF50;
    margin-bottom: 1rem;
  }
  
  .next-steps ul {
    padding-left: 1.5rem;
  }
  
  .next-steps li {
    margin-bottom: 0.5rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/utils/dateUtils.js`:

```````js
export const formatDateTime = (timestamp) => {
    if (!timestamp) return '';
  
    const date = timestamp.toDate();
    const options = {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
    };
  
    return new Intl.DateTimeFormat('en-US', options).format(date);
  };
  
```````

`/Users/charlesdeng/code/rintzai/src/components/User/userService.js`:

```````js
import { db, doc, setDoc } from '../../firebase/firebase';

const createUserInDB = async (user) => {
  try {
    const userRef = doc(db, 'users', user.uid);
    const userData = {
      userId: user.uid,
      email: user.email,
      name: user.displayName || '', // Use an empty string if displayName is not available
    };

    await setDoc(userRef, userData, { merge: true });
    console.log('User created in database:', userData);
  } catch (error) {
    console.error('Error creating user in database:', error);
  }
};

export { createUserInDB };
```````

`/Users/charlesdeng/code/rintzai/src/components/User/UserContext.js`:

```````js
import React, { createContext, useState, useContext, useEffect } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from '../../firebase/firebase';

const UserContext = createContext(null);

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setIsLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const logout = () => {
    setUser(null);
  };

  return (
    <UserContext.Provider value={{ user, setUser, isLoading, logout }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUserContext = () => useContext(UserContext);
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/VisionBoard.js`:

```````js
import React from 'react';
import VisionItem from './VisionItem';
import './VisionBoard.css';

const VisionBoard = ({ items, onUpdateItem, onDeleteItem, onUpdatePosition }) => {
  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const { id, offsetX, offsetY } = JSON.parse(e.dataTransfer.getData('text/plain'));
    const boardRect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - boardRect.left - offsetX;
    const y = e.clientY - boardRect.top - offsetY;
    onUpdatePosition(id, { x, y });
  };

  return (
    <div className="vision-board" onDragOver={handleDragOver} onDrop={handleDrop}>
      {items.map((item) => (
        <VisionItem
          key={item.id}
          item={item}
          onUpdate={onUpdateItem}
          onDelete={onDeleteItem}
          onDrop={handleDrop}
        />
      ))}
    </div>
  );
};

export default VisionBoard;
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/AddVisionItemModal.js`:

```````js
import React, { useState } from 'react';
import './AddVisionItemModal.css';

const AddVisionItemModal = ({ onClose, onAddItem }) => {
  const [newItem, setNewItem] = useState({
    title: '',
    description: '',
    imageUrl: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewItem({ ...newItem, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Submitting new item:', newItem);
    onAddItem(newItem);
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>Add New Vision Item</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            name="title"
            value={newItem.title}
            onChange={handleChange}
            placeholder="Title"
            required
          />
          <textarea
            name="description"
            value={newItem.description}
            onChange={handleChange}
            placeholder="Description"
            required
          />
          <input
            type="text"
            name="imageUrl"
            value={newItem.imageUrl}
            onChange={handleChange}
            placeholder="Image URL"
            required
          />
          <div className="modal-actions">
            <button type="submit">Add Item</button>
            <button type="button" onClick={onClose}>Cancel</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddVisionItemModal;
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/Vision.css`:

```````css
.vision-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .vision-title {
    font-size: 2.5rem;
    color: #333;
    text-align: center;
    margin-bottom: 1rem;
  }
  
  .vision-description {
    text-align: center;
    color: #666;
    margin-bottom: 2rem;
  }
  
  .add-vision-item-button {
    display: block;
    margin: 0 auto 2rem;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.3s ease;
  }
  
  .add-vision-item-button:hover {
    background-color: #45a049;
    transform: translateY(-2px);
  }
  
  .loading-spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
    font-size: 1.2rem;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/Vision.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import { db, collection, query, where, getDocs, addDoc, deleteDoc, doc, updateDoc } from '../../firebase/firebase';
import VisionBoard from './VisionBoard';
import AddVisionItemModal from './AddVisionItemModal';
import Navbar from '../Routes/Navbar';
import { toast } from 'react-toastify';
import './Vision.css';

const Vision = () => {
  const { user } = useUserContext();
  const [visionItems, setVisionItems] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (user) {
      fetchVisionItems();
    }
  }, [user]);

  const fetchVisionItems = async () => {
    setIsLoading(true);
    try {
      const q = query(collection(db, 'visions'), where('userId', '==', user.uid));
      const querySnapshot = await getDocs(q);
      const items = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setVisionItems(items);
    } catch (error) {
      console.error('Error fetching vision items:', error);
      toast.error('Failed to load vision items. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const addVisionItem = async (newItem) => {
    try {
      const docRef = await addDoc(collection(db, 'visions'), {
        ...newItem,
        userId: user.uid,
        createdAt: new Date(),
        position: { x: 0, y: 0 }
      });
      const addedItem = { id: docRef.id, ...newItem, position: { x: 0, y: 0 } };
      setVisionItems(prev => [...prev, addedItem]);
      setIsModalOpen(false);
      toast.success('Vision item added successfully!');
    } catch (error) {
      console.error('Error adding vision item:', error);
      toast.error('Failed to add vision item. Please try again.');
    }
  };

  const updateVisionItem = async (id, updatedItem) => {
    try {
      await updateDoc(doc(db, 'visions', id), updatedItem);
      setVisionItems(prev => prev.map(item => item.id === id ? { ...item, ...updatedItem } : item));
      toast.success('Vision item updated successfully!');
    } catch (error) {
      console.error('Error updating vision item:', error);
      toast.error('Failed to update vision item. Please try again.');
    }
  };

  const deleteVisionItem = async (id) => {
    try {
      await deleteDoc(doc(db, 'visions', id));
      setVisionItems(prev => prev.filter(item => item.id !== id));
      toast.success('Vision item deleted successfully!');
    } catch (error) {
      console.error('Error deleting vision item:', error);
      toast.error('Failed to delete vision item. Please try again.');
    }
  };

  const updateItemPosition = async (id, position) => {
    try {
      await updateDoc(doc(db, 'visions', id), { position });
      setVisionItems(prev => prev.map(item => item.id === id ? { ...item, position } : item));
    } catch (error) {
      console.error('Error updating item position:', error);
      toast.error('Failed to save new position. Please try again.');
    }
  };

  return (
    
      
      <div className="vision-container">
        <h1 className="vision-title">My Vision Board</h1>
        <p className="vision-description">Visualize and organize your goals and dreams.</p>
        <button className="add-vision-item-button" onClick={() => setIsModalOpen(true)}>
          Add New Vision
        </button>
        {isLoading ? (
          <div className="loading-spinner">Loading your visions...</div>
        ) : (
          <VisionBoard
            items={visionItems}
            onUpdateItem={updateVisionItem}
            onDeleteItem={deleteVisionItem}
            onUpdatePosition={updateItemPosition}
          />
        )}
        {isModalOpen && (
          <AddVisionItemModal
            onClose={() => setIsModalOpen(false)}
            onAddItem={addVisionItem}
          />
        )}
      </div>
    
  );
};

export default Vision;
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/VisionItem.css`:

```````css
.vision-item {
    position: absolute;
    transform: translate(var(--x, 0), var(--y, 0));
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: box-shadow 0.3s ease, transform 0.1s ease;
    width: 200px;
    cursor: move;
    user-select: none;
  }
  
  .vision-item:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  .vision-item:active {
    transform: translate(var(--x, 0), var(--y, 0)) scale(1.05);
  }
  
  .vision-item-content {
    padding: 1rem;
  }
  
  .vision-item-image {
    width: 100%;
    height: 120px;
    object-fit: cover;
    border-radius: 4px;
  }
  
  .vision-item-title {
    font-size: 1.2rem;
    margin: 0.5rem 0;
    color: #333;
  }
  
  .vision-item-description {
    font-size: 1rem;
    color: #666;
    margin-bottom: 0.5rem;
  }
  
  .vision-item-actions {
    display: flex;
    justify-content: space-between;
    padding: 0 1rem 1rem;
  }
  
  .vision-item-actions button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .vision-item-actions button:first-child {
    background-color: #4CAF50;
    color: white;
  }
  
  .vision-item-actions button:last-child {
    background-color: #f44336;
    color: white;
  }
  
  .vision-item-actions button:hover {
    opacity: 0.8;
  }
  
  .vision-item-edit {
    padding: 1rem;
  }
  
  .vision-item-edit input,
  .vision-item-edit textarea {
    width: 100%;
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .vision-item-edit textarea {
    height: 80px;
    resize: vertical;
  }
  
  .vision-item-edit button {
    margin-right: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .vision-item-edit button:first-child {
    background-color: #4CAF50;
    color: white;
  }
  
  .vision-item-edit button:last-child {
    background-color: #f44336;
    color: white;
  }
  
  .vision-item-edit button:hover {
    opacity: 0.8;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/VisionItem.js`:

```````js
import React, { useState, useEffect } from 'react';
import './VisionItem.css';

const VisionItem = ({ item, onUpdate, onDelete, onDrop }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedItem, setEditedItem] = useState(item);
  const [position, setPosition] = useState(item.position || { x: 0, y: 0 });

  useEffect(() => {
    setPosition(item.position || { x: 0, y: 0 });
  }, [item.position]);

  useEffect(() => {
    const element = document.getElementById(`vision-item-${item.id}`);
    if (element) {
      element.style.setProperty('--x', `${position.x}px`);
      element.style.setProperty('--y', `${position.y}px`);
    }
  }, [position, item.id]);

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = () => {
    onUpdate(item.id, { ...editedItem, position });
    setIsEditing(false);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEditedItem({ ...editedItem, [name]: value });
  };

  const handleDragStart = (e) => {
    const rect = e.target.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const offsetY = e.clientY - rect.top;
    e.dataTransfer.setData('text/plain', JSON.stringify({ id: item.id, offsetX, offsetY }));
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    onDrop(e, item.id);
  };

  return (
    <div
      id={`vision-item-${item.id}`}
      className="vision-item"
      draggable
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDrop={handleDrop}
    >
      {isEditing ? (
        <div className="vision-item-edit">
          <input
            type="text"
            name="title"
            value={editedItem.title}
            onChange={handleChange}
            placeholder="Title"
          />
          <textarea
            name="description"
            value={editedItem.description}
            onChange={handleChange}
            placeholder="Description"
          />
          <input
            type="text"
            name="imageUrl"
            value={editedItem.imageUrl}
            onChange={handleChange}
            placeholder="Image URL"
          />
          <button onClick={handleSave}>Save</button>
          <button onClick={() => setIsEditing(false)}>Cancel</button>
        </div>
      ) : (
        <>
          <div className="vision-item-content">
            <img src={item.imageUrl} alt={item.title} className="vision-item-image" />
            <h3 className="vision-item-title">{item.title}</h3>
            <p className="vision-item-description">{item.description}</p>
          </div>
          <div className="vision-item-actions">
            <button onClick={handleEdit}>Edit</button>
            <button onClick={() => onDelete(item.id)}>Delete</button>
          </div>''
          </>
        
      )}
    </div>
  );
};

export default VisionItem;
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/VisionBoard.css`:

```````css
.vision-board {
    position: relative;
    width: 100%;
    height: 600px;
    background-color: #f0f0f0;
    border: 2px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    margin-top: 20px;
  }
  
  @media (max-width: 768px) {
    .vision-board {
      height: auto;
      min-height: 400px;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Vision/AddVisionItemModal.css`:

```````css
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modal-content {
    background-color: #fff;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .modal-content h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: #333;
  }
  
  .modal-content form {
    display: flex;
    flex-direction: column;
  }
  
  .modal-content input,
  .modal-content textarea {
    margin-bottom: 1rem;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }
  
  .modal-content textarea {
    height: 100px;
    resize: vertical;
  }
  
  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .modal-actions button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.3s ease;
    font-size: 1rem;
  }
  
  .modal-actions button:first-child {
    background-color: #4CAF50;
    color: white;
  }
  
  .modal-actions button:last-child {
    background-color: #f44336;
    color: white;
  }
  
  .modal-actions button:hover {
    opacity: 0.8;
    transform: translateY(-2px);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/Recommendations.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import DailyTip from './DailyTip';
import ActivitySuggestions from './ActivitySuggestions';
import MoodBasedRecommendations from './MoodBasedRecommendations';
import LongTermGoals from './LongTermGoals';
import CustomizedPlan from './CustomizedPlan';
import { fetchUserRecommendations, generateRecommendations, provideFeedback } from './recommendationService';
import './Recommendations.css';
import Navbar from '../Routes/Navbar';

const Recommendations = () => {
  const { user } = useUserContext();
  const [recommendationsData, setRecommendationsData] = useState(null);
  const [activeComponent, setActiveComponent] = useState('DailyTip');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadRecommendations = async () => {
      setIsLoading(true);
      setError(null);
      try {
        if (user) {
          console.log('Fetching recommendations for user:', user.uid);
          const userData = await fetchUserRecommendations(user.uid);
          console.log('User data for recommendations:', userData);
          if (!userData) {
            throw new Error('No user data found');
          }
          const generatedRecommendations = await generateRecommendations(userData);
          console.log('Generated recommendations:', generatedRecommendations);
          setRecommendationsData(generatedRecommendations);
        }
      } catch (error) {
        console.error('Error loading recommendations:', error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };

    loadRecommendations();
  }, [user]);

  const handleFeedback = async (recommendationType, recommendationId, rating) => {
    try {
      await provideFeedback(user.uid, recommendationType, recommendationId, rating);
      console.log('Feedback provided successfully');
      // Refresh recommendations after feedback
      const userData = await fetchUserRecommendations(user.uid);
      const updatedRecommendations = await generateRecommendations(userData);
      setRecommendationsData(updatedRecommendations);
    } catch (error) {
      console.error('Error providing feedback:', error);
    }
  };

  const renderActiveComponent = () => {
    console.log('Rendering active component:', activeComponent);
    if (!recommendationsData) {
      return null;
    }
    switch (activeComponent) {
      case 'DailyTip':
        return <DailyTip data={recommendationsData.dailyTip} onFeedback={handleFeedback} />;
      case 'ActivitySuggestions':
        return <ActivitySuggestions data={recommendationsData.activitySuggestions} onFeedback={handleFeedback} />;
      case 'MoodBasedRecommendations':
        return <MoodBasedRecommendations data={recommendationsData.moodBasedRecommendations} onFeedback={handleFeedback} />;
      case 'LongTermGoals':
        return <LongTermGoals data={recommendationsData.longTermGoals} onFeedback={handleFeedback} />;
      case 'CustomizedPlan':
        return <CustomizedPlan data={recommendationsData.customizedPlan} onFeedback={handleFeedback} />;
      default:
        console.warn('Unknown active component:', activeComponent);
        return null;
    }
  };

  if (isLoading) {
    return <div className="loading">Loading personalized recommendations...</div>;
  }

  if (error) {
    return <div className="error">Error: {error}</div>;
  }

  if (!recommendationsData) {
    return <div className="no-data">No recommendations available. Please try again later.</div>;
  }

  return (
    
      <div className="recommendations-container">
        <h1>Your Personalized Recommendations</h1>
        <div className="recommendations-content">
          <nav className="recommendations-nav">
            <button onClick={() => setActiveComponent('DailyTip')}>Daily Tip</button>
            <button onClick={() => setActiveComponent('ActivitySuggestions')}>Activity Suggestions</button>
            <button onClick={() => setActiveComponent('MoodBasedRecommendations')}>Mood-Based Recommendations</button>
            <button onClick={() => setActiveComponent('LongTermGoals')}>Long-Term Goals</button>
            <button onClick={() => setActiveComponent('CustomizedPlan')}>Customized Plan</button>
          </nav>
          <main className="recommendations-main">
            {renderActiveComponent()}
          </main>
        </div>
      </div>
    
  );
};

export default Recommendations;
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/MoodBasedRecommendations.js`:

```````js
import React, { useState, useEffect } from 'react';
import './MoodBasedRecommendations.css';

const MoodBasedRecommendations = ({ data, onFeedback }) => {
  console.log('Rendering MoodBasedRecommendations with data:', data);
  const [selectedMood, setSelectedMood] = useState(Object.keys(data)[0]);

  useEffect(() => {
    if (data && Object.keys(data).length > 0) {
      setSelectedMood(Object.keys(data)[0]);
    }
  }, [data]);

  if (!data || Object.keys(data).length === 0) {
    return <div className="no-recommendations">No mood-based recommendations available at the moment.</div>;
  }

  return (
    <div className="mood-based-recommendations">
      <h2>Mood-Based Recommendations</h2>
      <div className="mood-selector">
        <label htmlFor="mood-select">Select your current mood:</label>
        <select 
          id="mood-select" 
          value={selectedMood} 
          onChange={(e) => setSelectedMood(e.target.value)}
        >
          {Object.keys(data).map(mood => (
            <option key={mood} value={mood}>{mood}</option>
          ))}
        </select>
      </div>
      <div className="mood-recommendations">
        <h3>Recommendations for {selectedMood} mood:</h3>
        <ul>
          {data[selectedMood].map((recommendation) => (
            <li key={recommendation.id}>
              <h4>{recommendation.title}</h4>
              <p>{recommendation.description}</p>
              <div className="recommendation-feedback">
                <button onClick={() => onFeedback('moodBased', recommendation.id, 'positive')}>👍</button>
                <button onClick={() => onFeedback('moodBased', recommendation.id, 'negative')}>👎</button>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default MoodBasedRecommendations;
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/CustomizedPlan.css`:

```````css
.customized-plan {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .customized-plan h2 {
    color: #333;
    margin-bottom: 1.5rem;
  }
  
  .plan-overview {
    font-size: 1.1rem;
    margin-bottom: 2rem;
  }
  
  .plan-sections {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .plan-section {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .plan-section h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    color: #4CAF50;
  }
  
  .plan-section ul {
    list-style-type: none;
    padding: 0;
  }
  
  .plan-section li {
    margin-bottom: 1rem;
  }
  
  .plan-section h4 {
    margin-bottom: 0.5rem;
  }
  
  .frequency {
    display: block;
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.5rem;
  }
  
  .item-feedback {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  .item-feedback button {
    padding: 0.3rem 0.5rem;
    background-color: transparent;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
  }
  
  .plan-review {
    margin-top: 2rem;
    text-align: center;
  }
  
  .review-plan-btn {
    padding: 0.75rem 1.5rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-size: 1rem;
  }
  
  .review-plan-btn:hover {
    background-color: #45a049;
  }
  
  .overall-plan-feedback {
    margin-top: 2rem;
    text-align: center;
  }
  
  .feedback-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .feedback-buttons button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .feedback-buttons button:hover {
    background-color: #45a049;
  }
  
  .no-plan {
    text-align: center;
    padding: 2rem;
    font-style: italic;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/LongTermGoals.css`:

```````css
.long-term-goals {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .long-term-goals h2 {
    color: #333;
    margin-bottom: 1.5rem;
  }
  
  .goals-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .goal-item {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .goal-item h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
    color: #4CAF50;
  }
  
  .goal-progress {
    margin: 1rem 0;
  }
  
  .progress-bar {
    height: 10px;
    background-color: #4CAF50;
    border-radius: 5px;
    margin-bottom: 0.5rem;
  }
  
  .goal-item ul {
    padding-left: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .goal-item li {
    margin-bottom: 0.5rem;
  }
  
  .goal-feedback {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }
  
  .goal-feedback button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .goal-feedback button:hover {
    background-color: #45a049;
  }
  
  .no-goals {
    text-align: center;
    padding: 2rem;
    font-style: italic;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/MoodBasedRecommendations.css`:

```````css
.mood-based-recommendations {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .mood-based-recommendations h2 {
    color: #333;
    margin-bottom: 1.5rem;
  }
  
  .mood-selector {
    margin-bottom: 1.5rem;
  }
  
  .mood-selector label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  .mood-selector select {
    width: 100%;
    padding: 0.5rem;
    font-size: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .mood-recommendations ul {
    list-style-type: none;
    padding: 0;
  }
  
  .mood-recommendations li {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .mood-recommendations h4 {
    margin-top: 0;
    margin-bottom: 0.5rem;
    color: #4CAF50;
  }
  
  .recommendation-feedback {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .recommendation-feedback button {
    padding: 0.5rem;
    background-color: transparent;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
  }
  
  .no-recommendations {
    text-align: center;
    padding: 2rem;
    font-style: italic;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/LongTermGoals.js`:

```````js
import React from 'react';
import './LongTermGoals.css';

const LongTermGoals = ({ data, onFeedback }) => {
  console.log('Rendering LongTermGoals with data:', data);

  if (!data || data.length === 0) {
    return <div className="no-goals">No long-term goals available at the moment.</div>;
  }

  return (
    <div className="long-term-goals">
      <h2>Long-Term Mental Health Goals</h2>
      <div className="goals-list">
        {data.map((goal) => (
          <div key={goal.id} className="goal-item">
            <h3>{goal.title}</h3>
            <p>{goal.description}</p>
            <div className="goal-progress">
              <div className="progress-bar" style={{ width: `${goal.progress}%` }}></div>
              <span>{goal.progress}% Complete</span>
            </div>
            <h4>Next Steps:</h4>
            <ul>
              {goal.nextSteps.map((step, stepIndex) => (
                <li key={stepIndex}>{step}</li>
              ))}
            </ul>
            <div className="goal-feedback">
              <button onClick={() => onFeedback('longTermGoal', goal.id, 'positive')}>👍 Helpful</button>
              <button onClick={() => onFeedback('longTermGoal', goal.id, 'negative')}>👎 Not Helpful</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LongTermGoals;
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/ActivitySuggestions.css`:

```````css
.activity-suggestions {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .activity-suggestions h2 {
    color: #333;
    margin-bottom: 1.5rem;
  }
  
  .activities-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }
  
  .activity-item {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .activity-item h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
    color: #4CAF50;
  }
  
  .activity-details {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  
  .start-activity-btn {
    display: block;
    width: 100%;
    padding: 0.75rem;
    margin-top: 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .start-activity-btn:hover {
    background-color: #45a049;
  }
  
  .activity-feedback {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .activity-feedback button {
    padding: 0.5rem;
    background-color: transparent;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
  }
  
  .no-activities {
    text-align: center;
    padding: 2rem;
    font-style: italic;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/recommendationService.js`:

```````js
import { db, doc, getDoc, setDoc, updateDoc, collection, addDoc } from '../../firebase/firebase';

export const fetchUserRecommendations = async (userId) => {
  console.log('Fetching user data for recommendations:', userId);
  try {
    const userDocRef = doc(db, 'users', userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists()) {
      console.log('User data found:', userDocSnap.data());
      return userDocSnap.data();
    } else {
      console.log('No user data found');
      return null;
    }
  } catch (error) {
    console.error('Error fetching user data:', error);
    throw error;
  }
};

export const generateRecommendations = async (userData) => {
  console.log('Generating recommendations based on user data:', userData);

  const userPreferences = userData.preferences || {};
  const userMood = userData.currentMood || 'neutral';
  const userActivity = userData.activityLevel || 'moderate';

  const recommendations = {
    dailyTip: generateDailyTip(userPreferences),
    activitySuggestions: generateActivitySuggestions(userActivity, userPreferences),
    moodBasedRecommendations: generateMoodBasedRecommendations(userMood, userPreferences),
    longTermGoals: generateLongTermGoals(userPreferences),
    customizedPlan: generateCustomizedPlan(userData),
  };

  console.log('Generated recommendations:', recommendations);
  return recommendations;
};

const generateDailyTip = (preferences) => {
  const tips = [
    {
      id: 'tip1',
      tip: "Practice mindfulness for 10 minutes today",
      category: "Mindfulness",
      explanation: "Mindfulness can help reduce stress and improve focus.",
      actionSteps: ["Find a quiet place", "Sit comfortably", "Focus on your breath", "Gently redirect your thoughts when they wander"]
    },
    {
      id: 'tip2',
      tip: "Express gratitude for three things in your life",
      category: "Gratitude",
      explanation: "Practicing gratitude can boost mood and overall well-being.",
      actionSteps: ["Reflect on your day", "Identify three positive things", "Write them down", "Consider why you're grateful for each"]
    },
    {
      id: 'tip3',
      tip: "Take a 15-minute nature walk",
      category: "Physical Activity",
      explanation: "Nature walks can reduce stress and improve mental clarity.",
      actionSteps: ["Find a nearby park or green space", "Leave your phone behind", "Walk at a comfortable pace", "Pay attention to your surroundings"]
    }
  ];

  const filteredTips = tips.filter(tip => !preferences.dislikedCategories || !preferences.dislikedCategories.includes(tip.category));
  return filteredTips[Math.floor(Math.random() * filteredTips.length)];
};

const generateActivitySuggestions = (activityLevel, preferences) => {
  const activities = [
    {
      id: 'act1',
      name: "Guided Meditation",
      description: "Follow a 15-minute guided meditation for relaxation.",
      duration: 15,
      moodImpact: "Calming",
      intensity: "low"
    },
    {
      id: 'act2',
      name: "Journaling",
      description: "Write about your thoughts and feelings for 20 minutes.",
      duration: 20,
      moodImpact: "Reflective",
      intensity: "low"
    },
    {
      id: 'act3',
      name: "Yoga Session",
      description: "Follow a beginner-friendly yoga routine for 30 minutes.",
      duration: 30,
      moodImpact: "Energizing",
      intensity: "moderate"
    },
    {
      id: 'act4',
      name: "High-Intensity Interval Training",
      description: "Do a 20-minute HIIT workout to boost energy and mood.",
      duration: 20,
      moodImpact: "Energizing",
      intensity: "high"
    }
  ];

  const filteredActivities = activities.filter(activity => 
    (!preferences.dislikedActivities || !preferences.dislikedActivities.includes(activity.name)) &&
    (activityLevel === 'high' || activity.intensity !== 'high')
  );

  return filteredActivities.slice(0, 3);
};

const generateMoodBasedRecommendations = (mood, preferences) => {
  const recommendations = {
    "happy": [
      { id: 'happy1', title: "Gratitude Journal", description: "Write down three things you're grateful for to maintain your positive mood." },
      { id: 'happy2', title: "Share Your Joy", description: "Reach out to a friend or family member and share something positive from your day." }
    ],
    "sad": [
      { id: 'sad1', title: "Mood-Boosting Playlist", description: "Listen to uplifting music that you enjoy." },
      { id: 'sad2', title: "Comfort Activity", description: "Engage in a comforting activity, like reading a favorite book or taking a warm bath." }
    ],
    "anxious": [
      { id: 'anx1', title: "Deep Breathing Exercise", description: "Practice deep breathing for 5 minutes to help calm your nervous system." },
      { id: 'anx2', title: "Progressive Muscle Relaxation", description: "Try a progressive muscle relaxation exercise to release physical tension." }
    ],
    "neutral": [
      { id: 'neu1', title: "Mindful Walking", description: "Take a short walk while focusing on your surroundings and sensations." },
      { id: 'neu2', title: "Creative Expression", description: "Spend some time on a creative activity you enjoy, like drawing or writing." }
    ]
  };

  const filteredRecommendations = recommendations[mood].filter(rec => 
    !preferences.dislikedRecommendations || !preferences.dislikedRecommendations.includes(rec.title)
  );

  return { [mood]: filteredRecommendations };
};

const generateLongTermGoals = (preferences) => {
  const goals = [
    {
      id: 'goal1',
      title: "Improve Sleep Quality",
      description: "Develop a consistent sleep routine to improve overall mental health.",
      progress: 30,
      nextSteps: ["Set a consistent bedtime", "Create a relaxing bedtime routine", "Limit screen time before bed"]
    },
    {
      id: 'goal2',
      title: "Build a Meditation Habit",
      description: "Establish a regular meditation practice to reduce stress and improve focus.",
      progress: 20,
      nextSteps: ["Start with 5 minutes daily", "Gradually increase duration", "Experiment with different techniques"]
    },
    {
      id: 'goal3',
      title: "Enhance Social Connections",
      description: "Strengthen relationships and build a supportive social network.",
      progress: 40,
      nextSteps: ["Reach out to a friend weekly", "Join a club or group with shared interests", "Practice active listening"]
    }
  ];

  const filteredGoals = goals.filter(goal => 
    !preferences.dislikedGoals || !preferences.dislikedGoals.includes(goal.title)
  );

  return filteredGoals;
};

const generateCustomizedPlan = (userData) => {
  const planItems = [
    { id: 'plan1', title: "Morning Meditation", description: "Start your day with a 10-minute meditation session", frequency: "Daily" },
    { id: 'plan2', title: "Gratitude Journaling", description: "Write down three things you're grateful for", frequency: "Daily" },
    { id: 'plan3', title: "Physical Exercise", description: "Engage in 30 minutes of moderate physical activity", frequency: "3 times per week" },
    { id: 'plan4', title: "Social Connection", description: "Reach out to a friend or family member", frequency: "Once a week" },
    { id: 'plan5', title: "Mindful Eating", description: "Practice mindful eating during one meal", frequency: "Daily" },
    { id: 'plan6', title: "Nature Time", description: "Spend 15 minutes outdoors in nature", frequency: "3 times per week" }
  ];

  const filteredItems = planItems.filter(item => 
    (!userData.preferences?.dislikedActivities || !userData.preferences.dislikedActivities.includes(item.title)) &&
    (userData.activityLevel !== 'low' || item.title !== "Physical Exercise")
  );

  const selectedItems = filteredItems.slice(0, 4);

  return {
    id: 'customPlan1',
    overview: "This plan is tailored to help you improve your mental well-being based on your unique needs and preferences.",
    sections: {
      "Daily Practices": selectedItems.filter(item => item.frequency === "Daily"),
      "Weekly Goals": selectedItems.filter(item => item.frequency !== "Daily"),
    },
    nextReviewDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
  };
};

export const provideFeedback = async (userId, recommendationType, recommendationId, rating) => {
  try {
    const feedbackRef = collection(db, 'userFeedback');
    await addDoc(feedbackRef, {
      userId,
      recommendationType,
      recommendationId,
      rating,
      timestamp: new Date().toISOString()
    });
    console.log('Feedback saved successfully');
    
    const userRef = doc(db, 'users', userId);
    const userDoc = await getDoc(userRef);
    if (userDoc.exists()) {
      const userData = userDoc.data();
      const updatedPreferences = updatePreferences(userData.preferences, recommendationType, recommendationId, rating);
      await updateDoc(userRef, { preferences: updatedPreferences });
      console.log('User preferences updated');
    }
  } catch (error) {
    console.error('Error saving feedback:', error);
    throw error;
  }
};

const updatePreferences = (preferences, recommendationType, recommendationId, rating) => {
  if (!preferences) preferences = {};
  if (!preferences[recommendationType]) preferences[recommendationType] = { liked: [], disliked: [] };
  
  if (rating === 'positive') {
    preferences[recommendationType].liked.push(recommendationId);
    preferences[recommendationType].disliked = preferences[recommendationType].disliked.filter(id => id !== recommendationId);
  } else if (rating === 'negative') {
    preferences[recommendationType].disliked.push(recommendationId);
    preferences[recommendationType].liked = preferences[recommendationType].liked.filter(id => id !== recommendationId);
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/Recommendations.css`:

```````css
.recommendations-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .recommendations-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .recommendations-nav {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .recommendations-nav button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .recommendations-nav button:hover {
    background-color: #45a049;
  }
  
  .recommendations-main {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
  }
  
  .loading, .error, .no-data {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
  
  .error {
    color: #f44336;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/CustomizedPlan.js`:

```````js
import React from 'react';
import './CustomizedPlan.css';

const CustomizedPlan = ({ data, onFeedback }) => {
  console.log('Rendering CustomizedPlan with data:', data);

  if (!data) {
    return <div className="no-plan">No customized plan available at the moment.</div>;
  }

  return (
    <div className="customized-plan">
      <h2>Your Customized Mental Health Plan</h2>
      <div className="plan-overview">
        <p>{data.overview}</p>
      </div>
      <div className="plan-sections">
        {Object.entries(data.sections).map(([sectionName, sectionData]) => (
          <div key={sectionName} className="plan-section">
            <h3>{sectionName}</h3>
            <ul>
              {sectionData.map((item) => (
                <li key={item.id}>
                  <h4>{item.title}</h4>
                  <p>{item.description}</p>
                  {item.frequency && <span className="frequency">Frequency: {item.frequency}</span>}
                  <div className="item-feedback">
                    <button onClick={() => onFeedback('customPlanItem', item.id, 'positive')}>👍</button>
                    <button onClick={() => onFeedback('customPlanItem', item.id, 'negative')}>👎</button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>
      <div className="plan-review">
        <h3>Plan Review</h3>
        <p>Next review date: {data.nextReviewDate}</p>
        <button className="review-plan-btn">Review and Adjust Plan</button>
      </div>
      <div className="overall-plan-feedback">
        <h3>How helpful is this plan overall?</h3>
        <div className="feedback-buttons">
          <button onClick={() => onFeedback('customPlan', data.id, 'veryHelpful')}>Very Helpful</button>
          <button onClick={() => onFeedback('customPlan', data.id, 'somewhatHelpful')}>Somewhat Helpful</button>
          <button onClick={() => onFeedback('customPlan', data.id, 'notHelpful')}>Not Helpful</button>
        </div>
      </div>
    </div>
  );
};

export default CustomizedPlan;
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/ActivitySuggestions.js`:

```````js
import React from 'react';
import './ActivitySuggestions.css';

const ActivitySuggestions = ({ data, onFeedback }) => {
  console.log('Rendering ActivitySuggestions with data:', data);

  if (!data || data.length === 0) {
    return <div className="no-activities">No activity suggestions available at the moment.</div>;
  }

  return (
    <div className="activity-suggestions">
      <h2>Suggested Activities for Today</h2>
      <div className="activities-list">
        {data.map((activity) => (
          <div key={activity.id} className="activity-item">
            <h3>{activity.name}</h3>
            <p>{activity.description}</p>
            <div className="activity-details">
              <span>Duration: {activity.duration} minutes</span>
              <span>Mood Impact: {activity.moodImpact}</span>
            </div>
            <button className="start-activity-btn">Start Activity</button>
            <div className="activity-feedback">
              <button onClick={() => onFeedback('activity', activity.id, 'positive')}>👍</button>
              <button onClick={() => onFeedback('activity', activity.id, 'negative')}>👎</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ActivitySuggestions;
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/DailyTip.css`:

```````css
.daily-tip {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .daily-tip h2 {
    color: #333;
    margin-bottom: 1.5rem;
  }
  
  .tip-content {
    font-size: 1.2rem;
    margin-bottom: 1rem;
  }
  
  .tip-category {
    font-style: italic;
    color: #666;
    margin-top: 0.5rem;
  }
  
  .tip-explanation, .tip-action {
    margin-top: 1.5rem;
  }
  
  .tip-action ol {
    padding-left: 1.5rem;
  }
  
  .tip-action li {
    margin-bottom: 0.5rem;
  }
  
  .tip-feedback {
    margin-top: 2rem;
  }
  
  .feedback-buttons {
    display: flex;
    gap: 1rem;
  }
  
  .feedback-buttons button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .feedback-buttons button:hover {
    background-color: #45a049;
  }
  
  .no-tip {
    text-align: center;
    padding: 2rem;
    font-style: italic;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Recommendations/DailyTip.js`:

```````js
import React from 'react';
import './DailyTip.css';

const DailyTip = ({ data, onFeedback }) => {
  console.log('Rendering DailyTip with data:', data);

  if (!data) {
    return <div className="no-tip">No daily tip available at the moment.</div>;
  }

  return (
    <div className="daily-tip">
      <h2>Your Daily Mental Health Tip</h2>
      <div className="tip-content">
        <p>{data.tip}</p>
        <div className="tip-category">Category: {data.category}</div>
      </div>
      <div className="tip-explanation">
        <h3>Why This Matters</h3>
        <p>{data.explanation}</p>
      </div>
      <div className="tip-action">
        <h3>How to Apply This</h3>
        <ol>
          {data.actionSteps.map((step, index) => (
            <li key={index}>{step}</li>
          ))}
        </ol>
      </div>
      <div className="tip-feedback">
        <h3>Was this tip helpful?</h3>
        <div className="feedback-buttons">
          <button onClick={() => onFeedback('dailyTip', data.id, 'positive')}>👍 Yes</button>
          <button onClick={() => onFeedback('dailyTip', data.id, 'negative')}>👎 No</button>
        </div>
      </div>
    </div>
  );
};

export default DailyTip;
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SupportGroups.js`:

```````js
import React, { useState, useEffect } from 'react';
import { fetchSupportGroups, joinSupportGroup } from './socialService';
import './SupportGroups.css';

const SupportGroups = ({ userData, onDataUpdate }) => {
  const [groups, setGroups] = useState([]);

  useEffect(() => {
    const loadGroups = async () => {
      const fetchedGroups = await fetchSupportGroups();
      setGroups(fetchedGroups);
    };
    loadGroups();
  }, []);

  const handleJoinGroup = async (groupId) => {
    try {
      await joinSupportGroup(userData.id, groupId);
      onDataUpdate({ supportGroups: [...userData.supportGroups, groupId] });
    } catch (error) {
      console.error('Error joining group:', error);
    }
  };

  return (
    <div className="support-groups">
      <h2>Support Groups</h2>
      <div className="groups-list">
        {groups.map(group => (
          <div key={group.id} className="group-item">
            <h3>{group.name}</h3>
            <p>{group.description}</p>
            <p>Members: {group.memberCount}</p>
            {userData.supportGroups.includes(group.id) ? (
              <button disabled>Joined</button>
            ) : (
              <button onClick={() => handleJoinGroup(group.id)}>Join Group</button>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default SupportGroups;
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SupportGroups.css`:

```````css
.support-groups .groups-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }
  
  .group-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .group-item h3 {
    margin-top: 0;
  }
  
  .group-item button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .group-item button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SharedExperiences.css`:

```````css
.shared-experiences .share-experience {
    margin-bottom: 2rem;
  }
  
  .share-experience textarea {
    width: 100%;
    height: 100px;
    padding: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .share-experience button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .experience-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .experience-meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.5rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SharedExperiences.js`:

```````js
import React, { useState, useEffect } from 'react';
import { fetchSharedExperiences, shareExperience } from './socialService';
import './SharedExperiences.css';

const SharedExperiences = ({ userData, onDataUpdate }) => {
  const [experiences, setExperiences] = useState([]);
  const [newExperience, setNewExperience] = useState('');

  useEffect(() => {
    const loadExperiences = async () => {
      const fetchedExperiences = await fetchSharedExperiences();
      setExperiences(fetchedExperiences);
    };
    loadExperiences();
  }, []);

  const handleShareExperience = async () => {
    if (newExperience.trim()) {
      try {
        const sharedExperience = await shareExperience(userData.id, newExperience);
        setExperiences([sharedExperience, ...experiences]);
        setNewExperience('');
        onDataUpdate({ sharedExperiences: [...userData.sharedExperiences, sharedExperience.id] });
      } catch (error) {
        console.error('Error sharing experience:', error);
      }
    }
  };

  return (
    <div className="shared-experiences">
      <h2>Shared Experiences</h2>
      <div className="share-experience">
        <textarea
          value={newExperience}
          onChange={(e) => setNewExperience(e.target.value)}
          placeholder="Share your experience..."
        />
        <button onClick={handleShareExperience}>Share</button>
      </div>
      <div className="experiences-list">
        {experiences.map(experience => (
          <div key={experience.id} className="experience-item">
            <p>{experience.content}</p>
            <div className="experience-meta">
              <span>Shared by: {experience.userName}</span>
              <span>Date: {new Date(experience.date).toLocaleDateString()}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SharedExperiences;
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SocialProfile.css`:

```````css
.social-profile .view-profile, .social-profile .edit-profile {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .edit-profile input, .edit-profile textarea {
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .edit-profile button, .view-profile button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 1rem;
  }
  
  .edit-profile button:last-child {
    background-color: #f44336;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/Social.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import SupportGroups from './SupportGroups';
import PeerConnections from './PeerConnections';
import SharedExperiences from './SharedExperiences';
import SupportChat from './SupportChat';
import SocialProfile from './SocialProfile';
import { fetchUserSocialData, updateUserSocialData } from './socialService';
import './Social.css';
import Navbar from '../Routes/Navbar';

const Social = () => {
  const { user } = useUserContext();
  const [userSocialData, setUserSocialData] = useState(null);
  const [activeComponent, setActiveComponent] = useState('SupportGroups');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadSocialData = async () => {
      setIsLoading(true);
      try {
        if (user) {
          const data = await fetchUserSocialData(user.uid);
          setUserSocialData(data);
        }
      } catch (error) {
        console.error('Error loading social data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadSocialData();
  }, [user]);

  const handleDataUpdate = async (newData) => {
    try {
      await updateUserSocialData(user.uid, newData);
      setUserSocialData(prevData => ({ ...prevData, ...newData }));
    } catch (error) {
      console.error('Error updating social data:', error);
    }
  };

  const renderActiveComponent = () => {
    switch (activeComponent) {
      case 'SupportGroups':
        return <SupportGroups userData={userSocialData} onDataUpdate={handleDataUpdate} />;
      case 'PeerConnections':
        return <PeerConnections userData={userSocialData} onDataUpdate={handleDataUpdate} />;
      case 'SharedExperiences':
        return <SharedExperiences userData={userSocialData} onDataUpdate={handleDataUpdate} />;
      case 'SupportChat':
        return <SupportChat userData={userSocialData} onDataUpdate={handleDataUpdate} />;
      case 'SocialProfile':
        return <SocialProfile userData={userSocialData} onDataUpdate={handleDataUpdate} />;
      default:
        return <SupportGroups userData={userSocialData} onDataUpdate={handleDataUpdate} />;
    }
  };

  if (isLoading) {
    return <div className="loading">Loading social support network data...</div>;
  }

  return (

      
      <div className="social-container">
        <h1>Social Support Network</h1>
        <div className="social-content">
          <nav className="social-nav">
            <button onClick={() => setActiveComponent('SupportGroups')}>Support Groups</button>
            <button onClick={() => setActiveComponent('PeerConnections')}>Peer Connections</button>
            <button onClick={() => setActiveComponent('SharedExperiences')}>Shared Experiences</button>
            <button onClick={() => setActiveComponent('SupportChat')}>Support Chat</button>
            <button onClick={() => setActiveComponent('SocialProfile')}>Social Profile</button>
          </nav>
          <main className="social-main">
            {renderActiveComponent()}
          </main>
        </div>
      </div>
    
  );
};

export default Social;
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/socialService.js`:

```````js
import { db, doc, getDoc, setDoc, updateDoc, collection, addDoc, query, where, getDocs, orderBy, limit, arrayUnion } from '../../firebase/firebase';

export const fetchUserSocialData = async (userId) => {
  try {
    const userDocRef = doc(db, 'userSocial', userId);
    const userDocSnap = await getDoc(userDocRef);

    if (userDocSnap.exists()) {
      return userDocSnap.data();
    } else {
      // If the document doesn't exist, create it with default values
      const defaultData = {
        id: userId,
        name: '',
        bio: '',
        interests: [],
        connections: [],
        sentRequests: [],
        receivedRequests: [],
        supportGroups: [],
        sharedExperiences: [],
      };
      await setDoc(userDocRef, defaultData);
      return defaultData;
    }
  } catch (error) {
    console.error('Error fetching user social data:', error);
    throw error;
  }
};

export const updateUserSocialData = async (userId, newData) => {
  try {
    const userDocRef = doc(db, 'userSocial', userId);
    await updateDoc(userDocRef, newData);
  } catch (error) {
    console.error('Error updating user social data:', error);
    throw error;
  }
};

export const fetchSupportGroups = async () => {
    try {
      const groupsRef = collection(db, 'supportGroups');
      const querySnapshot = await getDocs(groupsRef);
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('Error fetching support groups:', error);
      throw error;
    }
  };
  
  export const joinSupportGroup = async (userId, groupId) => {
    try {
      const groupRef = doc(db, 'supportGroups', groupId);
      await updateDoc(groupRef, {
        members: arrayUnion(userId)
      });
      const userRef = doc(db, 'userSocial', userId);
      await updateDoc(userRef, {
        supportGroups: arrayUnion(groupId)
      });
    } catch (error) {
      console.error('Error joining support group:', error);
      throw error;
    }
  };
  
  export const fetchPeerSuggestions = async (userId) => {
    try {
      const usersRef = collection(db, 'userSocial');
      const q = query(usersRef, where('id', '!=', userId), limit(10));
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('Error fetching peer suggestions:', error);
      throw error;
    }
  };
  
  export const sendConnectionRequest = async (senderId, receiverId) => {
    try {
      const senderRef = doc(db, 'userSocial', senderId);
      const receiverRef = doc(db, 'userSocial', receiverId);
      await updateDoc(senderRef, {
        sentRequests: arrayUnion(receiverId)
      });
      await updateDoc(receiverRef, {
        receivedRequests: arrayUnion(senderId)
      });
    } catch (error) {
      console.error('Error sending connection request:', error);
      throw error;
    }
  };
  
  export const fetchSharedExperiences = async () => {
    try {
      const experiencesRef = collection(db, 'sharedExperiences');
      const q = query(experiencesRef, orderBy('date', 'desc'), limit(50));
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('Error fetching shared experiences:', error);
      throw error;
    }
  };
  
  export const shareExperience = async (userId, content) => {
    try {
      const userRef = doc(db, 'userSocial', userId);
      const userDoc = await getDoc(userRef);
      const userName = userDoc.data().name;
  
      const experienceData = {
        userId,
        userName,
        content,
        date: new Date().toISOString()
      };
  
      const docRef = await addDoc(collection(db, 'sharedExperiences'), experienceData);
      return { id: docRef.id, ...experienceData };
    } catch (error) {
      console.error('Error sharing experience:', error);
      throw error;
    }
  };
  
  export const fetchChatMessages = async () => {
    try {
      const messagesRef = collection(db, 'chatMessages');
      const q = query(messagesRef, orderBy('timestamp', 'desc'), limit(50));
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })).reverse();
    } catch (error) {
      console.error('Error fetching chat messages:', error);
      throw error;
    }
  };
  
  export const sendChatMessage = async (userId, content) => {
    try {
      const messageData = {
        userId,
        content,
        timestamp: new Date().toISOString()
      };
      const docRef = await addDoc(collection(db, 'chatMessages'), messageData);
      return { id: docRef.id, ...messageData };
    } catch (error) {
      console.error('Error sending chat message:', error);
      throw error;
    }
  };
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/Social.css`:

```````css
.social-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .social-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .social-nav {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .social-nav button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .social-nav button:hover {
    background-color: #45a049;
  }
  
  .social-main {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SupportChat.css`:

```````css
.support-chat {
    display: flex;
    flex-direction: column;
    height: 500px;
  }
  
  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    background-color: white;
    border-radius: 8px;
    margin-bottom: 1rem;
  }
  
  .message {
    margin-bottom: 1rem;
    padding: 0.5rem;
    border-radius: 8px;
    max-width: 70%;
  }
  
  .message.sent {
    background-color: #4CAF50;
    color: white;
    align-self: flex-end;
  }
  
  .message.received {
    background-color: #f1f1f1;
    align-self: flex-start;
  }
  
  .chat-input {
    display: flex;
    gap: 1rem;
  }
  
  .chat-input input {
    flex: 1;
    padding: 0.5rem;
  }
  
  .chat-input button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SocialProfile.js`:

```````js
import React, { useState } from 'react';
import './SocialProfile.css';

const SocialProfile = ({ userData, onDataUpdate }) => {
  const [editMode, setEditMode] = useState(false);
  const [editedProfile, setEditedProfile] = useState({
    name: userData.name,
    bio: userData.bio,
    interests: userData.interests,
  });

  const handleEditToggle = () => {
    setEditMode(!editMode);
    if (!editMode) {
      setEditedProfile({
        name: userData.name,
        bio: userData.bio,
        interests: userData.interests,
      });
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditedProfile({ ...editedProfile, [name]: value });
  };

  const handleSaveProfile = async () => {
    try {
      await onDataUpdate(editedProfile);
      setEditMode(false);
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };

  return (
    <div className="social-profile">
      <h2>Social Profile</h2>
      {editMode ? (
        <div className="edit-profile">
          <input
            type="text"
            name="name"
            value={editedProfile.name}
            onChange={handleInputChange}
            placeholder="Your Name"
          />
          <textarea
            name="bio"
            value={editedProfile.bio}
            onChange={handleInputChange}
            placeholder="About You"
          />
          <input
            type="text"
            name="interests"
            value={editedProfile.interests}
            onChange={handleInputChange}
            placeholder="Your Interests (comma-separated)"
          />
          <button onClick={handleSaveProfile}>Save Profile</button>
          <button onClick={handleEditToggle}>Cancel</button>
        </div>
      ) : (
        <div className="view-profile">
          <h3>{userData.name}</h3>
          <p>{userData.bio}</p>
          <p>Interests: {userData.interests.join(', ')}</p>
          <button onClick={handleEditToggle}>Edit Profile</button>
        </div>
      )}
    </div>
  );
};

export default SocialProfile;
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/PeerConnections.js`:

```````js
import React, { useState, useEffect } from 'react';
import { fetchPeerSuggestions, sendConnectionRequest } from './socialService';
import './PeerConnections.css';

const PeerConnections = ({ userData, onDataUpdate }) => {
  const [peerSuggestions, setPeerSuggestions] = useState([]);

  useEffect(() => {
    const loadPeerSuggestions = async () => {
      const suggestions = await fetchPeerSuggestions(userData.id);
      setPeerSuggestions(suggestions);
    };
    loadPeerSuggestions();
  }, [userData.id]);

  const handleSendRequest = async (peerId) => {
    try {
      await sendConnectionRequest(userData.id, peerId);
      onDataUpdate({ 
        sentRequests: [...userData.sentRequests, peerId] 
      });
    } catch (error) {
      console.error('Error sending connection request:', error);
    }
  };

  return (
    <div className="peer-connections">
      <h2>Peer Connections</h2>
      <div className="peer-suggestions">
        <h3>Suggested Peers</h3>
        {peerSuggestions.map(peer => (
          <div key={peer.id} className="peer-item">
            <h4>{peer.name}</h4>
            <p>{peer.bio}</p>
            {userData.connections.includes(peer.id) ? (
              <button disabled>Connected</button>
            ) : userData.sentRequests.includes(peer.id) ? (
              <button disabled>Request Sent</button>
            ) : (
              <button onClick={() => handleSendRequest(peer.id)}>Connect</button>
            )}
          </div>
        ))}
      </div>
      <div className="current-connections">
        <h3>Your Connections</h3>
        {userData.connections.map(connectionId => (
          <div key={connectionId} className="connection-item">
            {/* Display connection information */}
          </div>
        ))}
      </div>
    </div>
  );
};

export default PeerConnections;
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/SupportChat.js`:

```````js
import React, { useState, useEffect, useRef } from 'react';
import { fetchChatMessages, sendChatMessage } from './socialService';
import './SupportChat.css';

const SupportChat = ({ userData }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const chatEndRef = useRef(null);

  useEffect(() => {
    const loadMessages = async () => {
      const fetchedMessages = await fetchChatMessages();
      setMessages(fetchedMessages);
    };
    loadMessages();
    // Set up real-time listener for new messages here
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = async () => {
    if (newMessage.trim()) {
      try {
        const sentMessage = await sendChatMessage(userData.id, newMessage);
        setMessages([...messages, sentMessage]);
        setNewMessage('');
      } catch (error) {
        console.error('Error sending message:', error);
      }
    }
  };

  return (
    <div className="support-chat">
      <h2>Support Chat</h2>
      <div className="chat-messages">
        {messages.map(message => (
          <div key={message.id} className={`message ${message.userId === userData.id ? 'sent' : 'received'}`}>
            <p>{message.content}</p>
            <span>{new Date(message.timestamp).toLocaleTimeString()}</span>
          </div>
        ))}
        <div ref={chatEndRef} />
      </div>
      <div className="chat-input">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="Type your message..."
        />
        <button onClick={handleSendMessage}>Send</button>
      </div>
    </div>
  );
};

export default SupportChat;
```````

`/Users/charlesdeng/code/rintzai/src/components/Social/PeerConnections.css`:

```````css
.peer-connections {
    display: flex;
    gap: 2rem;
  }
  
  .peer-suggestions, .current-connections {
    flex: 1;
  }
  
  .peer-item, .connection-item {
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .peer-item button, .connection-item button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .peer-item button:disabled, .connection-item button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileActions.js`:

```````js
import React from 'react';
import './profileActions.css';

const ProfileActions = ({ editMode, onEdit, onSave, onCancel }) => {
  console.log('ProfileActions rendered');
  console.log('editMode:', editMode);

  return (
    <div className="profile-actions">
      {editMode ? (
        <>
          <button onClick={onSave} className="save-button">
            Save
          </button>
          <button onClick={onCancel} className="cancel-button">
            Cancel
          </button>
        
      ) : (
        <>
          <button onClick={onEdit} className="edit-button">
            Edit Profile
          </button>
          <button className="more-button">...</button>
        
      )}
    </div>
  );
};

export default ProfileActions;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/RecoveryGoals.js`:

```````js
import React, { useState } from 'react';
import './recoveryGoals.css';

const RecoveryGoals = ({ goals, onProfileUpdate }) => {
  const [newGoal, setNewGoal] = useState({ title: '', description: '', progress: 0 });

  const handleAddGoal = () => {
    if (newGoal.title) {
      const updatedGoals = [
        { id: Date.now(), ...newGoal },
        ...(goals || [])
      ];
      onProfileUpdate({ recoveryGoals: updatedGoals });
      setNewGoal({ title: '', description: '', progress: 0 });
    }
  };

  const handleUpdateProgress = (goalId, newProgress) => {
    const updatedGoals = goals.map(goal => 
      goal.id === goalId ? { ...goal, progress: newProgress } : goal
    );
    onProfileUpdate({ recoveryGoals: updatedGoals });
  };

  return (
    <div className="recovery-goals">
      <h2>My Recovery Goals</h2>
      <div className="add-goal">
        <input
          type="text"
          value={newGoal.title}
          onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}
          placeholder="Goal title"
        />
        <textarea
          value={newGoal.description}
          onChange={(e) => setNewGoal({ ...newGoal, description: e.target.value })}
          placeholder="Goal description"
        />
        <button onClick={handleAddGoal}>Add Goal</button>
      </div>
      {goals && goals.length > 0 ? (
        <ul className="goals-list">
          {goals.map((goal) => (
            <li key={goal.id} className="goal-item">
              <h3>{goal.title}</h3>
              <p>{goal.description}</p>
              <input
                type="range"
                min="0"
                max="100"
                value={goal.progress}
                onChange={(e) => handleUpdateProgress(goal.id, parseInt(e.target.value))}
              />
              <span className="goal-progress">{goal.progress}% Complete</span>
            </li>
          ))}
        </ul>
      ) : (
        <p>No recovery goals set. Start setting goals to track your progress!</p>
      )}
    </div>
  );
};

export default RecoveryGoals;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/moodOverview.css`:

```````css
.mood-overview {
    background-color: var(--color-background-secondary);
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  }
  
  .mood-overview h3 {
    font-size: 20px;
    color: var(--color-text-primary);
    margin-bottom: 20px;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/therapyNotes.css`:

```````css
.therapy-notes {
    padding: 20px;
  }
  
  .therapy-notes h2 {
    color: var(--color-primary);
    font-size: 24px;
    margin-bottom: 20px;
    border-bottom: 2px solid var(--color-primary-light);
    padding-bottom: 10px;
  }
  
  .notes-list {
    list-style-type: none;
    padding: 0;
  }
  
  .note-item {
    background-color: var(--color-background-tertiary);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    transition: transform 0.3s ease;
    position: relative;
  }
  
  .note-item::before {
    content: '';
    position: absolute;
    top: -10px;
    left: 20px;
    width: 20px;
    height: 20px;
    background-color: var(--color-background-tertiary);
    transform: rotate(45deg);
  }
  
  .note-item:hover {
    transform: scale(1.02);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }
  
  .note-item h3 {
    color: var(--color-primary-dark);
    font-size: 20px;
    margin-bottom: 10px;
  }
  
  .note-item p {
    color: var(--color-text-primary);
    font-size: 16px;
    line-height: 1.6;
    margin-bottom: 10px;
  }
  
  .note-date {
    display: block;
    color: var(--color-text-secondary);
    font-size: 14px;
  }
  
  .add-note-button {
    background-color: var(--color-primary);
    color: var(--color-text-light);
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
  }
  
  .add-note-button:hover {
    background-color: var(--color-primary-dark);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/Profile.js`:

```````js
import React, { useState, useEffect } from 'react';
import './profile.css';
import ProfileHeader from './ProfileHeader';
import ProfileNavigation from './ProfileNavigation';
import ProfileContent from './ProfileContent';
import ProfileSidebar from './ProfileSidebar';
import { useUserContext } from '../User/UserContext';
import { fetchUserProfile, fetchUserMoodEntries, updateUserProfile } from './profileService';
import LoadingSpinner from '../LoadingSpinner';
import Navbar from '../Routes/Navbar';
import { db } from '../../firebase/firebase';

const Profile = () => {
  const { user } = useUserContext();
  const [activeTab, setActiveTab] = useState('Journey');
  const [profile, setProfile] = useState(null);
  const [moodEntries, setMoodEntries] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [editMode, setEditMode] = useState(false);

  useEffect(() => {
    console.log('Profile component mounted');
    const loadProfileData = async () => {
      if (user && user.uid) {
        console.log('Fetching profile data for user:', user.uid);
        try {
          const profileData = await fetchUserProfile(user.uid);
          setProfile(profileData);
          console.log('Profile data fetched:', profileData);

          const moodData = await fetchUserMoodEntries(user.uid);
          setMoodEntries(moodData);
          console.log('Mood entries fetched:', moodData);
        } catch (error) {
          console.error('Error fetching profile data:', error);
        } finally {
          setIsLoading(false);
        }
      } else {
        console.log('User not logged in or user ID not available');
        setIsLoading(false);
      }
    };

    loadProfileData();

    return () => {
      console.log('Profile component unmounted');
    };
  }, [user]);

  const handleProfileUpdate = async (updatedProfile) => {
    console.log('Updating profile:', updatedProfile);
    try {
      const updated = await updateUserProfile(user.uid, updatedProfile);
      setProfile(updated);
      console.log('Profile updated successfully');
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };

  const handleFieldChange = (field, value) => {
    setProfile(prevProfile => ({
      ...prevProfile,
      [field]: value
    }));
  };

  const handleEditToggle = () => {
    if (editMode) {
      handleProfileUpdate(profile);
    }
    setEditMode(!editMode);
  };

  if (isLoading) {
    return <LoadingSpinner />;
  }

  if (!user || !profile) {
    return <div>Please log in to view your profile.</div>;
  }

  const latestMood = moodEntries.length > 0 ? moodEntries[moodEntries.length - 1].mood : null;

  return (
    
      <div className="profile-container">
        <ProfileHeader
          profile={profile}
          latestMood={latestMood}
          isOwnProfile={true}
          onProfileUpdate={handleProfileUpdate}
          editMode={editMode}
          onEditToggle={handleEditToggle}
          onFieldChange={handleFieldChange}
        />
        <div className="profile-content">
          <ProfileSidebar 
            profile={profile} 
            editMode={editMode}
            onFieldChange={handleFieldChange}
          />
          <div className="profile-main">
            <ProfileNavigation activeTab={activeTab} setActiveTab={setActiveTab} />
            <ProfileContent 
              profile={profile} 
              activeTab={activeTab} 
              moodEntries={moodEntries}
              onProfileUpdate={handleProfileUpdate}
              editMode={editMode}
              onFieldChange={handleFieldChange}
            />
          </div>
        </div>
      </div>
    
  );
};

export default Profile;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/MoodIndicator.js`:

```````js
import React from 'react';
import './moodIndicator.css';

const MoodIndicator = ({ mood }) => {
  if (!mood) return null;

  return (
    <div className="mood-indicator">
      <span className="mood-label">Current Mood:</span>
      <span className={`mood-value ${mood.toLowerCase()}`}>{mood}</span>
    </div>
  );
};

export default MoodIndicator;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/Milestones.js`:

```````js
import React, { useState } from 'react';
import './milestones.css';

const Milestones = ({ milestones, onProfileUpdate }) => {
  const [newMilestone, setNewMilestone] = useState({ title: '', date: '' });

  const handleAddMilestone = () => {
    if (newMilestone.title && newMilestone.date) {
      const updatedMilestones = [
        { id: Date.now(), ...newMilestone },
        ...(milestones || [])
      ];
      onProfileUpdate({ milestones: updatedMilestones });
      setNewMilestone({ title: '', date: '' });
    }
  };

  return (
    <div className="milestones">
      <h2>My Milestones</h2>
      <div className="add-milestone">
        <input
          type="text"
          value={newMilestone.title}
          onChange={(e) => setNewMilestone({ ...newMilestone, title: e.target.value })}
          placeholder="Milestone title"
        />
        <input
          type="date"
          value={newMilestone.date}
          onChange={(e) => setNewMilestone({ ...newMilestone, date: e.target.value })}
        />
        <button onClick={handleAddMilestone}>Add Milestone</button>
      </div>
      {milestones && milestones.length > 0 ? (
        <ul className="milestones-list">
          {milestones.map((milestone) => (
            <li key={milestone.id} className="milestone-item">
              <div className="milestone-icon">{/* Add appropriate icon */}</div>
              <div className="milestone-info">
                <h3>{milestone.title}</h3>
                <span className="milestone-date">{milestone.date}</span>
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <p>No milestones recorded yet. Celebrate your progress by adding milestones!</p>
      )}
    </div>
  );
};

export default Milestones;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/TherapyNotes.js`:

```````js
import React, { useState } from 'react';
import './therapyNotes.css';

const TherapyNotes = ({ notes, onProfileUpdate }) => {
  const [newNote, setNewNote] = useState({ title: '', content: '' });

  const handleAddNote = () => {
    if (newNote.title && newNote.content) {
      const updatedNotes = [
        { id: Date.now(), ...newNote, date: new Date().toISOString() },
        ...(notes || [])
      ];
      onProfileUpdate({ therapyNotes: updatedNotes });
      setNewNote({ title: '', content: '' });
    }
  };

  return (
    <div className="therapy-notes">
      <h2>My Therapy Notes</h2>
      <div className="add-note">
        <input
          type="text"
          value={newNote.title}
          onChange={(e) => setNewNote({ ...newNote, title: e.target.value })}
          placeholder="Note title"
        />
        <textarea
          value={newNote.content}
          onChange={(e) => setNewNote({ ...newNote, content: e.target.value })}
          placeholder="Note content"
        />
        <button onClick={handleAddNote}>Add Note</button>
      </div>
      {notes && notes.length > 0 ? (
        <ul className="notes-list">
          {notes.map((note) => (
            <li key={note.id} className="note-item">
              <h3>{note.title}</h3>
              <p>{note.content}</p>
              <span className="note-date">{new Date(note.date).toLocaleDateString()}</span>
            </li>
          ))}
        </ul>
      ) : (
        <p>No therapy notes recorded. Use this space to reflect on your therapy sessions!</p>
      )}
    </div>
  );
};

export default TherapyNotes;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileFriends.css`:

```````css
.profile-friends {
  margin-top: 2rem;
}

.section-title {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 1rem;
}

.friend-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

.friend-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--color-background-secondary);
  padding: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.friend-item:hover {
  transform: translateY(-5px);
}

.friend-avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  object-fit: cover;
  margin-bottom: 1rem;
}

.friend-details {
  text-align: center;
}

.friend-name {
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--color-text-primary);
  margin-bottom: 0.5rem;
}

.remove-friend-button {
  background-color: var(--color-danger);
  color: var(--color-text-light);
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.remove-friend-button:hover {
  background-color: var(--color-danger-dark);
}

.no-friends {
  font-size: 1.2rem;
  color: var(--color-text-secondary);
  text-align: center;
  font-style: italic;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/MessageModal.js`:

```````js
import React, { useState } from 'react';
import './messageModal.css';
import { sendMessage } from '../../firebase/messageServices';
import { useUserContext } from '../User/UserContext';

const MessageModal = ({ recipientId, recipientName, onClose }) => {
  const [message, setMessage] = useState('');
  const { user } = useUserContext();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await sendMessage(user.uid, recipientId, message);
      onClose();
      // Show success message to user
    } catch (error) {
      console.error('Error sending message:', error);
      // Show error message to user
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>Send Message to {recipientName}</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="message">Message</label>
            <textarea
              id="message"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              required
            ></textarea>
          </div>
          <div className="modal-actions">
            <button type="submit" className="send-button">Send Message</button>
            <button type="button" className="cancel-button" onClick={onClose}>Cancel</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default MessageModal;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileNavigation.js`:

```````js
import React from 'react';
import './profileNavigation.css';

const ProfileNavigation = ({ activeTab, setActiveTab }) => {
  const tabs = ['Journey', 'Support Network', 'Milestones', 'Recovery Goals', 'Therapy Notes', 'Mood Overview'];

  return (
    <nav className="profile-navigation">
      {tabs.map((tab) => (
        <button
          key={tab}
          className={`nav-item ${activeTab === tab ? 'active' : ''}`}
          onClick={() => setActiveTab(tab)}
        >
          {tab}
        </button>
      ))}
    </nav>
  );
};

export default ProfileNavigation;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileHeader.js`:

```````js
import React, { useState, useRef } from 'react';
import './profileHeader.css';
import MoodIndicator from './MoodIndicator';
import EditProfileModal from './EditProfileModal';
import MessageModal from './MessageModal';
import { useUserContext } from '../User/UserContext';
import { updateFriendStatus, supportUser, uploadAvatar } from './profileService';
import defaultAvatar from '../../assets/default-avatar.png';

const ProfileHeader = ({ profile, latestMood, isOwnProfile, onProfileUpdate, editMode, onEditToggle, onFieldChange }) => {
  const { user } = useUserContext();
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isMessageModalOpen, setIsMessageModalOpen] = useState(false);
  const [error, setError] = useState(null);
  const fileInputRef = useRef(null);

  console.log('Rendering ProfileHeader', { profile, latestMood, isOwnProfile });

  if (!profile) {
    console.log('Profile data not available');
    return <div className="profile-header">Loading profile...</div>;
  }

  const handleEditProfile = () => {
    console.log('Opening edit profile modal');
    setIsEditModalOpen(true);
  };

  const handleCloseEditModal = () => {
    console.log('Closing edit profile modal');
    setIsEditModalOpen(false);
  };

  const handleMessage = () => {
    console.log('Opening message modal');
    setIsMessageModalOpen(true);
  };

  const handleCloseMessageModal = () => {
    console.log('Closing message modal');
    setIsMessageModalOpen(false);
  };

  const handleAddFriend = async () => {
    console.log('Adding friend:', profile.id);
    try {
      await updateFriendStatus(user.uid, profile.id, 'pending');
      setError(null);
      console.log('Friend request sent successfully');
    } catch (error) {
      console.error('Error adding friend:', error);
      setError('Failed to add friend. Please try again.');
    }
  };

  const handleSupport = async () => {
    console.log('Supporting user:', profile.id);
    try {
      await supportUser(user.uid, profile.id);
      setError(null);
      console.log('User supported successfully');
    } catch (error) {
      console.error('Error supporting user:', error);
      setError('Failed to support user. Please try again.');
    }
  };

  const handleAvatarDoubleClick = () => {
    if (isOwnProfile && editMode) {
      fileInputRef.current.click();
    }
  };

  const handleAvatarChange = async (event) => {
    const file = event.target.files[0];
    if (file) {
      try {
        const avatarUrl = await uploadAvatar(user.uid, file);
        onFieldChange('avatarUrl', avatarUrl);
      } catch (error) {
        console.error('Error uploading avatar:', error);
        setError('Failed to upload avatar. Please try again.');
      }
    }
  };

  return (
    <div className="profile-header">
      <div className="header-content">
        <div className="avatar" onDoubleClick={handleAvatarDoubleClick}>
          <img 
            src={profile.avatarUrl || defaultAvatar} 
            alt={`${profile.name}'s avatar`} 
            onError={(e) => {
              console.log('Error loading avatar, using default');
              e.target.onerror = null; 
              e.target.src = defaultAvatar;
            }}
          />
          {isOwnProfile && editMode && (
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleAvatarChange}
              accept="image/*"
              style={{ display: 'none' }}
            />
          )}
        </div>
        <div className="profile-info">
          {editMode ? (
            <>
              <input
                type="text"
                value={profile.name || ''}
                onChange={(e) => onFieldChange('name', e.target.value)}
                placeholder="Enter your name"
                className="name-input"
              />
              <input
                type="text"
                value={profile.tagline || ''}
                onChange={(e) => onFieldChange('tagline', e.target.value)}
                placeholder="Enter your tagline"
                className="tagline-input"
              />
            </>
          ) : (
            <>
              <h2 className="profile-name">{profile.name || 'Anonymous User'}</h2>
              <p className="profile-tagline">{profile.tagline || 'No tagline set'}</p>
            </>
          )}
          <MoodIndicator mood={latestMood} />
        </div>
      </div>
      <div className="profile-stats">
        <div className="stat">
          {editMode ? (
            <input
              type="number"
              value={profile.daysClean || 0}
              onChange={(e) => onFieldChange('daysClean', parseInt(e.target.value))}
              className="stat-input"
            />
          ) : (
            <span className="stat-value">{profile.daysClean || 0}</span>
          )}
          <span className="stat-label">Days Clean</span>
        </div>
        <div className="stat">
          <span className="stat-value">{profile.supportNetwork?.length || 0}</span>
          <span className="stat-label">Supporters</span>
        </div>
        <div className="stat">
          <span className="stat-value">{profile.milestones?.length || 0}</span>
          <span className="stat-label">Milestones</span>
        </div>
      </div>
      <div className="profile-actions">
        {isOwnProfile ? (
          <>
            <button className="action-button" onClick={handleEditProfile}>Edit Profile</button>
            <button className="action-button" onClick={onEditToggle}>
              {editMode ? 'Save Changes' : 'Edit Profile'}
            </button>
          </>
        ) : (
          <>
            <button className="action-button" onClick={handleMessage}>Message</button>
            <button className="action-button" onClick={handleAddFriend}>Add Friend</button>
            <button className="action-button" onClick={handleSupport}>Support</button>
          </>
        )}
      </div>
      {error && <p className="error-message">{error}</p>}
      {isEditModalOpen && (
        <EditProfileModal
          profile={profile}
          onClose={handleCloseEditModal}
          onProfileUpdate={onProfileUpdate}
        />
      )}
      {isMessageModalOpen && (
        <MessageModal
          recipientId={profile.id}
          recipientName={profile.name}
          onClose={handleCloseMessageModal}
        />
      )}
    </div>
  );
};

export default ProfileHeader;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileMentalHealth.css`:

```````css
.profile-mental-health {
  grid-column: 1 / -1;
  margin-top: 2rem;
}

.mental-health-text,
.diagnoses-text,
.treatments-text,
.medications-text {
  font-size: 1.2rem;
  line-height: 1.6;
  color: var(--color-text-primary);
  margin-bottom: 1rem;
}

.mental-health-input,
.diagnoses-input,
.treatments-input,
.medications-input {
  width: 100%;
  padding: 1rem;
  font-size: 1.2rem;
  line-height: 1.6;
  border: 1px solid var(--color-border);
  border-radius: 8px;
  outline: none;
  transition: border-color 0.3s ease;
}

.mental-health-input:focus,
.diagnoses-input:focus,
.treatments-input:focus,
.medications-input:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px var(--color-primary-light);
}

.profile-section {
  margin-top: 2rem;
}

.subsection-title {
  font-size: 1.3rem;
  font-weight: bold;
  margin-bottom: 1rem;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/SupportNetwork.js`:

```````js
import React from 'react';
import './supportNetwork.css';

const SupportNetwork = ({ network, onProfileUpdate }) => {
  const handleRemoveSupporter = (supporterId) => {
    const updatedNetwork = network.filter(id => id !== supporterId);
    onProfileUpdate({ supportNetwork: updatedNetwork });
  };

  return (
    <div className="support-network">
      <h2>My Support Network</h2>
      {network && network.length > 0 ? (
        <ul className="network-list">
          {network.map((supporterId) => (
            <li key={supporterId} className="supporter-item">
              <span>{supporterId}</span>
              <button onClick={() => handleRemoveSupporter(supporterId)}>Remove</button>
            </li>
          ))}
        </ul>
      ) : (
        <p>Your support network is empty. Add people who support your recovery journey!</p>
      )}
    </div>
  );
};

export default SupportNetwork;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileFriends.js`:

```````js
import React from 'react';
import './profileFriends.css';

const ProfileFriends = ({ friends }) => {
  console.log('ProfileFriends rendered');
  console.log('friends:', friends);

  return (
    <div className="profile-friends">
      <h2 className="section-title">Friends</h2>
      {friends && friends.length > 0 ? (
        <ul className="friend-list">
          {friends.map((friend) => (
            <li key={friend.id} className="friend-item">
              <img src={friend.avatarUrl} alt={`${friend.name}'s avatar`} className="friend-avatar" />
              <div className="friend-details">
                <p className="friend-name">{friend.name}</p>
                <button className="remove-friend-button">Remove Friend</button>
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <p className="no-friends">No friends added yet.</p>
      )}
    </div>
  );
};

export default ProfileFriends;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/messageModal.css`:

```````css
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modal-content {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
  }
  
  .form-group textarea {
    width: 100%;
    height: 150px;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .send-button,
  .cancel-button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .send-button {
    background-color: var(--color-primary);
    color: white;
  }
  
  .cancel-button {
    background-color: #ccc;
    color: black;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileEducationWork.js`:

```````js
import React from 'react';
import './profileEducationWork.css';

const ProfileEducationWork = ({ profile, editMode, onFieldChange }) => {
  return (
    <div className="profile-education-work">
      <h3 className="section-title">Education &amp; Work</h3>
      <div className="profile-section">
        <h4 className="subsection-title">Occupation</h4>
        {editMode ? (
          <input
            type="text"
            value={profile.occupation}
            onChange={(e) => onFieldChange('occupation', e.target.value)}
            className="occupation-input"
            placeholder="Enter your occupation"
          />
        ) : (
          <p className="occupation-text">{profile.occupation || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h4 className="subsection-title">Education</h4>
        {editMode ? (
          <input
            type="text"
            value={profile.education}
            onChange={(e) => onFieldChange('education', e.target.value)}
            className="education-input"
            placeholder="Enter your education"
          />
        ) : (
          <p className="education-text">{profile.education || 'N/A'}</p>
        )}
      </div>
    </div>
  );
};

export default ProfileEducationWork;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileInterests.css`:

```````css
.profile-interests {
  grid-column: 1 / 2;
  margin-top: 2rem;
}

.favorite-quotes-list {
  list-style-type: none;
  padding: 0;
}

.favorite-quote {
  font-size: 1.2rem;
  font-style: italic;
  color: var(--color-text-secondary);
  margin-bottom: 1rem;
}

.favorite-quotes-input,
.hobbies-input {
  width: 100%;
  padding: 1rem;
  font-size: 1.2rem;
  line-height: 1.6;
  border: 1px solid var(--color-border);
  border-radius: 8px;
  outline: none;
  transition: border-color 0.3s ease;
}

.favorite-quotes-input:focus,
.hobbies-input:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px var(--color-primary-light);
}

.hobbies-text {
  font-size: 1.2rem;
  color: var(--color-text-primary);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileEducationWork.css`:

```````css
.profile-education-work {
  grid-column: 2 / 3;
  margin-top: 2rem;
}

.occupation-text,
.education-text {
  font-size: 1.2rem;
  color: var(--color-text-primary);
}

.occupation-input,
.education-input {
  width: 100%;
  padding: 1rem;
  font-size: 1.2rem;
  line-height: 1.6;
  border: 1px solid var(--color-border);
  border-radius: 8px;
  outline: none;
  transition: border-color 0.3s ease;
}

.occupation-input:focus,
.education-input:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px var(--color-primary-light);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileSidebar.js`:

```````js
import React from 'react';
import './profileSidebar.css';

const ProfileSidebar = ({ profile, editMode, onFieldChange }) => {
  console.log('Rendering ProfileSidebar with profile:', profile);

  if (!profile) {
    console.log('Profile is null, rendering loading state');
    return <aside className="profile-sidebar">Loading profile...</aside>;
  }

  return (
    <aside className="profile-sidebar">
      <section className="sidebar-section">
        <h3>About Me</h3>
        {editMode ? (
          <textarea
            value={profile.about || ''}
            onChange={(e) => onFieldChange('about', e.target.value)}
            className="about-input"
            placeholder="Tell us about yourself..."
          />
        ) : (
          <p>{profile.about || 'No information provided'}</p>
        )}
      </section>
      <section className="sidebar-section">
        <h3>Recovery Focus</h3>
        {editMode ? (
          <textarea
            value={profile.recoveryFocus ? profile.recoveryFocus.join('\n') : ''}
            onChange={(e) => onFieldChange('recoveryFocus', e.target.value.split('\n').filter(item => item.trim() !== ''))}
            className="recovery-focus-input"
            placeholder="Enter recovery focus areas..."
          />
        ) : (
          <ul>
            {(profile.recoveryFocus || []).map((focus, index) => (
              <li key={index}>{focus}</li>
            ))}
          </ul>
        )}
        {(!profile.recoveryFocus || profile.recoveryFocus.length === 0) && <p>No recovery focus set</p>}
      </section>
      <section className="sidebar-section">
        <h3>Coping Strategies</h3>
        {editMode ? (
          <textarea
            value={profile.copingStrategies ? profile.copingStrategies.join('\n') : ''}
            onChange={(e) => onFieldChange('copingStrategies', e.target.value.split('\n').filter(item => item.trim() !== ''))}
            className="coping-strategies-input"
            placeholder="Enter coping strategies..."
          />
        ) : (
          <ul>
            {(profile.copingStrategies || []).map((strategy, index) => (
              <li key={index}>{strategy}</li>
            ))}
          </ul>
        )}
        {(!profile.copingStrategies || profile.copingStrategies.length === 0) && <p>No coping strategies set</p>}
      </section>
      <section className="sidebar-section">
        <h3>Interests</h3>
        {editMode ? (
          <div className="interests-edit">
            <input
              type="text"
              value={profile.interests ? profile.interests.join(', ') : ''}
              onChange={(e) => onFieldChange('interests', e.target.value.split(',').map(item => item.trim()))}
              className="interests-input"
              placeholder="Enter interests, separated by commas"
            />
          </div>
        ) : (
          <div className="interests-tags">
            {(profile.interests || []).map((interest, index) => (
              <span key={index} className="interest-tag">
                {interest}
              </span>
            ))}
          </div>
        )}
        {(!profile.interests || profile.interests.length === 0) && <p>No interests set</p>}
      </section>
    </aside>
  );
};

export default ProfileSidebar;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/JourneyPosts.js`:

```````js
import React, { useState } from 'react';
import './journeyPosts.css';

const JourneyPosts = ({ posts, onProfileUpdate }) => {
  const [newPost, setNewPost] = useState('');

  const handleAddPost = () => {
    if (newPost.trim()) {
      const updatedPosts = [
        { id: Date.now(), content: newPost, date: new Date().toISOString() },
        ...(posts || [])
      ];
      onProfileUpdate({ journeyPosts: updatedPosts });
      setNewPost('');
    }
  };

  return (
    <div className="journey-posts">
      <h2>My Recovery Journey</h2>
      <div className="add-post">
        <textarea
          value={newPost}
          onChange={(e) => setNewPost(e.target.value)}
          placeholder="Share your journey..."
        />
        <button onClick={handleAddPost}>Add Post</button>
      </div>
      {posts && posts.length > 0 ? (
        <ul className="posts-list">
          {posts.map((post) => (
            <li key={post.id} className="post-item">
              <p>{post.content}</p>
              <span className="post-date">{new Date(post.date).toLocaleDateString()}</span>
              </li>
          ))}
        </ul>
      ) : (
        <p>No journey posts yet. Start sharing your experiences!</p>
      )}
    </div>
  );
};

export default JourneyPosts;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/milestones.css`:

```````css
.milestones {
    padding: 20px;
  }
  
  .milestones h2 {
    color: var(--color-primary);
    font-size: 24px;
    margin-bottom: 20px;
    border-bottom: 2px solid var(--color-primary-light);
    padding-bottom: 10px;
  }
  
  .milestones-list {
    list-style-type: none;
    padding: 0;
  }
  
  .milestone-item {
    display: flex;
    align-items: center;
    background-color: var(--color-background-tertiary);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    transition: transform 0.3s ease;
  }
  
  .milestone-item:hover {
    transform: translateX(5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }
  
  .milestone-icon {
    background-color: var(--color-primary);
    color: var(--color-text-light);
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    margin-right: 20px;
  }
  
  .milestone-info {
    flex: 1;
  }
  
  .milestone-info h3 {
    color: var(--color-primary-dark);
    font-size: 20px;
    margin-bottom: 5px;
  }
  
  .milestone-info p {
    color: var(--color-text-primary);
    font-size: 16px;
    margin-bottom: 5px;
  }
  
  .milestone-date {
    color: var(--color-text-secondary);
    font-size: 14px;
  }
  
  .add-milestone-button {
    background-color: var(--color-primary);
    color: var(--color-text-light);
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
  }
  
  .add-milestone-button:hover {
    background-color: var(--color-primary-dark);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileService.js`:

```````js
import { doc, getDoc, collection, query, where, getDocs, updateDoc, arrayUnion } from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db } from '../../firebase/firebase';

export const fetchUserProfile = async (userId) => {
  console.log('Fetching user profile for:', userId);
  const profileRef = doc(db, 'users', userId);
  const profileDoc = await getDoc(profileRef);

  if (profileDoc.exists()) {
    console.log('Profile found:', profileDoc.data());
    return profileDoc.data();
  } else {
    console.log('Profile not found for user:', userId);
    return null;
  }
};

export const fetchUserMoodEntries = async (userId) => {
  console.log('Fetching mood entries for user:', userId);
  const moodRef = collection(db, 'moodEntries');
  const q = query(moodRef, where('userId', '==', userId));
  const querySnapshot = await getDocs(q);
  const entries = querySnapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  }));
  console.log('Mood entries fetched:', entries);
  return entries;
};

export const updateUserProfile = async (userId, profileData) => {
  console.log('Updating user profile:', userId, profileData);
  const userRef = doc(db, 'users', userId);
  await updateDoc(userRef, profileData);
  console.log('Profile updated successfully');
  const updatedDoc = await getDoc(userRef);
  return updatedDoc.data();
};

export const updateFriendStatus = async (userId, friendId, status) => {
  console.log('Updating friend status:', userId, friendId, status);
  const userRef = doc(db, 'users', userId);
  await updateDoc(userRef, {
    [`friends.${friendId}`]: status
  });
  console.log('Friend status updated successfully');
};

export const supportUser = async (supporterId, supportedId) => {
  console.log('Supporting user:', supporterId, supportedId);
  const supportedUserRef = doc(db, 'users', supportedId);
  await updateDoc(supportedUserRef, {
    supportNetwork: arrayUnion(supporterId)
  });
  console.log('User supported successfully');
};

export const uploadAvatar = async (userId, file) => {
  console.log('Uploading avatar for user:', userId);
  const storage = getStorage();
  const avatarRef = ref(storage, `avatars/${userId}`);
  await uploadBytes(avatarRef, file);
  const downloadURL = await getDownloadURL(avatarRef);
  console.log('Avatar uploaded successfully');
  return downloadURL;
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileSidebar.css`:

```````css
.profile-sidebar {
  width: 300px;
  background-color: var(--color-background-secondary);
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.sidebar-section {
  margin-bottom: 25px;
}

.sidebar-section h3 {
  font-size: 18px;
  color: var(--color-primary);
  margin-bottom: 10px;
  border-bottom: 2px solid var(--color-primary-light);
  padding-bottom: 5px;
}

.sidebar-section p, .sidebar-section ul {
  font-size: 14px;
  color: var(--color-text-secondary);
}

.sidebar-section ul {
  list-style-type: none;
  padding-left: 0;
}

.sidebar-section li {
  margin-bottom: 5px;
}

.interests-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
}

.interest-tag {
  background-color: var(--color-primary-light);
  color: var(--color-primary-dark);
  padding: 5px 10px;
  border-radius: 15px;
  font-size: 12px;
}

.about-input,
.recovery-focus-input,
.coping-strategies-input,
.interests-input {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid var(--color-border);
  border-radius: 5px;
  resize: vertical;
  min-height: 100px;
}

.interests-input {
  min-height: 50px;
}

.interests-edit {
  margin-top: 10px;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/messageServices.js`:

```````js
import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../firebase';

export const sendMessage = async (senderId, recipientId, content) => {
  await addDoc(collection(db, 'messages'), {
    senderId,
    recipientId,
    content,
    timestamp: serverTimestamp()
  });
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileAbout.js`:

```````js
import React from 'react';
import './profileAbout.css';

const ProfileAbout = ({ profile, editMode, onFieldChange }) => {
  return (
    <div className="profile-about">
      <h2 className="section-title">About</h2>
      {editMode ? (
        <textarea
          value={profile.about}
          onChange={(e) => onFieldChange('about', e.target.value)}
          className="about-input"
          placeholder="Write a short intro..."
        />
      ) : (
        <p className="about-text">{profile.about || 'No bio provided'}</p>
      )}
    </div>
  );
};

export default ProfileAbout;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/moodIndicator.css`:

```````css
.mood-indicator {
    display: flex;
    align-items: center;
    margin-top: 10px;
  }
  
  .mood-label {
    font-size: 14px;
    color: var(--color-text-secondary);
    margin-right: 10px;
  }
  
  .mood-value {
    font-size: 16px;
    font-weight: bold;
    padding: 5px 10px;
    border-radius: 15px;
  }
  
  .mood-value.happy { background-color: #FFD700; color: #000; }
  .mood-value.sad { background-color: #4169E1; color: #fff; }
  .mood-value.angry { background-color: #FF4500; color: #fff; }
  .mood-value.anxious { background-color: #9932CC; color: #fff; }
  .mood-value.neutral { background-color: #808080; color: #fff; }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profilePhotos.css`:

```````css
.profile-photos {
    margin-top: 2rem;
  }
  
  .section-title {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 1rem;
  }
  
  .photo-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
  }
  
  .photo-item {
    width: 100%;
    height: auto;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }
  
  .photo-item:hover {
    transform: scale(1.05);
  }
  
  .no-photos {
    font-size: 1.2rem;
    color: var(--color-text-secondary);
    text-align: center;
    font-style: italic;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfilePosts.js`:

```````js
import React from 'react';
import './profilePosts.css';

const ProfilePosts = ({ posts }) => {
  console.log('ProfilePosts rendered');
  console.log('posts:', posts);

  return (
    <div className="profile-posts">
      <h2 className="section-title">Posts</h2>
      {posts && posts.length > 0 ? (
        <ul className="post-list">
          {posts.map((post) => (
            <li key={post.id} className="post-item">
              <p className="post-content">{post.content}</p>
              <div className="post-actions">
                <button className="like-button">Like</button>
                <button className="comment-button">Comment</button>
                <button className="share-button">Share</button>
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <p className="no-posts">No posts available.</p>
      )}
    </div>
  );
};

export default ProfilePosts;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileSections.js`:

```````js
import React from 'react';
import './profileSection.css';

const ProfileSections = ({ profile, editMode, onFieldChange }) => {
  return (
    <div className="profile-sections">
      {/* ... */}
      <div className="profile-section">
        <h3 className="section-title">Gender</h3>
        {editMode ? (
          <select
            value={profile.gender}
            onChange={(e) => onFieldChange('gender', e.target.value)}
            className="section-content-input"
          >
            <option value="">Select gender</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </select>
        ) : (
          <p className="section-content">{profile.gender || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h3 className="section-title">Diagnoses</h3>
        {editMode ? (
          <input
            type="text"
            value={profile.diagnoses.join(', ')}
            onChange={(e) => onFieldChange('diagnoses', e.target.value.split(',').map((diagnosis) => diagnosis.trim()))}
            className="section-content-input"
            placeholder="Enter your diagnoses, separated by commas"
          />
        ) : (
          <p className="section-content">{profile.diagnoses.join(', ') || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h3 className="section-title">Treatments</h3>
        {editMode ? (
          <input
            type="text"
            value={profile.treatments.join(', ')}
            onChange={(e) => onFieldChange('treatments', e.target.value.split(',').map((treatment) => treatment.trim()))}
            className="section-content-input"
            placeholder="Enter your treatments, separated by commas"
          />
        ) : (
          <p className="section-content">{profile.treatments.join(', ') || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h3 className="section-title">Medications</h3>
        {editMode ? (
          <input
            type="text"
            value={profile.medications.join(', ')}
            onChange={(e) => onFieldChange('medications', e.target.value.split(',').map((medication) => medication.trim()))}
            className="section-content-input"
            placeholder="Enter your medications, separated by commas"
          />
        ) : (
          <p className="section-content">{profile.medications.join(', ') || 'N/A'}</p>
        )}
      </div>
    </div>
  );
};

export default ProfileSections;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/MoodOverview.js`:

```````js
import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import './moodOverview.css';

const MoodOverview = ({ moodEntries }) => {
  const chartData = moodEntries.map(entry => ({
    date: new Date(entry.date).toLocaleDateString(),
    intensity: entry.intensity,
    mood: entry.mood
  }));

  return (
    <div className="mood-overview">
      <h3>Mood Overview</h3>
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={chartData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="date" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Line type="monotone" dataKey="intensity" stroke="#8884d8" activeDot={{ r: 8 }} />
          <Line type="monotone" dataKey="mood" stroke="#82ca9d" />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
};

export default MoodOverview;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileFeed.js`:

```````js
import React, { useState, useEffect } from 'react';
import './profileFeed.css';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../firebase/firebase';
import { useUserContext } from '../User/UserContext';

const ProfileFeed = ({ profile }) => {
  const { user } = useUserContext();
  const [posts, setPosts] = useState([]);

  console.log('ProfileFeed rendered');
  console.log('user:', user);
  console.log('profile:', profile);

  useEffect(() => {
    const fetchUserPosts = async () => {
      if (user) {
        const postsRef = collection(db, 'posts');
        const q = query(postsRef, where('userId', '==', user.uid));
        const querySnapshot = await getDocs(q);
        const fetchedPosts = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setPosts(fetchedPosts);
      }
    };

    fetchUserPosts();
  }, [user]);

  return (
    <div className="profile-feed">
      <h3 className="section-title">Activity Feed</h3>
      {posts.length > 0 ? (
        <ul className="post-list">
          {posts.map((post) => (
            <li key={post.id} className="post-item">
              <p className="post-content">{post.content}</p>
              <div className="post-actions">
                <button className="like-button">Like</button>
                <button className="comment-button">Comment</button>
                <button className="share-button">Share</button>
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <p className="no-posts">No posts to display.</p>
      )}
    </div>
  );
};

export default ProfileFeed;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/editProfileModal.css`:

```````css
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modal-content {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
  }
  
  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .save-button,
  .cancel-button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .save-button {
    background-color: var(--color-primary);
    color: white;
  }
  
  .cancel-button {
    background-color: #ccc;
    color: black;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileGallery.css`:

```````css
.profile-gallery {
  grid-column: 1 / -1;
  margin-top: 2rem;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileActions.css`:

```````css
.profile-actions {
  display: flex;
  align-items: center;
}

.edit-button,
.save-button,
.cancel-button,
.more-button {
  background-color: var(--color-primary);
  color: var(--color-text-light);
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  font-size: 1.2rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-left: 1rem;
}

.edit-button:hover,
.save-button:hover,
.cancel-button:hover,
.more-button:hover {
  background-color: var(--color-primary-dark);
}

.cancel-button {
  background-color: var(--color-danger);
}

.cancel-button:hover {
  background-color: var(--color-danger-dark);
}

.more-button {
  background-color: var(--color-background-secondary);
  color: var(--color-text-primary);
}

.more-button:hover {
  background-color: var(--color-background-tertiary);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileDetails.css`:

```````css
.profile-details {
  grid-column: 1 / -1;
  margin-top: 2rem;
}

.subsection-title {
  font-size: 1.3rem;
  font-weight: bold;
  margin-bottom: 1rem;
}
.location-text,
.age-text,
.gender-text {
font-size: 1.2rem;
line-height: 1.6;
color: var(--color-text-primary);
}
.location-input,
.age-input,
.gender-input {
width: 100%;
padding: 1rem;
font-size: 1.2rem;
line-height: 1.6;
border: 1px solid var(--color-border);
border-radius: 8px;
outline: none;
transition: border-color 0.3s ease;
}
.location-input:focus,
.age-input:focus,
.gender-input:focus {
border-color: var(--color-primary);
box-shadow: 0 0 0 3px var(--color-primary-light);
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileGallery.js`:

```````js
import React from 'react';
import './profileGallery.css';

const ProfileGallery = () => {
  return (
    <div className="profile-gallery">
      <h3 className="section-title">Gallery</h3>
      {/* Add gallery component or placeholder */}
    </div>
  );
};

export default ProfileGallery;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/EditProfileModal.js`:

```````js
import React, { useState } from 'react';
import './editProfileModal.css';
import { updateUserProfile } from './profileService';

const EditProfileModal = ({ profile, onClose, onProfileUpdate }) => {
  const [name, setName] = useState(profile.name || '');
  const [tagline, setTagline] = useState(profile.tagline || '');
  const [avatarUrl, setAvatarUrl] = useState(profile.avatarUrl || '');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const updatedProfile = await updateUserProfile(profile.id, { name, tagline, avatarUrl });
      onProfileUpdate(updatedProfile);
      onClose();
      console.log('Profile updated successfully');
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>Edit Profile</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="name">Name</label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="tagline">Tagline</label>
            <input
              type="text"
              id="tagline"
              value={tagline}
              onChange={(e) => setTagline(e.target.value)}
            />
          </div>
          <div className="form-group">
            <label htmlFor="avatarUrl">Avatar URL</label>
            <input
              type="url"
              id="avatarUrl"
              value={avatarUrl}
              onChange={(e) => setAvatarUrl(e.target.value)}
            />
          </div>
          <div className="modal-actions">
            <button type="submit" className="save-button">Save Changes</button>
            <button type="button" className="cancel-button" onClick={onClose}>Cancel</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditProfileModal;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileNavigation.css`:

```````css
.profile-navigation {
    display: flex;
    background-color: var(--color-background-secondary);
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 20px;
  }
  
  .nav-item {
    flex: 1;
    padding: 15px;
    text-align: center;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 16px;
    color: var(--color-text-secondary);
    transition: all 0.3s ease;
  }
  
  .nav-item:hover {
    background-color: var(--color-background-tertiary);
  }
  
  .nav-item.active {
    background-color: var(--color-primary);
    color: var(--color-text-light);
    font-weight: bold;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileAbout.css`:

```````css
.profile-about {
  margin-top: 2rem;
}

.section-title {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 1rem;
}

.about-text {
  font-size: 1.2rem;
  line-height: 1.6;
  color: var(--color-text-primary);
}

.about-input {
  width: 100%;
  min-height: 120px;
  resize: vertical;
  padding: 1rem;
  font-size: 1.2rem;
  line-height: 1.6;
  border: 1px solid var(--color-border);
  border-radius: 8px;
  outline: none;
  transition: border-color 0.3s ease;
}

.about-input:focus {
  border-color: var(--color-primary);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileMentalHealth.js`:

```````js
import React from 'react';
import './profileMentalHealth.css';

const ProfileMentalHealth = ({ profile, editMode, onFieldChange }) => {
  return (
    <div className="profile-mental-health">
      <h3 className="section-title">Mental Health Journey</h3>
      {editMode ? (
        <textarea
          value={profile.mentalHealthJourney}
          onChange={(e) => onFieldChange('mentalHealthJourney', e.target.value)}
          className="mental-health-input"
          placeholder="Share your mental health journey"
        />
      ) : (
        <p className="mental-health-text">{profile.mentalHealthJourney || 'N/A'}</p>
      )}
      <div className="profile-section">
        <h4 className="subsection-title">Diagnoses</h4>
        {editMode ? (
          <input
            type="text"
            value={profile.diagnoses.join(', ')}
            onChange={(e) => onFieldChange('diagnoses', e.target.value.split(',').map((diagnosis) => diagnosis.trim()))}
            className="diagnoses-input"
            placeholder="Enter your diagnoses, separated by commas"
          />
        ) : (
          <p className="diagnoses-text">{profile.diagnoses.join(', ') || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h4 className="subsection-title">Treatments</h4>
        {editMode ? (
          <input
            type="text"
            value={profile.treatments.join(', ')}
            onChange={(e) => onFieldChange('treatments', e.target.value.split(',').map((treatment) => treatment.trim()))}
            className="treatments-input"
            placeholder="Enter your treatments, separated by commas"
          />
        ) : (
          <p className="treatments-text">{profile.treatments.join(', ') || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h4 className="subsection-title">Medications</h4>
        {editMode ? (
          <input
            type="text"
            value={profile.medications.join(', ')}
            onChange={(e) => onFieldChange('medications', e.target.value.split(',').map((medication) => medication.trim()))}
            className="medications-input"
            placeholder="Enter your medications, separated by commas"
          />
        ) : (
          <p className="medications-text">{profile.medications.join(', ') || 'N/A'}</p>
        )}
      </div>
    </div>
  );
};

export default ProfileMentalHealth;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileInterests.js`:

```````js
import React from 'react';
import './profileInterests.css';

const ProfileInterests = ({ profile, editMode, onFieldChange }) => {
  return (
    <div className="profile-interests">
      <h3 className="section-title">Interests</h3>
      <div className="profile-section">
        <h4 className="subsection-title">Favorite Quotes</h4>
        {editMode ? (
          <textarea
            value={profile.favoriteQuotes.join('\n')}
            onChange={(e) => onFieldChange('favoriteQuotes', e.target.value.split('\n'))}
            className="favorite-quotes-input"
            placeholder="Enter your favorite quotes, one per line"
          />
        ) : (
          <ul className="favorite-quotes-list">
            {profile.favoriteQuotes.map((quote, index) => (
              <li key={index} className="favorite-quote">
                {quote}
              </li>
            ))}
          </ul>
        )}
      </div>
      <div className="profile-section">
        <h4 className="subsection-title">Hobbies</h4>
        {editMode ? (
          <input
            type="text"
            value={profile.hobbies.join(', ')}
            onChange={(e) => onFieldChange('hobbies', e.target.value.split(',').map((hobby) => hobby.trim()))}
            className="hobbies-input"
            placeholder="Enter your hobbies, separated by commas"
          />
        ) : (
          <p className="hobbies-text">{profile.hobbies.join(', ') || 'N/A'}</p>
        )}
      </div>
    </div>
  );
};

export default ProfileInterests;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfilePhotos.js`:

```````js
import React from 'react';
import './profilePhotos.css';

const ProfilePhotos = ({ photos }) => {
  console.log('ProfilePhotos rendered');
  console.log('photos:', photos);

  return (
    <div className="profile-photos">
      <h2 className="section-title">Photos</h2>
      {photos && photos.length > 0 ? (
        <div className="photo-grid">
          {photos.map((photo) => (
            <img key={photo.id} src={photo.url} alt="Profile photo" className="photo-item" />
          ))}
        </div>
      ) : (
        <p className="no-photos">No photos available.</p>
      )}
    </div>
  );
};

export default ProfilePhotos;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileHeader.css`:

```````css
.profile-header {
  background-color: var(--color-background-secondary);
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  padding: 40px;
  margin-bottom: 30px;
}

.header-content {
  display: flex;
  align-items: center;
  margin-bottom: 30px;
}

.avatar {
  width: 200px;
  height: 200px;
  border-radius: 50%;
  overflow: hidden;
  border: 5px solid var(--color-primary);
  margin-right: 40px;
  flex-shrink: 0;
  position: relative;
}

.avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar::after {
  content: 'Double-click to change';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.avatar:hover::after {
  opacity: 1;
}

.name-input,
.tagline-input,
.stat-input {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid var(--color-border);
  border-radius: 5px;
  font-size: 16px;
}

.profile-info {
  flex: 1;
}

.profile-name {
  font-size: 36px;
  color: var(--color-text-primary);
  margin: 0 0 10px 0;
}

.profile-tagline {
  font-size: 18px;
  color: var(--color-text-secondary);
  margin: 0 0 15px 0;
}

.profile-stats {
  display: flex;
  justify-content: space-between;
  background-color: var(--color-background-tertiary);
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 30px;
}

.stat {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.stat-value {
  font-size: 28px;
  font-weight: bold;
  color: var(--color-primary);
}

.stat-label {
  font-size: 16px;
  color: var(--color-text-secondary);
  margin-top: 5px;
}

.profile-actions {
  display: flex;
  justify-content: center;
  gap: 20px;
}

.action-button {
  background-color: var(--color-primary);
  color: var(--color-text-light);
  border: none;
  padding: 12px 24px;
  border-radius: 25px;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.action-button:hover {
  background-color: var(--color-primary-dark);
  transform: translateY(-2px);
}

.error-message {
  color: var(--color-danger);
  text-align: center;
  margin-top: 10px;
}

@media (max-width: 768px) {
  .profile-header {
    padding: 30px;
  }

  .header-content {
    flex-direction: column;
    text-align: center;
  }

  .avatar {
    margin-right: 0;
    margin-bottom: 20px;
  }

  .profile-stats {
    flex-direction: column;
    align-items: center;
    gap: 20px;
  }

  .profile-actions {
    flex-direction: column;
    align-items: center;
  }

  .action-button {
    width: 100%;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileFeed.css`:

```````css
.profile-feed {
  grid-column: 1 / -1;
  margin-top: 2rem;
}

.post-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.post-item {
  background-color: var(--color-background-secondary);
  padding: 1rem;
  border-radius: 8px;
  margin-bottom: 1rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.post-content {
  font-size: 1.2rem;
  line-height: 1.6;
  color: var(--color-text-primary);
  margin-bottom: 1rem;
}

.post-actions {
  display: flex;
  justify-content: flex-end;
}

.like-button,
.comment-button,
.share-button {
  background-color: transparent;
  border: none;
  color: var(--color-primary);
  font-size: 1.2rem;
  cursor: pointer;
  margin-left: 1rem;
  transition: color 0.3s ease;
}

.like-button:hover,
.comment-button:hover,
.share-button:hover {
  color: var(--color-primary-dark);
}

.no-posts {
  font-size: 1.2rem;
  color: var(--color-text-secondary);
  text-align: center;
  font-style: italic;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileSection.css`:

```````css
.profile-section {
  margin-bottom: 2rem;
}

.section-title {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 1rem;
}

.section-content {
  font-size: 1.2rem;
  color: var(--color-text-primary);
}

.section-content-input {
  width: 100%;
  padding: 1rem;
  font-size: 1.2rem;
  line-height: 1.6;
  border: 1px solid var(--color-border);
  border-radius: 8px;
  outline: none;
  transition: border-color 0.3s ease;
}

.section-content-input:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px var(--color-primary-light);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/recoveryGoals.css`:

```````css
.recovery-goals {
    padding: 20px;
  }
  
  .recovery-goals h2 {
    color: var(--color-primary);
    font-size: 24px;
    margin-bottom: 20px;
    border-bottom: 2px solid var(--color-primary-light);
    padding-bottom: 10px;
  }
  
  .goals-list {
    list-style-type: none;
    padding: 0;
  }
  
  .goal-item {
    background-color: var(--color-background-tertiary);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    transition: transform 0.3s ease;
  }
  
  .goal-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }
  
  .goal-item h3 {
    color: var(--color-primary-dark);
    font-size: 20px;
    margin-bottom: 10px;
  }
  
  .goal-item p {
    color: var(--color-text-primary);
    font-size: 16px;
    margin-bottom: 15px;
  }
  
  .goal-item progress {
    width: 100%;
    height: 10px;
    border-radius: 5px;
    overflow: hidden;
  }
  
  .goal-item progress::-webkit-progress-bar {
    background-color: var(--color-background);
  }
  
  .goal-item progress::-webkit-progress-value {
    background-color: var(--color-primary);
  }
  
  .goal-progress {
    display: block;
    color: var(--color-text-secondary);
    font-size: 14px;
    margin-top: 5px;
  }
  
  .add-goal-button {
    background-color: var(--color-primary);
    color: var(--color-text-light);
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
  }
  
  .add-goal-button:hover {
    background-color: var(--color-primary-dark);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileContent.js`:

```````js
import React from 'react';
import './profileContent.css';
import JourneyPosts from './JourneyPosts';
import SupportNetwork from './SupportNetwork';
import Milestones from './Milestones';
import RecoveryGoals from './RecoveryGoals';
import TherapyNotes from './TherapyNotes';
import MoodOverview from './MoodOverview';

const ProfileContent = ({ profile, activeTab, moodEntries, onProfileUpdate, editMode, onFieldChange }) => {
  console.log('Rendering ProfileContent', { activeTab, profile });

  const renderContent = () => {
    switch (activeTab) {
      case 'Journey':
        return <JourneyPosts posts={profile.journeyPosts} onProfileUpdate={onProfileUpdate} editMode={editMode} onFieldChange={onFieldChange} />;
      case 'Support Network':
        return <SupportNetwork network={profile.supportNetwork} onProfileUpdate={onProfileUpdate} editMode={editMode} onFieldChange={onFieldChange} />;
      case 'Milestones':
        return <Milestones milestones={profile.milestones} onProfileUpdate={onProfileUpdate} editMode={editMode} onFieldChange={onFieldChange} />;
      case 'Recovery Goals':
        return <RecoveryGoals goals={profile.recoveryGoals} onProfileUpdate={onProfileUpdate} editMode={editMode} onFieldChange={onFieldChange} />;
      case 'Therapy Notes':
        return <TherapyNotes notes={profile.therapyNotes} onProfileUpdate={onProfileUpdate} editMode={editMode} onFieldChange={onFieldChange} />;
      case 'Mood Overview':
        return <MoodOverview moodEntries={moodEntries} editMode={editMode} onFieldChange={onFieldChange} />;
      default:
        console.log('Unknown tab selected:', activeTab);
        return null;
    }
  };

  return (
    <div className="profile-content-container">
      {renderContent()}
    </div>
  );
};

export default ProfileContent;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profile.css`:

```````css
:root {
  --color-primary: #5b86e5;
  --color-primary-dark: #36486b;
  --color-primary-light: #89b4ff;
  --color-secondary: #ff6b6b;
  --color-text-primary: #333;
  --color-text-secondary: #6c757d;
  --color-text-light: #fff;
  --color-background: #f0f4f8;
  --color-background-secondary: #fff;
  --color-background-tertiary: #e9ecef;
  --color-border: #dee2e6;
  --color-success: #4caf50;
  --color-warning: #ffc107;
  --color-danger: #dc3545;
}

.profile-container {
  display: flex;
  flex-direction: column;
  min-height: calc(100vh - 60px); /* Adjust for navbar height */
  background-color: var(--color-background);
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.profile-content {
  display: flex;
  gap: 2rem;
  margin-top: 2rem;
}

.profile-main {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.profile-content-container {
  background-color: var(--color-background-secondary);
  border-radius: 10px;
  padding: 2rem;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

@media (max-width: 768px) {
  .profile-content {
    flex-direction: column;
  }

  .profile-container {
    padding: 1rem;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/journeyPosts.css`:

```````css
.journey-posts {
    padding: 20px;
  }
  
  .journey-posts h2 {
    color: var(--color-primary);
    font-size: 24px;
    margin-bottom: 20px;
    border-bottom: 2px solid var(--color-primary-light);
    padding-bottom: 10px;
  }
  
  .posts-list {
    list-style-type: none;
    padding: 0;
  }
  
  .post-item {
    background-color: var(--color-background-tertiary);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    transition: transform 0.3s ease;
  }
  
  .post-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }
  
  .post-item h3 {
    color: var(--color-primary-dark);
    font-size: 20px;
    margin-bottom: 10px;
  }
  
  .post-item p {
    color: var(--color-text-primary);
    font-size: 16px;
    line-height: 1.6;
  }
  
  .post-date {
    display: block;
    color: var(--color-text-secondary);
    font-size: 14px;
    margin-top: 10px;
  }
  
  .add-post-button {
    background-color: var(--color-primary);
    color: var(--color-text-light);
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
  }
  
  .add-post-button:hover {
    background-color: var(--color-primary-dark);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/ProfileDetails.js`:

```````js
import React from 'react';
import './profileDetails.css';

const ProfileDetails = ({ profile, editMode, onFieldChange }) => {
  return (
    <div className="profile-details">
      <h3 className="section-title">Details</h3>
      <div className="profile-section">
        <h4 className="subsection-title">Location</h4>
        {editMode ? (
          <input
            type="text"
            value={profile.location}
            onChange={(e) => onFieldChange('location', e.target.value)}
            className="location-input"
            placeholder="Enter your location"
          />
        ) : (
          <p className="location-text">{profile.location || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h4 className="subsection-title">Age</h4>
        {editMode ? (
          <input
            type="number"
            value={profile.age}
            onChange={(e) => onFieldChange('age', parseInt(e.target.value))}
            className="age-input"
            placeholder="Enter your age"
          />
        ) : (
          <p className="age-text">{profile.age || 'N/A'}</p>
        )}
      </div>
      <div className="profile-section">
        <h4 className="subsection-title">Gender</h4>
        {editMode ? (
          <select
            value={profile.gender}
            onChange={(e) => onFieldChange('gender', e.target.value)}
            className="gender-input"
          >
            <option value="">Select gender</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </select>
        ) : (
          <p className="gender-text">{profile.gender || 'N/A'}</p>
        )}
      </div>
    </div>
  );
};

export default ProfileDetails;
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/supportNetwork.css`:

```````css
.support-network {
    padding: 20px;
  }
  
  .support-network h2 {
    color: var(--color-primary);
    font-size: 24px;
    margin-bottom: 20px;
    border-bottom: 2px solid var(--color-primary-light);
    padding-bottom: 10px;
  }
  
  .network-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
    list-style-type: none;
    padding: 0;
  }
  
  .supporter-item {
    background-color: var(--color-background-tertiary);
    border-radius: 10px;
    padding: 20px;
    text-align: center;
    transition: transform 0.3s ease;
  }
  
  .supporter-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }
  
  .supporter-item img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 10px;
  }
  
  .supporter-info h3 {
    color: var(--color-primary-dark);
    font-size: 18px;
    margin-bottom: 5px;
  }
  
  .supporter-info p {
    color: var(--color-text-secondary);
    font-size: 14px;
  }
  
  .add-supporter-button {
    background-color: var(--color-primary);
    color: var(--color-text-light);
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
  }
  
  .add-supporter-button:hover {
    background-color: var(--color-primary-dark);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profileContent.css`:

```````css
.profile-content-container {
  background-color: var(--color-background-secondary);
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/profilePosts.css`:

```````css
.profile-posts {
    margin-top: 2rem;
  }
  
  .section-title {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 1rem;
  }
  
  .post-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .post-item {
    background-color: var(--color-background-secondary);
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .post-content {
    font-size: 1.2rem;
    line-height: 1.6;
    color: var(--color-text-primary);
    margin-bottom: 1rem;
  }
  
  .post-actions {
    display: flex;
    justify-content: flex-end;
  }
  
  .like-button,
  .comment-button,
  .share-button {
    background-color: transparent;
    border: none;
    color: var(--color-primary);
    font-size: 1.2rem;
    cursor: pointer;
    margin-left: 1rem;
    transition: color 0.3s ease;
  }
  
  .like-button:hover,
  .comment-button:hover,
  .share-button:hover {
    color: var(--color-primary-dark);
  }
  
  .no-posts {
    font-size: 1.2rem;
    color: var(--color-text-secondary);
    text-align: center;
    font-style: italic;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Profile/UserServices.js`:

```````js
import { doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';
import { db } from '../firebase';

export const updateUserProfile = async (userId, profileData) => {
  const userRef = doc(db, 'users', userId);
  await updateDoc(userRef, profileData);
  const updatedDoc = await getDoc(userRef);
  return updatedDoc.data();
};

export const updateFriendStatus = async (userId, friendId, status) => {
  const userRef = doc(db, 'users', userId);
  await updateDoc(userRef, {
    [`friends.${friendId}`]: status
  });
};

export const supportUser = async (supporterId, supportedId) => {
  const supportedUserRef = doc(db, 'users', supportedId);
  await updateDoc(supportedUserRef, {
    supportNetwork: arrayUnion(supporterId)
  });
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/MoodHistory.js`:

```````js
import React from 'react';
import './EmotionAnalysis.css';

const EmotionAnalysis = ({ analysis }) => {
  const emotions = [
    { name: 'Happiness', value: analysis.happiness },
    { name: 'Sadness', value: analysis.sadness },
    { name: 'Anger', value: analysis.anger },
    { name: 'Fear', value: analysis.fear },
    { name: 'Disgust', value: analysis.disgust },
    { name: 'Surprise', value: analysis.surprise }
  ];

  const dominantEmotion = emotions.reduce((prev, current) => 
    (current.value > prev.value) ? current : prev
  );

  return (
    <div className="emotion-analysis">
      <h2>Emotion Analysis Results</h2>
      <p>Dominant Emotion: <strong>{dominantEmotion.name}</strong></p>
      <div className="emotion-bars">
        {emotions.map(emotion => (
          <div key={emotion.name} className="emotion-bar">
            <div className="emotion-label">{emotion.name}</div>
            <div className="emotion-value-bar" style={{ width: `${emotion.value * 100}%` }}></div>
            <div className="emotion-value">{(emotion.value * 100).toFixed(2)}%</div>
          </div>
        ))}
      </div>
      <p className="analysis-note">
        Note: This analysis is based on voice characteristics and may not always accurately reflect your true emotional state.
      </p>
    </div>
  );
};

export default EmotionAnalysis;
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/voiceService.js`:

```````js
import { db, storage, collection, addDoc, getDocs, query, orderBy, limit, ref, uploadBytesResumable, getDownloadURL } from '../../firebase/firebase';

export const analyzeVoice = async (userId, audioBlob) => {
  try {
    // Upload audio file to Firebase Storage
    const audioRef = ref(storage, `voice_samples/${userId}_${Date.now()}.webm`);
    await uploadBytesResumable(audioRef, audioBlob);
    const audioUrl = await getDownloadURL(audioRef);

    // Here, you would typically send the audioUrl to your backend API for analysis
    // For this example, we'll simulate the analysis with random values
    const analysis = simulateEmotionAnalysis();

    // Save the analysis result to Firestore
    const analysisRef = collection(db, 'voiceAnalysis');
    await addDoc(analysisRef, {
      userId,
      timestamp: new Date().toISOString(),
      audioUrl,
      ...analysis,
    });

    return analysis;
  } catch (error) {
    console.error('Error analyzing voice:', error);
    throw error;
  }
};

export const fetchMoodHistory = async (userId) => {
  try {
    const analysisRef = collection(db, 'voiceAnalysis');
    const q = query(
      analysisRef,
      orderBy('timestamp', 'desc'),
      limit(10) // Limit to the last 10 entries
    );
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => doc.data()).reverse();
  } catch (error) {
    console.error('Error fetching mood history:', error);
    throw error;
  }
};

// Simulated emotion analysis (replace with actual API call in production)
const simulateEmotionAnalysis = () => {
  return {
    happiness: Math.random(),
    sadness: Math.random(),
    anger: Math.random(),
    fear: Math.random(),
    disgust: Math.random(),
    surprise: Math.random(),
  };
};

export default {
  analyzeVoice,
  fetchMoodHistory,
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/EmotionAnalysis.css`:

```````css
.emotion-analysis {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1.5rem;
  }
  
  .emotion-bars {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .emotion-bar {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .emotion-label {
    width: 100px;
    font-weight: bold;
  }
  
  .emotion-value-bar {
    height: 20px;
    background-color: #4CAF50;
    border-radius: 10px;
    transition: width 0.5s ease-in-out;
  }
  
  .emotion-value {
    width: 60px;
    text-align: right;
  }
  
  .analysis-note {
    font-size: 0.9rem;
    font-style: italic;
    margin-top: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/EmotionAnalysis.js`:

```````js
import React from 'react';
import './EmotionAnalysis.css';

const EmotionAnalysis = ({ analysis }) => {
  const emotions = [
    { name: 'Happiness', value: analysis.happiness },
    { name: 'Sadness', value: analysis.sadness },
    { name: 'Anger', value: analysis.anger },
    { name: 'Fear', value: analysis.fear },
    { name: 'Disgust', value: analysis.disgust },
    { name: 'Surprise', value: analysis.surprise }
  ];

  const dominantEmotion = emotions.reduce((prev, current) => 
    (current.value > prev.value) ? current : prev
  );

  return (
    <div className="emotion-analysis">
      <h2>Emotion Analysis Results</h2>
      <p>Dominant Emotion: <strong>{dominantEmotion.name}</strong></p>
      <div className="emotion-bars">
        {emotions.map(emotion => (
          <div key={emotion.name} className="emotion-bar">
            <div className="emotion-label">{emotion.name}</div>
            <div className="emotion-value-bar" style={{ width: `${emotion.value * 100}%` }}></div>
            <div className="emotion-value">{(emotion.value * 100).toFixed(2)}%</div>
          </div>
        ))}
      </div>
      <p className="analysis-note">
        Note: This analysis is based on voice characteristics and may not always accurately reflect your true emotional state.
      </p>
    </div>
  );
};

export default EmotionAnalysis;
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/Voice.css`:

```````css
.voice-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .voice-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .voice-container button {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .voice-container button:hover {
    background-color: #45a049;
  }
  
  .voice-container button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
  
  .error-message {
    color: #ff0000;
    font-weight: bold;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/MoodHistory.css`:

```````css
.mood-history {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 1.5rem;
  }
  
  .mood-history h2 {
    margin-bottom: 1rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/Voice.js`:

```````js
import React, { useState, useEffect, useRef } from 'react';
import { useUserContext } from '../User/UserContext';
import VoiceRecorder from './VoiceRecorder';
import EmotionAnalysis from './EmotionAnalysis';
import MoodHistory from './MoodHistory';
import { analyzeVoice, fetchMoodHistory } from './voiceService';
import './Voice.css';
import Navbar from '../Routes/Navbar';

const Voice = () => {
  const { user } = useUserContext();
  const [isRecording, setIsRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState(null);
  const [emotionAnalysis, setEmotionAnalysis] = useState(null);
  const [moodHistory, setMoodHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadMoodHistory();
  }, [user]);

  const loadMoodHistory = async () => {
    try {
      const history = await fetchMoodHistory(user.uid);
      setMoodHistory(history);
    } catch (error) {
      console.error('Error fetching mood history:', error);
      setError('Failed to load mood history. Please try again later.');
    }
  };

  const handleStartRecording = () => {
    setIsRecording(true);
    setAudioBlob(null);
    setEmotionAnalysis(null);
    setError(null);
  };

  const handleStopRecording = (blob) => {
    setIsRecording(false);
    setAudioBlob(blob);
  };

  const handleAnalyzeVoice = async () => {
    if (!audioBlob) {
      setError('Please record your voice first.');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const analysis = await analyzeVoice(user.uid, audioBlob);
      setEmotionAnalysis(analysis);
      await loadMoodHistory();
    } catch (error) {
      console.error('Error analyzing voice:', error);
      setError('Failed to analyze voice. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    
      
      <div className="voice-container">
        <h1>Voice Mood Tracker</h1>
        <div className="voice-content">
          <VoiceRecorder
            isRecording={isRecording}
            onStartRecording={handleStartRecording}
            onStopRecording={handleStopRecording}
          />
          {audioBlob && (
            <button onClick={handleAnalyzeVoice} disabled={isLoading}>
              {isLoading ? 'Analyzing...' : 'Analyze Voice'}
            </button>
          )}
          {error && <p className="error-message">{error}</p>}
          {emotionAnalysis && <EmotionAnalysis analysis={emotionAnalysis} />}
          <MoodHistory history={moodHistory} />
        </div>
      </div>
    
  );
};

export default Voice;
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/VoiceRecorder.js`:

```````js
import React, { useRef, useEffect } from 'react';
import './VoiceRecorder.css';

const VoiceRecorder = ({ isRecording, onStartRecording, onStopRecording }) => {
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);

  useEffect(() => {
    if (isRecording) {
      startRecording();
    } else {
      stopRecording();
    }
  }, [isRecording]);

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorderRef.current = new MediaRecorder(stream);
      audioChunksRef.current = [];

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorderRef.current.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        onStopRecording(audioBlob);
      };

      mediaRecorderRef.current.start();
    } catch (error) {
      console.error('Error starting recording:', error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
      mediaRecorderRef.current.stop();
      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());
    }
  };

  return (
    <div className="voice-recorder">
      <button
        onClick={isRecording ? stopRecording : onStartRecording}
        className={isRecording ? 'recording' : ''}
      >
        {isRecording ? 'Stop Recording' : 'Start Recording'}
      </button>
      {isRecording && <div className="recording-indicator">Recording...</div>}
    </div>
  );
};

export default VoiceRecorder;
```````

`/Users/charlesdeng/code/rintzai/src/components/Voice/VoiceRecorder.css`:

```````css
.voice-recorder {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  
  .voice-recorder button {
    padding: 1rem 2rem;
    font-size: 1.2rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .voice-recorder button:hover {
    background-color: #45a049;
    transform: scale(1.05);
  }
  
  .voice-recorder button.recording {
    background-color: #f44336;
    animation: pulse 1.5s infinite;
  }
  
  .recording-indicator {
    font-size: 1rem;
    color: #f44336;
    font-weight: bold;
  }
  
  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/WelcomeMessage.js`:

```````js
import React from 'react';
import "./WelcomeMessage.css";

const WelcomeMessage = ({ user }) => {
  const userName = user?.displayName || user?.email || 'Guest';

  return (
    <h1 className="welcome-message">Welcome back, {userName}</h1>
  );
};

export default WelcomeMessage;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/searchBar.css`:

```````css
/* .search-bar {
  position: relative;
  width: 100%;
  margin-bottom: 1rem;
}

.search-input {
  width: 100%;
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: 1px solid var(--border-color);
  border-radius: 20px;
  font-size: 1rem;
  background-color: var(--background-color);
  color: var(--text-color);
  transition: all var(--transition-speed) ease;
}

.search-input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px var(--shadow-color);
}

.search-icon {
  position: absolute;
  top: 50%;
  left: 1rem;
  transform: translateY(-50%);
  color: var(--text-color-light);
  pointer-events: none;
}

.search-input::placeholder {
  color: var(--text-color-light);
} */
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/Display.js`:

```````js
import React, { useState, useEffect, useCallback, lazy, Suspense } from 'react';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import imageCompression from 'browser-image-compression';
import './display.css';
import Header from './Header';
import Navbar from '../Routes/Navbar';
import { useUserContext } from '../User/UserContext';
import { collection, query, where, getDocs, addDoc, deleteDoc, doc, updateDoc, orderBy, limit, startAfter, getDoc } from 'firebase/firestore';
import { db, storage, ref, uploadBytesResumable, getDownloadURL, arrayUnion } from '../../firebase/firebase';
import NewPostModal from './NewPostModal';
import PostModal from './PostModal';
import LoadingSpinner from './LoadingSpinner';
import SearchBar from './SearchBar';
import { updateUserProfile, fetchUserProfile } from './profileService';

const Gallery = lazy(() => import('./Gallery'));

const Display = () => {
  const { user, setUser } = useUserContext();
  const [posts, setPosts] = useState([]);
  const [isNewPostModalOpen, setIsNewPostModalOpen] = useState(false);
  const [selectedPost, setSelectedPost] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [lastVisible, setLastVisible] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [avatarUpdateSuccess, setAvatarUpdateSuccess] = useState(false);
  const [isAvatarLoaded, setIsAvatarLoaded] = useState(false);

  const fetchPosts = useCallback(async () => {
    if (user && hasMore && isAvatarLoaded) {
      setIsLoading(true);
      try {
        const postsRef = collection(db, 'posts');
        let q = query(
          postsRef,
          where('userId', '==', user.uid),
          orderBy('createdAt', 'desc'),
          limit(12)
        );

        if (lastVisible) {
          q = query(q, startAfter(lastVisible));
        }

        const querySnapshot = await getDocs(q);
        const fetchedPosts = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));

        setPosts((prevPosts) => {
          const newPosts = fetchedPosts.filter(
            (newPost) => !prevPosts.some((prevPost) => prevPost.id === newPost.id)
          );
          return [...prevPosts, ...newPosts];
        });
        setLastVisible(querySnapshot.docs[querySnapshot.docs.length - 1]);
        setHasMore(querySnapshot.docs.length === 12);
      } catch (error) {
        console.error('Error fetching posts:', error);
        toast.error('Failed to load posts. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  }, [user, hasMore, lastVisible, isAvatarLoaded]);

  useEffect(() => {
    if (isAvatarLoaded) {
      fetchPosts();
    }
  }, [fetchPosts, isAvatarLoaded]);

  useEffect(() => {
    const fetchUserData = async () => {
      if (user && user.uid) {
        try {
          const userData = await fetchUserProfile(user.uid);
          if (userData && userData.photoURL) {
            setUser(prevUser => ({ ...prevUser, photoURL: userData.photoURL }));
          }
          setIsAvatarLoaded(true);
        } catch (error) {
          console.error('Error fetching user profile:', error);
          setIsAvatarLoaded(true);
        }
      }
    };
    fetchUserData();
  }, [user, setUser]);

  const handleNewPostClick = () => setIsNewPostModalOpen(true);
  const handleNewPostModalClose = () => setIsNewPostModalOpen(false);

  const handleNewPostSubmit = async (newPost) => {
    try {
      setIsLoading(true);
      const compressedFile = await imageCompression(newPost.file, {
        maxSizeMB: 1,
        maxWidthOrHeight: 1920
      });
      const fileUrl = await uploadFile(compressedFile);
      const postData = {
        type: newPost.type,
        caption: newPost.caption,
        location: newPost.location,
        altText: newPost.altText,
        url: fileUrl,
        userId: user.uid,
        createdAt: new Date(),
        tags: newPost.tags,
      };
      const docRef = await addDoc(collection(db, 'posts'), postData);
      setPosts(prevPosts => [{ id: docRef.id, ...postData }, ...prevPosts]);
      setIsNewPostModalOpen(false);
      toast.success('Post created successfully!');
    } catch (error) {
      console.error('Error creating new post:', error);
      toast.error('Failed to create post. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const uploadFile = async (file) => {
    const storageRef = ref(storage, `posts/${Date.now()}_${file.name}`);
    const uploadTask = uploadBytesResumable(storageRef, file);

    return new Promise((resolve, reject) => {
      uploadTask.on(
        'state_changed',
        (snapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          console.log(`Upload is ${progress}% done`);
        },
        (error) => {
          console.error('Error uploading file:', error);
          reject(error);
        },
        async () => {
          try {
            const fileUrl = await getDownloadURL(uploadTask.snapshot.ref);
            resolve(fileUrl);
          } catch (error) {
            console.error('Error getting download URL:', error);
            reject(error);
          }
        }
      );
    });
  };

  const handlePostClick = (post) => {
    setSelectedPost(post);
  };
  
  const handlePostModalClose = () => setSelectedPost(null);

  const handleDeletePost = async (postId) => {
    try {
      setIsLoading(true);
      await deleteDoc(doc(db, 'posts', postId));
      setPosts(posts.filter((post) => post.id !== postId));
      toast.success('Post deleted successfully!');
    } catch (error) {
      console.error('Error deleting post:', error);
      toast.error('Failed to delete post. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleEditPost = async (postId, updatedData) => {
    try {
      setIsLoading(true);
      const postRef = doc(db, 'posts', postId);
      await updateDoc(postRef, updatedData);
      setPosts(posts.map((post) => 
        post.id === postId ? { ...post, ...updatedData } : post
      ));
      toast.success('Post updated successfully!');
    } catch (error) {
      console.error('Error updating post:', error);
      toast.error('Failed to update post. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddComment = async (postId, comment) => {
    try {
      const postRef = doc(db, 'posts', postId);
      const postDoc = await getDoc(postRef);
      
      if (!postDoc.exists()) {
        console.error('Post does not exist:', postId);
        return;
      }
  
      await updateDoc(postRef, {
        comments: arrayUnion(comment)
      });
      setPosts(posts.map(post => 
        post.id === postId 
          ? { ...post, comments: [...(post.comments || []), comment] }
          : post
      ));
    } catch (error) {
      console.error('Error adding comment:', error);
    }
  };
  
  const handleAddTag = async (postId, tag) => {
    try {
      const postRef = doc(db, 'posts', postId);
      const postDoc = await getDoc(postRef);
      
      if (!postDoc.exists()) {
        console.error('Post does not exist:', postId);
        return;
      }
  
      await updateDoc(postRef, {
        tags: arrayUnion(tag)
      });
      setPosts(posts.map(post => 
        post.id === postId 
          ? { ...post, tags: [...(post.tags || []), tag] }
          : post
      ));
    } catch (error) {
      console.error('Error adding tag:', error);
    }
  };

  const handleAvatarUpdate = async (newAvatarUrl) => {
    try {
      await updateUserProfile(user.uid, { photoURL: newAvatarUrl });
      setUser(prevUser => ({
        ...prevUser,
        photoURL: newAvatarUrl
      }));
      if (!avatarUpdateSuccess) {
        setAvatarUpdateSuccess(true);
      }
    } catch (error) {
      console.error('Error updating avatar:', error);
      toast.error('Failed to update avatar. Please try again.');
    }
  };

  const filteredPosts = posts.filter(post => 
    post.caption.toLowerCase().includes(searchTerm.toLowerCase()) ||
    post.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  return (
    
    <div className="display-container">
      <div className="display-content">
        <div className="display-sidebar">
          <SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} />
        </div>
        <div className="display-main">
        <Header 
            user={user} 
            posts={posts} 
            onNewPostClick={handleNewPostClick}
            onAvatarUpdate={handleAvatarUpdate}
            isAvatarLoaded={isAvatarLoaded}
          />
          {isAvatarLoaded && (
            <Suspense fallback={<LoadingSpinner />}>
              <Gallery 
                posts={filteredPosts} 
                onPostClick={handlePostClick}
              />
            </Suspense>
          )}
          {hasMore && isAvatarLoaded && (
            <button onClick={fetchPosts} className="load-more-button">
              Load more
            </button>
          )}
        </div>
      </div>
      {isNewPostModalOpen && (
        <NewPostModal
          onClose={handleNewPostModalClose}
          onSubmit={handleNewPostSubmit}
        />
      )}
      {selectedPost && (
        <PostModal 
          post={selectedPost} 
          onClose={handlePostModalClose}
          onDelete={handleDeletePost}
          onEdit={handleEditPost}
          addComment={handleAddComment}
          addTag={handleAddTag}
        />
      )}
      <ToastContainer position="bottom-right" limit={1} />
    </div>

    
  );
};

export default Display;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/DetailsPage.js`:

```````js
import React from 'react';
import './detailsPage.css';

const DetailsPage = ({ caption, setCaption, location, setLocation, altText, setAltText, tags, setTags }) => {
  const handleTagChange = (e) => {
    setTags(e.target.value.split(',').map(tag => tag.trim()));
  };

  return (
    <div className="details-page">
      <div className="form-group">
        <label htmlFor="caption-input">Caption</label>
        <textarea
          id="caption-input"
          className="caption-input"
          placeholder="Write a caption..."
          value={caption}
          onChange={(e) => setCaption(e.target.value)}
        />
      </div>
      <div className="form-group">
        <label htmlFor="location-input">Location</label>
        <input
          id="location-input"
          className="location-input"
          type="text"
          placeholder="Add location"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
        />
      </div>
      <div className="form-group">
        <label htmlFor="alt-text-input">Alt Text</label>
        <input
          id="alt-text-input"
          className="alt-text-input"
          type="text"
          placeholder="Add alternative text"
          value={altText}
          onChange={(e) => setAltText(e.target.value)}
        />
      </div>
      <div className="form-group">
        <label htmlFor="tags-input">Tags</label>
        <input
          id="tags-input"
          className="tags-input"
          type="text"
          placeholder="Add tags (comma-separated)"
          value={tags.join(', ')}
          onChange={handleTagChange}
        />
      </div>
      <div className="form-group">
        <button className="submit-button" type="submit">Save Details</button>
      </div>
    </div>
  );
};

export default DetailsPage;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/NewPostModal.js`:

```````js
import React, { useState, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useDropzone } from 'react-dropzone';
import ReactCrop from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import './newPostModal.css';
import { toast } from 'react-toastify';

const DIMENSIONS = {
  square: { width: 1080, height: 1080 },
  portrait: { width: 1080, height: 1350 },
  landscape: { width: 1080, height: 608 },
};

const Stage1 = ({ mediaType, setMediaType, getRootProps, getInputProps, isDragActive }) => (
  <div className="stage-1">
    <h2>Upload {mediaType}</h2>
    <div className="media-type-selector">
      {['image', 'video'].map(type => (
        <label key={type}>
          <input
            type="radio"
            value={type}
            checked={mediaType === type}
            onChange={(e) => setMediaType(e.target.value)}
          />
          {type.charAt(0).toUpperCase() + type.slice(1)}
        </label>
      ))}
    </div>
    <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>
      <input {...getInputProps()} />
      <p>{isDragActive ? 'Drop the files here ...' : "Drag 'n' drop some files here, or click to select files"}</p>
    </div>
  </div>
);

const Stage2 = ({ mediaType, mediaFile, crop, setCrop, handleCropComplete, handleDimensionChange, setStage }) => (
  <div className="stage-2">
    <h2>Edit {mediaType}</h2>
    <select onChange={handleDimensionChange}>
      <option value="square">Square (1:1)</option>
      <option value="portrait">Portrait (4:5)</option>
      <option value="landscape">Landscape (16:9)</option>
    </select>
    {mediaType === 'image' && mediaFile && (
      <ReactCrop
        src={URL.createObjectURL(mediaFile)}
        crop={crop}
        onChange={(newCrop) => setCrop(newCrop)}
        onComplete={handleCropComplete}
      >
        <img src={URL.createObjectURL(mediaFile)} alt="Preview" />
      </ReactCrop>
    )}
    {mediaType === 'video' && mediaFile && (
      <video src={URL.createObjectURL(mediaFile)} controls />
    )}
    <button onClick={() => setStage(3)}>Next</button>
  </div>
);

const Stage3 = ({ mediaType, mediaFile, croppedImageUrl, postDetails, handleInputChange, handleSubmit }) => (
  <div className="stage-3">
    <h2>Add Details</h2>
    <div className="stage-3-content">
      <div className="media-preview">
        {mediaType === 'image' ? (
          <img src={croppedImageUrl || (mediaFile && URL.createObjectURL(mediaFile))} alt="Preview" />
        ) : (
          <video src={mediaFile && URL.createObjectURL(mediaFile)} controls />
        )}
      </div>
      <div className="post-details">
        <textarea
          name="caption"
          placeholder="Write a caption..."
          value={postDetails.caption}
          onChange={handleInputChange}
        />
        <input
          type="text"
          name="location"
          placeholder="Add location"
          value={postDetails.location}
          onChange={handleInputChange}
        />
        <input
          type="text"
          name="altText"
          placeholder="Add alt text"
          value={postDetails.altText}
          onChange={handleInputChange}
        />
        <input
          type="text"
          name="tags"
          placeholder="Add tags (comma separated)"
          value={postDetails.tags}
          onChange={handleInputChange}
        />
        <button onClick={handleSubmit}>Share</button>
      </div>
    </div>
  </div>
);

const Stage4 = () => (
  <div className="stage-4">
    <h2>Uploading Post</h2>
    <div className="loading-spinner">
      <div className="spinner"></div>
    </div>
    <p>Please wait while we upload your post...</p>
  </div>
);

const NewPostModal = ({ onClose, onSubmit }) => {
  const [stage, setStage] = useState(1);
  const [mediaType, setMediaType] = useState('image');
  const [mediaFile, setMediaFile] = useState(null);
  const [postDetails, setPostDetails] = useState({
    caption: '',
    location: '',
    altText: '',
    tags: '',
  });
  const [crop, setCrop] = useState({ unit: '%', width: 100, height: 100, x: 0, y: 0 });
  const [croppedImageUrl, setCroppedImageUrl] = useState(null);
  const [dimensions, setDimensions] = useState(DIMENSIONS.square);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const submitTimeoutRef = useRef(null);

  const onDrop = useCallback((acceptedFiles) => {
    if (acceptedFiles && acceptedFiles.length > 0) {
      setMediaFile(acceptedFiles[0]);
      setStage(2);
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ 
    onDrop,
    accept: mediaType === 'image' 
      ? { 'image/*': ['.jpeg', '.jpg', '.png', '.gif'] }
      : { 'video/*': ['.mp4', '.mov', '.avi'] },
    maxFiles: 1
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isSubmitting) return;
    
    if (mediaFile) {
      setIsSubmitting(true);
      setStage(4);
      
      const newPost = {
        type: mediaType,
        file: mediaFile,
        ...postDetails,
        tags: postDetails.tags.split(',').map(tag => tag.trim()),
        dimensions,
        croppedImageUrl
      };

      try {
        await onSubmit(newPost);
        toast.success('Post created successfully!');
        onClose();
      } catch (error) {
        console.error('Error submitting post:', error);
        toast.error('Failed to create post. Please try again.');
        setStage(3);
      } finally {
        setIsSubmitting(false);
      }
    } else {
      toast.error('Please upload a file');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setPostDetails(prev => ({ ...prev, [name]: value }));
  };

  const handleDimensionChange = (e) => {
    const newDimensions = DIMENSIONS[e.target.value];
    setDimensions(newDimensions);
    setCrop({ 
      unit: '%', 
      width: 100, 
      height: (newDimensions.height / newDimensions.width) * 100,
      x: 0,
      y: 0
    });
  };

  const handleCropComplete = (crop, percentCrop) => {
    if (mediaFile) {
      const reader = new FileReader();
      reader.addEventListener('load', () => setCroppedImageUrl(reader.result));
      reader.readAsDataURL(mediaFile);
    }
  };

  const renderStage = () => {
    switch (stage) {
      case 1:
        return <Stage1 
          mediaType={mediaType} 
          setMediaType={setMediaType} 
          getRootProps={getRootProps} 
          getInputProps={getInputProps} 
          isDragActive={isDragActive}
        />;
      case 2:
        return <Stage2 
          mediaType={mediaType} 
          mediaFile={mediaFile} 
          crop={crop} 
          setCrop={setCrop} 
          handleCropComplete={handleCropComplete} 
          handleDimensionChange={handleDimensionChange}
          setStage={setStage}
        />;
      case 3:
        return <Stage3 
          mediaType={mediaType} 
          mediaFile={mediaFile} 
          croppedImageUrl={croppedImageUrl} 
          postDetails={postDetails} 
          handleInputChange={handleInputChange} 
          handleSubmit={handleSubmit}
        />;
      case 4:
        return <Stage4 />;
      default:
        return null;
    }
  };

  return (
    <AnimatePresence>
      <motion.div 
        className="modal-overlay"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      >
        <motion.div 
          className="new-post-modal"
          initial={{ scale: 0.8, y: -50 }}
          animate={{ scale: 1, y: 0 }}
          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
        >
          <button onClick={onClose} className="close-button" disabled={isSubmitting}>&times;</button>
          {renderStage()}
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
};

export default NewPostModal;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/uploadPage.css`:

```````css
.upload-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 2rem;
  background-color: var(--background-color);
  border-radius: 15px;
  box-shadow: 0 4px 15px var(--shadow-color);
}

.media-type-selector {
  display: flex;
  justify-content: center;
  margin-bottom: 2rem;
}

.media-type-selector label {
  display: flex;
  align-items: center;
  margin: 0 1rem;
  cursor: pointer;
  font-size: 1rem;
  color: var(--text-color);
}

.media-type-selector input[type="radio"] {
  margin-right: 0.5rem;
}

.dropzone {
  width: 100%;
  max-width: 600px;
  height: 200px;
  border: 2px dashed var(--primary-color);
  border-radius: 15px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  margin-bottom: 2rem;
}

.dropzone.active {
  border-color: var(--secondary-color);
  background-color: rgba(80, 200, 120, 0.1);
}

.dropzone p {
  text-align: center;
  color: var(--text-color);
  font-size: 1rem;
}

.media-preview-container {
  width: 100%;
  max-width: 600px;
  margin-top: 2rem;
}

.media-preview {
  width: 100%;
  height: auto;
  max-height: 400px;
  object-fit: contain;
  border-radius: 10px;
  box-shadow: 0 4px 15px var(--shadow-color);
}

@media (max-width: 768px) {
  .upload-page {
    padding: 1.5rem;
  }

  .dropzone {
    height: 150px;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/Post.js`:

```````js
import React from 'react';
import './post.css';

const Post = React.memo(({ post, onClick, onDeletePost }) => {
  const handleClick = (e) => {
    e.stopPropagation();
    onClick();
  };

  const handleDelete = (e) => {
    e.stopPropagation();
    onDeletePost();
  };

  return (
    <div className="post" onClick={handleClick}>
      {post.type === 'image' ? (
        <img
          src={post.url}
          alt={post.caption}
          className="post-media"
          loading="lazy"
        />
      ) : (
        <video
          src={post.url}
          className="post-media"
          preload="metadata"
        />
      )}
      <div className="post-overlay">
        <div className="post-info">
          <p className="post-caption">{post.caption}</p>
          {post.location && <p className="post-location">{post.location}</p>}
        </div>
        <div className="post-actions">
          <div className="post-likes">
            <i className="fas fa-heart"></i>
            <span>{post.likes || 0}</span>
          </div>
          <div className="post-comments">
            <i className="fas fa-comment"></i>
            <span>{post.comments ? post.comments.length : 0}</span>
          </div>
          <button className="delete-button" onClick={handleDelete}>
            <i className="fas fa-trash"></i>
          </button>
        </div>
      </div>
    </div>
  );
});

export default Post;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/gallery.css`:

```````css
.gallery {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1rem;
  padding: 1rem 0;
}

.gallery-item {
  position: relative;
  overflow: hidden;
  border-radius: 10px;
  box-shadow: 0 4px 6px var(--shadow-color);
  transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
  cursor: pointer;
  aspect-ratio: 1 / 1;
}

.gallery-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px var(--shadow-color);
}

.gallery-item-image {
  width: 100%;
  height: 100%;
  position: relative;
}

.gallery-item-image img,
.gallery-item-image video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.gallery-item-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
  color: white;
  padding: 1rem;
  transform: translateY(100%);
  transition: transform var(--transition-speed) ease;
}

.gallery-item:hover .gallery-item-overlay {
  transform: translateY(0);
}

.gallery-item-caption {
  margin: 0;
  font-size: 0.9rem;
  font-weight: 600;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.gallery-item-location {
  font-size: 0.8rem;
  margin-top: 0.5rem;
  opacity: 0.8;
}

.gallery-item-tags {
  margin-top: 0.5rem;
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.gallery-item-tag {
  font-size: 0.7rem;
  background-color: rgba(255, 255, 255, 0.2);
  padding: 0.2rem 0.5rem;
  border-radius: 10px;
}

@media (max-width: 768px) {
  .gallery {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 0.5rem;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/LoadingSpinner.js`:

```````js
import React from 'react';
import './loadingSpinner.css';

const LoadingSpinner = ({ size = 'medium', color = 'primary', text = 'Loading...' }) => {
  return (
    <div className={`loading-spinner-container ${size}`}>
      <div className={`loading-spinner ${color}`}></div>
      {text && <p className="loading-text">{text}</p>}
    </div>
  );
};

export default LoadingSpinner;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/Header.js`:

```````js
import React, { useState, useRef, useEffect } from 'react';
import './header.css';
import { uploadAvatar, fetchUserProfile, updateUserProfile } from './profileService';
import defaultAvatar from '../../assets/default-avatar.png';
import LoadingSpinner from './LoadingSpinner';
import ImageCropper from './ImageCropper';

const Header = ({ user, posts, onNewPostClick, onAvatarUpdate, isAvatarLoaded }) => {
  const [isHovering, setIsHovering] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [avatarError, setAvatarError] = useState(false);
  const [showCropper, setShowCropper] = useState(false);
  const [imageFile, setImageFile] = useState(null);
  const fileInputRef = useRef(null);

  const postCount = posts.length;
  const likeCount = posts.reduce((total, post) => total + (post.likes || 0), 0);
  const commentCount = posts.reduce((total, post) => total + (post.comments ? post.comments.length : 0), 0);

  useEffect(() => {
    const fetchUserData = async () => {
      if (user && user.uid && !isAvatarLoaded) {
        try {
          const userData = await fetchUserProfile(user.uid);
          if (userData && userData.photoURL) {
            onAvatarUpdate(userData.photoURL);
          }
        } catch (error) {
          console.error('Error fetching user profile:', error);
          setAvatarError(true);
        }
      }
    };
    fetchUserData();
  }, [user, onAvatarUpdate, isAvatarLoaded]);

  const handleAvatarClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setImageFile(file);
      setShowCropper(true);
    }
  };

  const handleCroppedImage = async (croppedImage) => {
    setIsUploading(true);
    setShowCropper(false);
    try {
      const avatarUrl = await uploadAvatar(user.uid, croppedImage);
      await updateUserProfile(user.uid, { photoURL: avatarUrl });
      onAvatarUpdate(avatarUrl);
      setAvatarError(false);
    } catch (error) {
      console.error('Error in handleCroppedImage:', error);
      setAvatarError(true);
    } finally {
      setIsUploading(false);
    }
  };

  const avatarSrc = user.photoURL || defaultAvatar;

  return (
    <header className="header">
      <div className="stats-container">
        <div className="stat-item">
          <span className="stat-count">{postCount}</span>
          <span className="stat-label">Posts</span>
        </div>
        <div className="stat-item">
          <span className="stat-count">{likeCount}</span>
          <span className="stat-label">Likes</span>
        </div>
        <div className="stat-item">
          <span className="stat-count">{commentCount}</span>
          <span className="stat-label">Comments</span>
        </div>
      </div>
      <div className="user-info">
        <div 
          className="avatar-container"
          onMouseEnter={() => setIsHovering(true)}
          onMouseLeave={() => setIsHovering(false)}
          onClick={handleAvatarClick}
        >
          {!isAvatarLoaded || isUploading ? (
            <LoadingSpinner size="small" />
          ) : (
            <img 
              src={avatarSrc}
              alt={user.displayName}
              className="user-avatar"
              onError={() => setAvatarError(true)}
            />
          )}
          {(isHovering && !isUploading && isAvatarLoaded) && (
            <div className="avatar-overlay">Click to change</div>
          )}
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            accept="image/*"
            style={{ display: 'none' }}
          />
        </div>
        <div className="user-details">
          <h1>{user.displayName}</h1>
          <p>{user.email}</p>
          <div className="user-bio">{user.bio || 'No bio provided'}</div>
        </div>
      </div>
      <div className="action-container">
        <button onClick={onNewPostClick} className="new-post-button">
          <i className="fas fa-plus"></i> New Post
        </button>
      </div>
      {showCropper && (
        <ImageCropper
          imageFile={imageFile}
          onCropComplete={handleCroppedImage}
          onCancel={() => setShowCropper(false)}
        />
      )}
    </header>
  );
};

export default Header;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/SearchBar.js`:

```````js
import React from 'react';
import './searchBar.css';

const SearchBar = ({ searchTerm, setSearchTerm }) => {
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  return (
    <div className="search-bar">
      <input
        type="text"
        placeholder="Search posts..."
        value={searchTerm}
        onChange={handleSearch}
        className="search-input"
      />
      <i className="fas fa-search search-icon"></i>
    </div>
  );
};

export default SearchBar;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/profileService.js`:

```````js
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db } from '../../firebase/firebase';
import imageCompression from 'browser-image-compression';

export const fetchUserProfile = async (userId) => {
  const profileRef = doc(db, 'users', userId);
  const profileDoc = await getDoc(profileRef);

  if (profileDoc.exists()) {
    return profileDoc.data();
  } else {
    return null;
  }
};

export const updateUserProfile = async (userId, profileData) => {
  const userRef = doc(db, 'users', userId);
  await updateDoc(userRef, profileData);
  const updatedDoc = await getDoc(userRef);
  return updatedDoc.data();
};

export const uploadAvatar = async (userId, file) => {
  const storage = getStorage();
  const avatarRef = ref(storage, `avatars/${userId}`);

  const compressedFile = await imageCompression(file, {
    maxSizeMB: 0.5,
    maxWidthOrHeight: 400,
    useWebWorker: true
  });

  await uploadBytes(avatarRef, compressedFile);
  const downloadURL = await getDownloadURL(avatarRef);

  return downloadURL;
};
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/post.css`:

```````css
.post {
  position: relative;
  width: 100%;
  padding-top: 100%;
  background-color: var(--background-color);
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 4px 6px var(--shadow-color);
  transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
}

.post:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px var(--shadow-color);
}

.post-media {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.post-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 1rem;
  background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
  color: white;
  opacity: 0;
  transition: opacity var(--transition-speed) ease;
}

.post:hover .post-overlay {
  opacity: 1;
}

.post-info {
  margin-bottom: 0.5rem;
}

.post-caption {
  font-size: 0.9rem;
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.post-location {
  font-size: 0.8rem;
  opacity: 0.8;
}

.post-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.post-likes,
.post-comments {
  display: flex;
  align-items: center;
  font-size: 0.9rem;
}

.post-likes i,
.post-comments i {
  margin-right: 0.25rem;
}

.delete-button {
  background: none;
  border: none;
  color: white;
  font-size: 0.9rem;
  cursor: pointer;
  transition: color var(--transition-speed) ease;
}

.delete-button:hover {
  color: #ff6b6b;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/Gallery.js`:

```````js
import React from 'react';
import './gallery.css';

const Gallery = ({ posts, onPostClick }) => {
  return (
    <div className="gallery">
      {posts.map((post) => (
        <div key={post.id} className="gallery-item" onClick={() => onPostClick(post)}>
          <div className="gallery-item-image">
            {post.type === 'image' ? (
              <img src={post.url} alt={post.altText || 'Post image'} loading="lazy" />
            ) : (
              <video src={post.url} />
            )}
          </div>
          <div className="gallery-item-overlay">
            <p className="gallery-item-caption">{post.caption}</p>
            {post.location && <p className="gallery-item-location">{post.location}</p>}
            <div className="gallery-item-tags">
              {post.tags && post.tags.map((tag, index) => (
                <span key={index} className="gallery-item-tag">#{tag}</span>
              ))}
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default Gallery;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/LoadingPage.js`:

```````js
import React from 'react';
import './loadingPage.css';

const LoadingPage = ({ message = 'Loading...' }) => {
  return (
    <div className="loading-page">
      <div className="loading-content">
        <div className="loading-spinner"></div>
        <p className="loading-message">{message}</p>
      </div>
    </div>
  );
};

export default LoadingPage;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/ImageCropper.js`:

```````js
import React, { useState, useCallback } from 'react';
import ReactCrop from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import './imageCropper.css';
const ImageCropper = ({ imageFile, onCropComplete, onCancel }) => {
  const [crop, setCrop] = useState({ unit: '%', width: 100, height: 100, x: 0, y: 0 });
  const [image, setImage] = useState(null);

  const onLoad = useCallback((img) => {
    setImage(img);
  }, []);

  const handleCropComplete = useCallback(async () => {
    if (image && crop.width && crop.height) {
      const canvas = document.createElement('canvas');
      const scaleX = image.naturalWidth / image.width;
      const scaleY = image.naturalHeight / image.height;
      canvas.width = crop.width;
      canvas.height = crop.height;
      const ctx = canvas.getContext('2d');

      ctx.drawImage(
        image,
        crop.x * scaleX,
        crop.y * scaleY,
        crop.width * scaleX,
        crop.height * scaleY,
        0,
        0,
        crop.width,
        crop.height
      );

      canvas.toBlob((blob) => {
        onCropComplete(blob);
      }, 'image/jpeg', 1);
    }
  }, [crop, image, onCropComplete]);

  return (
    <div className="image-cropper">
      <ReactCrop
        src={URL.createObjectURL(imageFile)}
        onImageLoaded={onLoad}
        crop={crop}
        onChange={(newCrop) => setCrop(newCrop)}
        circularCrop
      />
      <div className="cropper-buttons">
        <button onClick={handleCropComplete}>Apply</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
};

export default ImageCropper;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/editPage.css`:

```````css
.edit-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
    background-color: var(--background-color);
    border-radius: 15px;
    box-shadow: 0 4px 15px var(--shadow-color);
  }
  
  .media-preview-container {
    width: 100%;
    max-width: 600px;
    margin-bottom: 2rem;
  }
  
  .media-preview {
    width: 100%;
    height: auto;
    border-radius: 10px;
    overflow: hidden;
  }
  
  .edit-actions {
    width: 100%;
    max-width: 600px;
  }
  
  .filter-controls {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .filter-controls label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 500;
  }
  
  .filter-controls input[type="range"] {
    width: 70%;
  }
  
  .apply-filters-button {
    padding: 0.75rem 1.5rem;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-speed) ease;
    width: 100%;
  }
  
  .apply-filters-button:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px var(--shadow-color);
  }
  
  @media (max-width: 768px) {
    .edit-page {
      padding: 1.5rem;
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/EditPage.js`:

```````js
import React, { useState, useCallback } from 'react';
import ReactCrop from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import './editPage.css';

const EditPage = ({ mediaType, mediaPreview, setMediaPreview }) => {
  const [crop, setCrop] = useState({ unit: '%', x: 0, y: 0, width: 100, height: 100 });
  const [croppedImage, setCroppedImage] = useState(null);
  const [brightness, setBrightness] = useState(100);
  const [contrast, setContrast] = useState(100);
  const [saturation, setSaturation] = useState(100);

  const handleCrop = useCallback((newCrop) => {
    setCrop(newCrop);
  }, []);

  const handleCropComplete = useCallback((croppedArea, croppedAreaPixels) => {
    const canvas = document.createElement('canvas');
    const image = new Image();
    image.src = mediaPreview;
    image.onload = () => {
      const scaleX = image.naturalWidth / canvas.width;
      const scaleY = image.naturalHeight / canvas.height;
      canvas.width = croppedAreaPixels.width;
      canvas.height = croppedAreaPixels.height;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(
        image,
        croppedAreaPixels.x * scaleX,
        croppedAreaPixels.y * scaleY,
        croppedAreaPixels.width * scaleX,
        croppedAreaPixels.height * scaleY,
        0,
        0,
        croppedAreaPixels.width,
        croppedAreaPixels.height
      );
      const croppedImageUrl = canvas.toDataURL();
      setCroppedImage(croppedImageUrl);
      setMediaPreview(croppedImageUrl);
    };
  }, [mediaPreview, setMediaPreview]);

  const handleFilterChange = useCallback((filter, value) => {
    switch (filter) {
      case 'brightness':
        setBrightness(value);
        break;
      case 'contrast':
        setContrast(value);
        break;
      case 'saturation':
        setSaturation(value);
        break;
      default:
        break;
    }
  }, []);

  return (
    <div className="edit-page">
      <div className="media-preview-container">
        {mediaPreview && mediaType === 'image' && (
          <ReactCrop
            src={mediaPreview}
            crop={crop}
            onChange={handleCrop}
            onComplete={handleCropComplete}
            className="media-preview"
          />
        )}
        {mediaPreview && mediaType === 'video' && (
          <div className="media-preview">
            <video src={mediaPreview} controls />
          </div>
        )}
      </div>
      <div className="edit-actions">
        <div className="filter-controls">
          <label>
            Brightness:
            <input
              type="range"
              min="0"
              max="200"
              value={brightness}
              onChange={(e) => handleFilterChange('brightness', e.target.value)}
            />
          </label>
          <label>
            Contrast:
            <input
              type="range"
              min="0"
              max="200"
              value={contrast}
              onChange={(e) => handleFilterChange('contrast', e.target.value)}
            />
          </label>
          <label>
            Saturation:
            <input
              type="range"
              min="0"
              max="200"
              value={saturation}
              onChange={(e) => handleFilterChange('saturation', e.target.value)}
            />
          </label>
        </div>
        <button className="apply-filters-button">Apply Filters</button>
      </div>
    </div>
  );
};

export default EditPage;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/postModal.css`:

```````css
.post-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  backdrop-filter: blur(5px);
}

.post-modal-content {
  background-color: var(--background-color);
  border-radius: 20px;
  display: flex;
  width: 90%;
  max-width: 1000px;
  height: 90vh;
  overflow: hidden;
  box-shadow: 0 10px 30px var(--shadow-color);
  position: relative;
}

.exit-button {
  position: absolute;
  top: 20px;
  right: 20px;
  background: none;
  border: none;
  font-size: 24px;
  color: var(--text-color);
  cursor: pointer;
  z-index: 10;
  transition: color var(--transition-speed) ease;
}

.exit-button:hover {
  color: var(--primary-color);
}

.post-modal-media {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--background-color);
  overflow: hidden;
}

.post-modal-media img,
.post-modal-media video {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.post-modal-info {
  flex: 1;
  padding: 2rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  overflow-y: auto;
}

.post-modal-info textarea,
.post-modal-info input[type="text"] {
  width: 100%;
  padding: 0.75rem;
  margin-bottom: 1rem;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color var(--transition-speed) ease;
  background-color: var(--background-color);
  color: var(--text-color);
}

.post-modal-info textarea:focus,
.post-modal-info input[type="text"]:focus {
  border-color: var(--primary-color);
  outline: none;
  box-shadow: 0 0 0 2px var(--shadow-color);
}

.post-caption,
.post-location {
  margin-bottom: 1rem;
  font-size: 1rem;
}

.post-caption {
  font-weight: 500;
}

.edit-button,
.delete-button,
.save-button {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  font-size: 1rem;
  font-weight: 500;
  margin-top: 1rem;
}

.edit-button {
  background-color: var(--primary-color);
  color: white;
}

.delete-button {
  background-color: #ff6b6b;
  color: white;
}

.save-button {
  background-color: var(--secondary-color);
  color: white;
}

.edit-button:hover,
.delete-button:hover,
.save-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 15px var(--shadow-color);
}

.error-message {
  color: #ff6b6b;
  margin-top: 0.5rem;
}

.comments-section,
.tags-section {
  margin-top: 1.5rem;
}

.comment-item,
.tag-item {
  background-color: var(--border-color);
  padding: 0.75rem;
  margin-bottom: 0.75rem;
  border-radius: 5px;
}

.post-comments,
.post-tags {
  max-height: 200px;
  overflow-y: auto;
  margin-bottom: 1rem;
}

.tag-item {
  display: inline-block;
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
  padding: 0.25rem 0.75rem;
  background-color: var(--border-color);
  border-radius: 15px;
  font-size: 0.9rem;
}

.add-comment,
.add-tag {
  display: flex;
  gap: 0.5rem;
}

.add-comment input,
.add-tag input {
  flex-grow: 1;
}

.add-comment button,
.add-tag button {
  padding: 0.5rem 1rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color var(--transition-speed) ease;
}

.add-comment button:hover,
.add-tag button:hover {
  background-color: var(--secondary-color);
}

@media (max-width: 768px) {
  .post-modal-content {
    flex-direction: column;
    height: 100vh;
  }

  .post-modal-media {
    height: 50vh;
  }

  .post-modal-info {
    padding: 1.5rem;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/loadingSpinner.css`:

```````css
.loading-spinner-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  width: 100%;
}

.loading-spinner {
  border: 4px solid var(--background-color);
  border-top: 4px solid var(--primary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.loading-spinner.secondary {
  border-top-color: var(--secondary-color);
}

.loading-spinner-container.small .loading-spinner {
  width: 30px;
  height: 30px;
}

.loading-spinner-container.medium .loading-spinner {
  width: 50px;
  height: 50px;
}

.loading-spinner-container.large .loading-spinner {
  width: 70px;
  height: 70px;
}

.loading-text {
  margin-top: 1rem;
  font-size: 1rem;
  color: var(--text-color);
  text-align: center;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-spinner-container.small {
  min-height: 50px;
}

.loading-spinner-container.medium {
  min-height: 100px;
}

.loading-spinner-container.large {
  min-height: 150px;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/header.css`:

```````css
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 2rem 0;
  border-bottom: 1px solid var(--border-color);
  margin-bottom: 2rem;
}

.stats-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.user-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  flex-grow: 1;
}

.avatar-container {
  position: relative;
  width: 150px;
  height: 150px;
  margin-bottom: 1rem;
  cursor: pointer;
  overflow: hidden;
  border-radius: 50%;
}

.user-avatar {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: filter 0.3s ease;
}

.avatar-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  font-size: 14px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.avatar-container:hover .avatar-overlay {
  opacity: 1;
}

.avatar-container:hover .user-avatar {
  filter: brightness(0.8);
}

.user-details {
  text-align: center;
}

.user-details h1 {
  font-size: 2rem;
  color: var(--text-color);
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.user-details p {
  font-size: 1rem;
  color: var(--text-color-light);
  margin-bottom: 0.5rem;
}

.user-bio {
  font-size: 0.9rem;
  color: var(--text-color-light);
  max-width: 300px;
  text-align: center;
}

.stat-item {
  text-align: center;
  margin-bottom: 1rem;
}

.stat-count {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--text-color);
  display: block;
}

.stat-label {
  font-size: 0.9rem;
  color: var(--text-color-light);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.action-container {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
}

.new-post-button {
  padding: 0.75rem 1.5rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 30px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  box-shadow: 0 2px 10px var(--shadow-color);
  display: flex;
  align-items: center;
}

.new-post-button i {
  margin-right: 0.5rem;
}

.new-post-button:hover {
  background-color: var(--secondary-color);
  transform: translateY(-2px);
  box-shadow: 0 4px 15px var(--shadow-color);
}

@media (max-width: 768px) {
  .header {
    flex-direction: column;
    align-items: center;
  }

  .stats-container {
    flex-direction: row;
    justify-content: space-around;
    width: 100%;
    margin-bottom: 1.5rem;
  }

  .user-info {
    margin-bottom: 1.5rem;
  }

  .action-container {
    width: 100%;
    align-items: center;
  }

  .new-post-button {
    width: 100%;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/PostModal.js`:

```````js
import React, { useState, useEffect, useCallback } from 'react';
import { useSwipeable } from 'react-swipeable';
import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";
import './postModal.css';

const PostModal = ({ post, onClose, onDelete, onEdit, addComment, addTag }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedPost, setEditedPost] = useState({ ...post });
  const [newComment, setNewComment] = useState('');
  const [newTag, setNewTag] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    setEditedPost({ ...post });
  }, [post]);

  const handleOutsideClick = useCallback((e) => {
    if (e.target.classList.contains('post-modal')) {
      onClose();
    }
  }, [onClose]);

  useEffect(() => {
    document.addEventListener('click', handleOutsideClick);
    return () => {
      document.removeEventListener('click', handleOutsideClick);
    };
  }, [handleOutsideClick]);

  const handlers = useSwipeable({
    onSwipedDown: () => onClose(),
    preventDefaultTouchmoveEvent: true,
    trackMouse: true
  });

  const handleEdit = async () => {
    try {
      await onEdit(post.id, editedPost);
      setIsEditing(false);
      setError('');
    } catch (error) {
      console.error('Error updating post:', error);
      setError('Failed to update post. Please try again.');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditedPost(prev => ({ ...prev, [name]: value }));
  };

  const handleAddComment = async () => {
    if (newComment.trim()) {
      try {
        await addComment(post.id, newComment);
        setEditedPost(prev => ({
          ...prev,
          comments: [...(prev.comments || []), newComment]
        }));
        setNewComment('');
      } catch (error) {
        console.error('Error adding comment:', error);
        setError('Failed to add comment. Please try again.');
      }
    }
  };

  const handleAddTag = async () => {
    if (newTag.trim()) {
      try {
        await addTag(post.id, newTag);
        setEditedPost(prev => ({
          ...prev,
          tags: [...(prev.tags || []), newTag]
        }));
        setNewTag('');
      } catch (error) {
        console.error('Error adding tag:', error);
        setError('Failed to add tag. Please try again.');
      }
    }
  };

  return (
    <div {...handlers} className="post-modal">
      <div className="post-modal-content">
        <button onClick={onClose} className="exit-button" aria-label="Close modal">
          &times;
        </button>
        <div className="post-modal-media">
          <TransformWrapper>
            <TransformComponent>
              {editedPost.type === 'image' ? (
                <img src={editedPost.url} alt={editedPost.altText || 'Post image'} />
              ) : (
                <video src={editedPost.url} controls />
              )}
            </TransformComponent>
          </TransformWrapper>
        </div>
        <div className="post-modal-info">
          {isEditing ? (
            <div className="edit-section">
              <textarea
                name="caption"
                value={editedPost.caption}
                onChange={handleInputChange}
                placeholder="Caption"
                aria-label="Edit caption"
              />
              <input
                type="text"
                name="location"
                value={editedPost.location}
                onChange={handleInputChange}
                placeholder="Location"
                aria-label="Edit location"
              />
              <button onClick={handleEdit} className="save-button" aria-label="Save changes">Save Changes</button>
              {error && <p className="error-message">{error}</p>}
            </div>
          ) : (
            <div className="view-section">
              <p className="post-caption">{editedPost.caption}</p>
              <p className="post-location">{editedPost.location}</p>
              <button onClick={() => setIsEditing(true)} className="edit-button" aria-label="Edit post">Edit</button>
            </div>
          )}
          <div className="comments-section">
            <h3>Comments</h3>
            <div className="post-comments">
              {editedPost.comments && editedPost.comments.map((comment, index) => (
                <p key={index} className="comment-item">{comment}</p>
              ))}
            </div>
            <div className="add-comment">
              <input
                type="text"
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                placeholder="Add a comment"
                aria-label="Add a comment"
              />
              <button onClick={handleAddComment} aria-label="Post comment">Post</button>
            </div>
          </div>
          <div className="tags-section">
            <h3>Tags</h3>
            <div className="post-tags">
              {editedPost.tags && editedPost.tags.map((tag, index) => (
                <span key={index} className="tag-item">#{tag}</span>
              ))}
            </div>
            <div className="add-tag">
              <input
                type="text"
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                placeholder="Add a tag"
                aria-label="Add a tag"
              />
              <button onClick={handleAddTag} aria-label="Add tag">Add</button>
            </div>
          </div>
          <button onClick={() => onDelete(editedPost.id)} className="delete-button" aria-label="Delete post">Delete Post</button>
        </div>
      </div>
    </div>
  );
};

export default PostModal;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/display.css`:

```````css
:root {
  --primary-color: #6c5ce7;
  --secondary-color: #5641e5;
  --background-color: #f8f9fa;
  --text-color: #333;
  --border-color: #e0e0e0;
  --shadow-color: rgba(108, 92, 231, 0.2);
  --transition-speed: 0.3s;
}

body {
  font-family: 'Roboto', sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
}

.display-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.load-more-button {
  display: block;
  margin: 2rem auto;
  padding: 0.75rem 1.5rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 30px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  box-shadow: 0 2px 10px var(--shadow-color);
}

.load-more-button:hover {
  background-color: var(--secondary-color);
  transform: translateY(-2px);
  box-shadow: 0 4px 15px var(--shadow-color);
}

@media (max-width: 768px) {
  .display-container {
    padding: 1rem;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/imageCropper.css`:

```````css
.image-cropper {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .cropper-buttons {
    margin-top: 20px;
  }
  
  .cropper-buttons button {
    margin: 0 10px;
    padding: 10px 20px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .cropper-buttons button:hover {
    background-color: var(--secondary-color);
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/UploadPage.js`:

```````js
import React from 'react';
import { useDropzone } from 'react-dropzone';
import './uploadPage.css';

const UploadPage = ({ mediaType, setMediaType, onFileUpload, mediaPreview }) => {
  const handleMediaTypeChange = (e) => {
    setMediaType(e.target.value);
  };

  const onDrop = (acceptedFiles) => {
    if (acceptedFiles && acceptedFiles.length > 0) {
      console.log('File selected:', acceptedFiles[0]);
      onFileUpload(acceptedFiles[0]);
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ 
    onDrop,
    accept: mediaType === 'image' 
      ? { 'image/*': ['.jpeg', '.jpg', '.png', '.gif'] }
      : { 'video/*': ['.mp4', '.mov', '.avi'] },
    maxFiles: 1
  });

  return (
    <div className="upload-page">
      <div className="media-type-selector">
        <label>
          <input
            type="radio"
            value="image"
            checked={mediaType === 'image'}
            onChange={handleMediaTypeChange}
          />
          Image
        </label>
        <label>
          <input
            type="radio"
            value="video"
            checked={mediaType === 'video'}
            onChange={handleMediaTypeChange}
          />
          Video
        </label>
      </div>
      <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>
        <input {...getInputProps()} />
        <p>{isDragActive ? 'Drop the files here ...' : "Drag 'n' drop some files here, or click to select files"}</p>
      </div>
      {mediaPreview && (
        <div className="media-preview-container">
          {mediaType === 'image' ? (
            <img src={mediaPreview} alt="Media Preview" className="media-preview" />
          ) : (
            <video src={mediaPreview} controls className="media-preview"></video>
          )}
        </div>
      )}
    </div>
  );
};

export default UploadPage;
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/loadingPage.css`:

```````css
.loading-page {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: var(--background-color);
}

.loading-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 2rem;
  background-color: white;
  border-radius: 15px;
  box-shadow: 0 4px 15px var(--shadow-color);
}

.loading-spinner {
  border: 4px solid var(--border-color);
  border-top: 4px solid var(--primary-color);
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
}

.loading-message {
  margin-top: 1rem;
  font-size: 1.2rem;
  color: var(--text-color);
  font-weight: 500;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/newPostModal.css`:

```````css
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  backdrop-filter: blur(5px);
}

.new-post-modal {
  background-color: white;
  padding: 2.5rem;
  border-radius: 20px;
  width: 90%;
  max-width: 800px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  position: relative;
}

.close-button {
  position: absolute;
  top: 1.25rem;
  right: 1.25rem;
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #333;
  cursor: pointer;
  transition: color 0.3s ease;
}

.close-button:hover {
  color: var(--primary-color);
}

.new-post-modal h2 {
  margin-top: 0;
  margin-bottom: 1.25rem;
  font-size: 1.5rem;
  color: #333;
}

.media-type-selector,
.dimension-selector {
  margin-bottom: 1.25rem;
}

.media-type-selector label {
  margin-right: 1rem;
}

.dropzone {
  border: 2px dashed var(--primary-color);
  border-radius: 10px;
  padding: 2rem;
  text-align: center;
  cursor: pointer;
  margin-bottom: 1.25rem;
  transition: all 0.3s ease;
  background-color: var(--background-color);
}

.dropzone.active {
  border-color: var(--secondary-color);
  background-color: #f0f0ff;
}

.stage-2 img,
.stage-2 video,
.stage-3 img,
.stage-3 video {
  max-width: 100%;
  max-height: 400px;
  object-fit: contain;
  border-radius: 10px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.stage-3-content {
  display: flex;
  gap: 1.5rem;
}

.media-preview {
  flex: 1;
}

.post-details {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.new-post-modal textarea,
.new-post-modal input[type="text"] {
  width: 100%;
  padding: 0.75rem;
  margin-bottom: 1rem;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.new-post-modal textarea:focus,
.new-post-modal input[type="text"]:focus {
  border-color: var(--primary-color);
  outline: none;
  box-shadow: 0 0 0 2px var(--shadow-color);
}

.new-post-modal textarea {
  height: 100px;
  resize: vertical;
}

.new-post-modal button {
  padding: 0.75rem 1.5rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.new-post-modal button:hover {
  background-color: var(--secondary-color);
  transform: translateY(-2px);
  box-shadow: 0 4px 15px var(--shadow-color);
}

.stage-4 {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.loading-spinner {
  margin: 1.25rem 0;
}

.spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid var(--primary-color);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .new-post-modal {
    padding: 1.5rem;
  }

  .stage-3-content {
    flex-direction: column;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Display/detailsPage.css`:

```````css
.details-page {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  padding: 2rem;
  background-color: var(--background-color);
  border-radius: 15px;
  box-shadow: 0 4px 15px var(--shadow-color);
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--text-color);
  font-size: 1rem;
}

.caption-input,
.location-input,
.alt-text-input,
.tags-input {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  transition: all var(--transition-speed) ease;
}

.caption-input {
  height: 120px;
  resize: vertical;
}

.caption-input:focus,
.location-input:focus,
.alt-text-input:focus,
.tags-input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px var(--shadow-color);
}

.submit-button {
  padding: 0.75rem 1.5rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  width: 100%;
}

.submit-button:hover {
  background-color: var(--secondary-color);
  transform: translateY(-2px);
  box-shadow: 0 4px 15px var(--shadow-color);
}

@media (max-width: 768px) {
  .details-page {
    padding: 1.5rem;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/loadingSpinner.css`:

```````css
/* LoadingSpinner.css */
.loading-spinner {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f8f9fa;
  }
  
  .spinner {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: 4px solid #ccc;
    border-top-color: #764ba2;
    animation: spin 1s ease-in-out infinite;
    margin-bottom: 20px;
  }
  
  .loading-text {
    font-size: 1.5rem;
    color: #333;
  }
  
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/Community.css`:

```````css
.community-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .community-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .community-nav {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .community-nav button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .community-nav button:hover {
    background-color: #45a049;
  }
  
  .community-main {
    background-color: #f0f0f0;
    border-radius: 8px;
    padding: 2rem;
  }
  
  .loading {
    text-align: center;
    padding: 2rem;
    font-size: 1.2rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/ContributionForm.js`:

```````js
import React, { useState } from 'react';
import './ContributionForm.css';

const ContributionForm = ({ onAddContribution }) => {
  const [contributionType, setContributionType] = useState('copingStrategies');
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    const contributionContent = contributionType === 'copingStrategies' 
      ? { title, description: content }
      : { content };
    onAddContribution(contributionType, contributionContent);
    setTitle('');
    setContent('');
  };

  return (
    <div className="contribution-form">
      <h2>Contribute to the Community</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="contributionType">Contribution Type:</label>
          <select 
            id="contributionType" 
            value={contributionType} 
            onChange={(e) => setContributionType(e.target.value)}
          >
            <option value="copingStrategies">Coping Strategy</option>
            <option value="journalPrompts">Journal Prompt</option>
            <option value="motivationalQuotes">Motivational Quote</option>
          </select>
        </div>
        {contributionType === 'copingStrategies' && (
          <div className="form-group">
            <label htmlFor="title">Title:</label>
            <input 
              type="text" 
              id="title" 
              value={title} 
              onChange={(e) => setTitle(e.target.value)} 
              required 
            />
          </div>
        )}
        <div className="form-group">
          <label htmlFor="content">
            {contributionType === 'copingStrategies' ? 'Description' : 'Content'}:
          </label>
          <textarea 
            id="content" 
            value={content} 
            onChange={(e) => setContent(e.target.value)} 
            required 
          />
        </div>
        <button type="submit">Submit Contribution</button>
      </form>
    </div>
  );
};

export default ContributionForm;
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/MotivationalQuotes.js`:

```````js
import React from 'react';
import './MotivationalQuotes.css';

const MotivationalQuotes = ({ quotes }) => {
  return (
    <div className="motivational-quotes">
      <h2>Community Motivational Quotes</h2>
      <div className="quotes-list">
        {quotes.map((quote, index) => (
          <div key={index} className="quote-item">
            <blockquote>{quote.content}</blockquote>
            <cite>- {quote.author}</cite>
            <div className="quote-meta">
              <span>Contributed by: {quote.authorName}</span>
              <span>Likes: {quote.likes}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MotivationalQuotes;
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/CopingStrategies.css`:

```````css
.coping-strategies {
    margin-bottom: 2rem;
  }
  
  .strategies-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .strategy-item {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .strategy-item h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
  }
  
  .strategy-meta {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/JournalPrompts.js`:

```````js
import React from 'react';
import './JournalPrompts.css';

const JournalPrompts = ({ prompts }) => {
  return (
    <div className="journal-prompts">
      <h2>Community Journal Prompts</h2>
      <div className="prompts-list">
        {prompts.map((prompt, index) => (
          <div key={index} className="prompt-item">
            <p>{prompt.content}</p>
            <div className="prompt-meta">
              <span>Contributed by: {prompt.authorName}</span>
              <span>Likes: {prompt.likes}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default JournalPrompts;
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/JournalPrompts.css`:

```````css
.coping-strategies {
    margin-bottom: 2rem;
  }
  
  .strategies-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .strategy-item {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .strategy-item h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
  }
  
  .strategy-meta {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/ContributionForm.css`:

```````css
.contribution-form {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .contribution-form form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
  }
  
  .form-group label {
    margin-bottom: 0.5rem;
  }
  
  .form-group input,
  .form-group select,
  .form-group textarea {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .form-group textarea {
    min-height: 100px;
  }
  
  .contribution-form button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .contribution-form button:hover {
    background-color: #45a049;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/Community.js`:

```````js
import React, { useState, useEffect } from 'react';
import { useUserContext } from '../User/UserContext';
import CopingStrategies from './CopingStrategies';
import JournalPrompts from './JournalPrompts';
import MotivationalQuotes from './MotivationalQuotes';
import ContributionForm from './ContributionForm';
import { fetchCommunityContent, addContribution } from './communityService';
import './Community.css';
import Navbar from '../Routes/Navbar';

const Community = () => {
  const { user } = useUserContext();
  const [communityContent, setCommunityContent] = useState(null);
  const [activeComponent, setActiveComponent] = useState('CopingStrategies');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadCommunityContent = async () => {
      setIsLoading(true);
      try {
        const content = await fetchCommunityContent();
        console.log('Fetched community content:', content);
        setCommunityContent(content);
      } catch (error) {
        console.error('Error loading community content:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadCommunityContent();
  }, []);

  const handleAddContribution = async (contributionType, content) => {
    try {
      const newContribution = await addContribution(user.uid, contributionType, content);
      console.log('New contribution added:', newContribution);
      setCommunityContent(prevContent => ({
        ...prevContent,
        [contributionType]: [...prevContent[contributionType], newContribution]
      }));
    } catch (error) {
      console.error('Error adding contribution:', error);
    }
  };

  const renderActiveComponent = () => {
    if (!communityContent) return null;

    switch (activeComponent) {
      case 'CopingStrategies':
        return <CopingStrategies strategies={communityContent.copingStrategies} />;
      case 'JournalPrompts':
        return <JournalPrompts prompts={communityContent.journalPrompts} />;
      case 'MotivationalQuotes':
        return <MotivationalQuotes quotes={communityContent.motivationalQuotes} />;
      case 'Contribute':
        return <ContributionForm onAddContribution={handleAddContribution} />;
      default:
        return null;
    }
  };

  if (isLoading) {
    return <div className="loading">Loading community content...</div>;
  }

  return (
      
      <div className="community-container">
        <h1>Mental Health Community</h1>
        <div className="community-content">
          <nav className="community-nav">
            <button onClick={() => setActiveComponent('CopingStrategies')}>Coping Strategies</button>
            <button onClick={() => setActiveComponent('JournalPrompts')}>Journal Prompts</button>
            <button onClick={() => setActiveComponent('MotivationalQuotes')}>Motivational Quotes</button>
            <button onClick={() => setActiveComponent('Contribute')}>Contribute</button>
          </nav>
          <main className="community-main">
            {renderActiveComponent()}
          </main>
        </div>
      </div>

    
  );
};

export default Community;
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/MotivationalQuotes.css`:

```````css
.motivational-quotes {
    margin-bottom: 2rem;
  }
  
  .quotes-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .quote-item {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .quote-item blockquote {
    font-style: italic;
    margin: 0 0 1rem 0;
  }
  
  .quote-item cite {
    display: block;
    text-align: right;
    margin-bottom: 1rem;
  }
  
  .quote-meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.9rem;
    color: #666;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Community/communityService.js`:

```````js
import { db, collection, addDoc, getDocs, query, orderBy, limit } from '../../firebase/firebase';

export const fetchCommunityContent = async () => {
  try {
    const copingStrategies = await fetchCollectionData('copingStrategies');
    const journalPrompts = await fetchCollectionData('journalPrompts');
    const motivationalQuotes = await fetchCollectionData('motivationalQuotes');

    return {
      copingStrategies,
      journalPrompts,
      motivationalQuotes
    };
  } catch (error) {
    console.error('Error fetching community content:', error);
    throw error;
  }
};

const fetchCollectionData = async (collectionName) => {
  const collectionRef = collection(db, collectionName);
  const q = query(collectionRef, orderBy('createdAt', 'desc'), limit(20));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
};

export const addContribution = async (userId, contributionType, content) => {
  try {
    const collectionRef = collection(db, contributionType);
    const contributionData = {
      ...content,
      authorId: userId,
      authorName: 'Anonymous', // You might want to fetch the user's name here
      likes: 0,
      createdAt: new Date().toISOString()
    };
    const docRef = await addDoc(collectionRef, contributionData);
    return { id: docRef.id, ...contributionData };
  } catch (error) {
    console.error('Error adding contribution:', error);
    throw error;
  }
};

export default {
  fetchCommunityContent,
  addContribution
};
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/PhysicalSensations.js`:

```````js
import React, { useState } from 'react';
import './physicalSensations.css';

const sensations = [
  'Tension', 'Relaxation', 'Warmth', 'Cold', 'Tingling',
  'Numbness', 'Heaviness', 'Lightness', 'Pain', 'Nausea',
];

const PhysicalSensations = ({ onSensationsSelect }) => {
  const [selectedSensations, setSelectedSensations] = useState([]);

  const handleSensationClick = (sensation) => {
    const updatedSensations = selectedSensations.includes(sensation)
      ? selectedSensations.filter(s => s !== sensation)
      : [...selectedSensations, sensation];
    setSelectedSensations(updatedSensations);
    onSensationsSelect(updatedSensations);
  };

  return (
    <div className="physical-sensations">
      <h3>Physical Sensations</h3>
      <div className="sensation-buttons">
        {sensations.map(sensation => (
          <button
            key={sensation}
            className={`sensation-button ${selectedSensations.includes(sensation) ? 'selected' : ''}`}
            onClick={() => handleSensationClick(sensation)}
          >
            {sensation}
          </button>
        ))}
      </div>
    </div>
  );
};

export default PhysicalSensations;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/feelingWheel.css`:

```````css
.feeling-wheel {
    margin-bottom: 2rem;
  }
  
  .feeling-wheel-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
  }
  
  .feeling-category {
    background-color: #f0f0f0;
    border-radius: 10px;
    padding: 1rem;
    width: calc(33.33% - 1rem);
  }
  
  .feeling-category h4 {
    margin-bottom: 0.5rem;
    text-align: center;
  }
  
  .sub-feelings {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .feeling-button {
    padding: 0.5rem;
    font-size: 0.9rem;
    border: none;
    border-radius: 15px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .feeling-button.selected {
    background-color: #4CAF50;
    color: white;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/physicalSensations.css`:

```````css
.physical-sensations {
    margin-bottom: 2rem;
  }
  
  .sensation-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .sensation-button {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    border: 1px solid #ddd;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .sensation-button.selected {
    background-color: #4CAF50;
    color: white;
    border-color: #4CAF50;
  }
  
  .sensation-button:hover {
    background-color: #f0f0f0;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/thoughtTypeSelector.css`:

```````css
.thought-type-selector {
    margin-bottom: 2rem;
  }
  
  .thought-type-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .thought-type-button {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    border: 1px solid #ddd;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    background-color: #fff;
  }
  
  .thought-type-button:hover {
    background-color: #f0f0f0;
  }
  
  .thought-type-button.selected {
    background-color: #4CAF50;
    color: white;
    border-color: #4CAF50;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/MoodTracker.js`:

```````js
import React, { useState, useEffect } from 'react';
import Layout from '../Layout';
import { collection, addDoc, query, where, getDocs } from 'firebase/firestore';
import { Navigate } from 'react-router-dom';
import { useUserContext } from '../User/UserContext';
import './moodTracker.css';
import MoodInsights from './MoodInsights';
import MoodChart from './MoodChart';
import FeelingWheel from './FeelingWheel';
import ThoughtTypeSelector from './ThoughtTypeSelector';
import PhysicalSensations from './PhysicalSensations';
import SignificantChanges from './SignificantChanges';
import MoodCalendar from './MoodCalender';
import ProgressReport from './ProgressReport';
import { db } from '../../firebase/firebase';



const MoodTracker = () => {
  const { user } = useUserContext();
  const [selectedMood, setSelectedMood] = useState(null);
  const [moodIntensity, setMoodIntensity] = useState(5);
  const [selectedFeelings, setSelectedFeelings] = useState([]);
  const [thoughtType, setThoughtType] = useState(null);
  const [physicalSensations, setPhysicalSensations] = useState([]);
  const [significantChanges, setSignificantChanges] = useState([]);
  const [moodNotes, setMoodNotes] = useState('');
  const [moodEntries, setMoodEntries] = useState([]);

  useEffect(() => {
    const fetchMoodEntries = async () => {
      if (user) {
        const moodRef = collection(db, 'moodEntries');
        const q = query(moodRef, where('userId', '==', user.uid));
        const querySnapshot = await getDocs(q);
        const entries = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setMoodEntries(entries);
        console.log('Fetched mood entries:', entries);
      }
    };

    fetchMoodEntries();
  }, [user]);

  const handleMoodSelect = (mood) => {
    setSelectedMood(mood);
    console.log('Selected mood:', mood);
  };

  const handleIntensityChange = (e) => {
    setMoodIntensity(parseInt(e.target.value));
    console.log('Mood intensity:', e.target.value);
  };

  const handleFeelingsSelect = (feelings) => {
    setSelectedFeelings(feelings);
    console.log('Selected feelings:', feelings);
  };

  const handleThoughtTypeSelect = (type) => {
    setThoughtType(type);
    console.log('Selected thought type:', type);
  };

  const handlePhysicalSensationsSelect = (sensations) => {
    setPhysicalSensations(sensations);
    console.log('Selected physical sensations:', sensations);
  };

  const handleSignificantChangesSelect = (changes) => {
    setSignificantChanges(changes);
    console.log('Selected significant changes:', changes);
  };

  const handleNotesChange = (e) => {
    setMoodNotes(e.target.value);
  };

  const submitMood = async () => {
    if (!selectedMood) return;

    const moodData = {
      mood: selectedMood,
      intensity: moodIntensity,
      feelings: selectedFeelings,
      thoughtType: thoughtType,
      physicalSensations: physicalSensations,
      significantChanges: significantChanges,
      notes: moodNotes,
      date: new Date().toISOString(),
      userId: user.uid,
    };

    const moodRef = collection(db, 'moodEntries');
    await addDoc(moodRef, moodData);

    console.log('Mood submitted:', moodData);
    setMoodEntries([...moodEntries, moodData]);
    resetForm();
  };

  const resetForm = () => {
    setSelectedMood(null);
    setMoodIntensity(5);
    setSelectedFeelings([]);
    setThoughtType(null);
    setPhysicalSensations([]);
    setSignificantChanges([]);
    setMoodNotes('');
  };

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  const moodOptions = ['Happy', 'Excited', 'Calm', 'Neutral', 'Sad', 'Angry', 'Anxious'];

  return (
    <Layout>
      <div className="mood-tracker-container">
        <h2 className="mood-tracker-title">Track Your Mood</h2>
        <div className="mood-tracker-form">
          <div className="mood-selection">
            <h3>How are you feeling?</h3>
            <div className="mood-buttons">
              {moodOptions.map((mood) => (
                <button
                  key={mood}
                  className={`mood-button ${selectedMood === mood.toLowerCase() ? 'selected' : ''}`}
                  onClick={() => handleMoodSelect(mood.toLowerCase())}
                >
                  {mood}
                </button>
              ))}
            </div>
          </div>

          <div className="mood-intensity">
            <h3>Intensity</h3>
            <input
              type="range"
              min="1"
              max="10"
              value={moodIntensity}
              onChange={handleIntensityChange}
            />
            <span>{moodIntensity}</span>
          </div>

          <FeelingWheel onFeelingsSelect={handleFeelingsSelect} />
          <ThoughtTypeSelector onThoughtTypeSelect={handleThoughtTypeSelect} />
          <PhysicalSensations onSensationsSelect={handlePhysicalSensationsSelect} />
          <SignificantChanges onChangesSelect={handleSignificantChangesSelect} />

          <div className="mood-notes">
            <h3>Additional Notes</h3>
            <textarea
              value={moodNotes}
              onChange={handleNotesChange}
              placeholder="Add any additional thoughts or context..."
            />
          </div>

          <button onClick={submitMood} disabled={!selectedMood} className="submit-mood-button">
            Submit Mood Entry
          </button>
        </div>

        <div className="mood-tracker-insights">
          <MoodInsights moodEntries={moodEntries} />
          <MoodChart moodEntries={moodEntries} />
          <MoodCalendar moodEntries={moodEntries} />
          <ProgressReport moodEntries={moodEntries} />
        </div>
      </div>
    </Layout>
  );
};

export default MoodTracker;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/significantChanges.css`:

```````css
.significant-changes {
  margin-bottom: 2rem;
}

.change-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.change-button {
  padding: 0.5rem 1rem;
  font-size: 0.9rem;
  border: 1px solid #ddd;
  border-radius: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.change-button.selected {
  background-color: #4CAF50;
  color: white;
  border-color: #4CAF50;
}

.change-button:hover {
  background-color: #f0f0f0;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/FeelingWheel.js`:

```````js
import React, { useState } from 'react';
import './feelingWheel.css';

const feelings = {
  'Happy': ['Optimistic', 'Peaceful', 'Powerful', 'Accepted'],
  'Sad': ['Lonely', 'Vulnerable', 'Despair', 'Guilty'],
  'Angry': ['Hurt', 'Threatened', 'Hateful', 'Hostile'],
  'Fearful': ['Scared', 'Anxious', 'Insecure', 'Weak'],
  'Surprised': ['Startled', 'Confused', 'Amazed', 'Excited'],
  'Disgusted': ['Disapproval', 'Disappointed', 'Awful', 'Repelled'],
};

const FeelingWheel = ({ onFeelingsSelect }) => {
  const [selectedFeelings, setSelectedFeelings] = useState([]);

  const handleFeelingClick = (feeling) => {
    const updatedFeelings = selectedFeelings.includes(feeling)
      ? selectedFeelings.filter(f => f !== feeling)
      : [...selectedFeelings, feeling];
    setSelectedFeelings(updatedFeelings);
    onFeelingsSelect(updatedFeelings);
  };

  return (
    <div className="feeling-wheel">
      <h3>Feeling Wheel</h3>
      <div className="feeling-wheel-container">
        {Object.entries(feelings).map(([category, subFeelings]) => (
          <div key={category} className="feeling-category">
            <h4>{category}</h4>
            <div className="sub-feelings">
              {subFeelings.map(feeling => (
                <button
                  key={feeling}
                  className={`feeling-button ${selectedFeelings.includes(feeling) ? 'selected' : ''}`}
                  onClick={() => handleFeelingClick(feeling)}
                >
                  {feeling}
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default FeelingWheel;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/SignificantChanges.js`:

```````js
import React, { useState } from 'react';
import './significantChanges.css';

const changes = [
  'Sleep', 'Diet', 'Exercise', 'Work', 'Relationships',
  'Finances', 'Health', 'Living Situation', 'Major Life Event'
];

const SignificantChanges = ({ onChangesSelect }) => {
  const [selectedChanges, setSelectedChanges] = useState([]);

  const handleChangeClick = (change) => {
    const updatedChanges = selectedChanges.includes(change)
      ? selectedChanges.filter(c => c !== change)
      : [...selectedChanges, change];
    setSelectedChanges(updatedChanges);
    onChangesSelect(updatedChanges);
  };

  return (
    <div className="significant-changes">
      <h3>Significant Changes</h3>
      <div className="change-buttons">
        {changes.map(change => (
          <button
            key={change}
            className={`change-button ${selectedChanges.includes(change) ? 'selected' : ''}`}
            onClick={() => handleChangeClick(change)}
          >
            {change}
          </button>
        ))}
      </div>
    </div>
  );
};

export default SignificantChanges;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/MoodCalender.js`:

```````js
import React from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import './moodCalendar.css';

const MoodCalendar = ({ moodEntries }) => {
  const getMoodForDate = (date) => {
    const entry = moodEntries.find(entry => 
      new Date(entry.date).toDateString() === date.toDateString()
    );
    return entry ? entry.mood : null;
  };

  const tileContent = ({ date, view }) => {
    if (view === 'month') {
      const mood = getMoodForDate(date);
      return mood ? <div className={`mood-indicator ${mood}`}></div> : null;
    }
  };

  return (
    <div className="mood-calendar">
      <h3>Mood Calendar</h3>
      <Calendar
        tileContent={tileContent}
        className="react-calendar"
      />
    </div>
  );
};

export default MoodCalendar;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/MoodChart.js`:

```````js
import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import './moodChart.css';

const MoodChart = ({ moodEntries }) => {
  const chartData = moodEntries.map(entry => ({
    date: new Date(entry.date).toLocaleDateString(),
    intensity: entry.intensity,
    mood: entry.mood
  }));

  return (
    <div className="mood-chart">
      <h3>Mood Over Time</h3>
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={chartData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="date" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Line type="monotone" dataKey="intensity" stroke="#8884d8" activeDot={{ r: 8 }} />
          <Line type="monotone" dataKey="mood" stroke="#82ca9d" />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
};

export default MoodChart;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/ProgressReport.js`:

```````js
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import './progressReport.css';

const ProgressReport = ({ moodEntries }) => {
  const getWeeklyMoodData = () => {
    const lastWeek = new Date();
    lastWeek.setDate(lastWeek.getDate() - 7);

    const weeklyData = moodEntries
      .filter(entry => new Date(entry.date) >= lastWeek)
      .reduce((acc, entry) => {
        const day = new Date(entry.date).toLocaleDateString('en-US', { weekday: 'short' });
        if (!acc[day]) {
          acc[day] = { day, count: 0, totalIntensity: 0 };
        }
        acc[day].count += 1;
        acc[day].totalIntensity += entry.intensity;
        return acc;
      }, {});

    return Object.values(weeklyData).map(data => ({
      ...data,
      averageIntensity: data.totalIntensity / data.count
    }));
  };

  const weeklyMoodData = getWeeklyMoodData();

  return (
    <div className="progress-report">
      <h3>Weekly Mood Progress</h3>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={weeklyMoodData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="day" />
          <YAxis yAxisId="left" orientation="left" stroke="#8884d8" />
          <YAxis yAxisId="right" orientation="right" stroke="#82ca9d" />
          <Tooltip />
          <Legend />
          <Bar yAxisId="left" dataKey="count" fill="#8884d8" name="Entries" />
          <Bar yAxisId="right" dataKey="averageIntensity" fill="#82ca9d" name="Avg Intensity" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default ProgressReport;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/moodChart.css`:

```````css
.mood-chart {
    background-color: #fff;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .mood-chart h3 {
    margin-bottom: 1rem;
    color: #333;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/moodInsights.css`:

```````css
.mood-insights {
    background-color: #fff;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .mood-insights h3 {
    margin-bottom: 1rem;
    color: #333;
  }
  
  .insight-section {
    margin-bottom: 1.5rem;
  }
  
  .insight-section h4 {
    margin-bottom: 0.5rem;
    color: #666;
  }
  
  .insight-section ul {
    list-style-type: none;
    padding-left: 0;
  }
  
  .insight-section li {
    margin-bottom: 0.25rem;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/ThoughtTypeSelector.js`:

```````js
import React, { useState } from 'react';
import './thoughtTypeSelector.css';

const thoughtTypes = [
  'All-or-Nothing',
  'Overgeneralization',
  'Mental Filter',
  'Disqualifying the Positive',
  'Jumping to Conclusions',
  'Magnification or Minimization',
  'Emotional Reasoning',
  'Should Statements',
  'Labeling',
  'Personalization',
];

const ThoughtTypeSelector = ({ onThoughtTypeSelect }) => {
  const [selectedType, setSelectedType] = useState(null);

  const handleTypeClick = (type) => {
    setSelectedType(type);
    onThoughtTypeSelect(type);
  };

  return (
    <div className="thought-type-selector">
      <h3>Type of Thoughts</h3>
      <div className="thought-type-buttons">
        {thoughtTypes.map(type => (
          <button
            key={type}
            className={`thought-type-button ${selectedType === type ? 'selected' : ''}`}
            onClick={() => handleTypeClick(type)}
          >
            {type}
          </button>
        ))}
      </div>
    </div>
  );
};

export default ThoughtTypeSelector;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/progressReport.css`:

```````css
.progress-report {
    background-color: #fff;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .progress-report h3 {
    margin-bottom: 1rem;
    color: #333;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/moodCalendar.css`:

```````css
.mood-calendar {
    background-color: #fff;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .mood-calendar h3 {
    margin-bottom: 1rem;
    color: #333;
  }
  
  .react-calendar {
    width: 100%;
    border: none;
    font-family: Arial, sans-serif;
  }
  
  .mood-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin: 0 auto;
  }
  
  .mood-indicator.happy { background-color: #FFD700; }
  .mood-indicator.sad { background-color: #4169E1; }
  .mood-indicator.angry { background-color: #FF4500; }
  .mood-indicator.anxious { background-color: #9932CC; }
  .mood-indicator.neutral { background-color: #808080; }
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/MoodInsights.js`:

```````js
import React from 'react';
import './moodInsights.css';

const MoodInsights = ({ moodEntries }) => {
  const getMoodCounts = () => {
    return moodEntries.reduce((counts, entry) => {
      counts[entry.mood] = (counts[entry.mood] || 0) + 1;
      return counts;
    }, {});
  };

  const getAverageIntensity = () => {
    const sum = moodEntries.reduce((sum, entry) => sum + entry.intensity, 0);
    return (sum / moodEntries.length).toFixed(2);
  };

  const getMostCommonFeelings = () => {
    const feelingCounts = moodEntries.flatMap(entry => entry.feelings)
      .reduce((counts, feeling) => {
        counts[feeling] = (counts[feeling] || 0) + 1;
        return counts;
      }, {});
    return Object.entries(feelingCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([feeling, count]) => `${feeling} (${count})`);
  };

  const moodCounts = getMoodCounts();
  const averageIntensity = getAverageIntensity();
  const mostCommonFeelings = getMostCommonFeelings();

  return (
    <div className="mood-insights">
      <h3>Mood Insights</h3>
      <div className="insight-section">
        <h4>Mood Distribution</h4>
        <ul>
          {Object.entries(moodCounts).map(([mood, count]) => (
            <li key={mood}>{`${mood}: ${count}`}</li>
          ))}
        </ul>
      </div>
      <div className="insight-section">
        <h4>Average Mood Intensity</h4>
        <p>{averageIntensity}</p>
      </div>
      <div className="insight-section">
        <h4>Most Common Feelings</h4>
        <ul>
          {mostCommonFeelings.map((feeling, index) => (
            <li key={index}>{feeling}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default MoodInsights;
```````

`/Users/charlesdeng/code/rintzai/src/components/MoodTracker/moodTracker.css`:

```````css
.mood-tracker-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.mood-tracker-title {
  font-size: 2.5rem;
  text-align: center;
  margin-bottom: 2rem;
  color: #333;
}

.mood-tracker-form {
  background-color: #fff;
  border-radius: 10px;
  padding: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.mood-selection, .mood-intensity, .mood-notes {
  margin-bottom: 2rem;
}

h3 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #333;
}

.mood-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.mood-button {
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  border: none;
  border-radius: 25px;
  cursor: pointer;
  transition: all 0.3s ease;
  background-color: #f0f0f0;
}

.mood-button:hover {
  background-color: #e0e0e0;
}

.mood-button.selected {
  background-color: #4CAF50;
  color: white;
  transform: scale(1.05);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.mood-intensity input {
  width: 100%;
  margin-bottom: 0.5rem;
}

textarea {
  width: 100%;
  min-height: 100px;
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 1rem;
}

.submit-mood-button {
  display: block;
  width: 100%;
  padding: 1rem;
  font-size: 1.2rem;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.submit-mood-button:hover {
  background-color: #45a049;
}

.submit-mood-button:disabled {
  background-color: #ddd;
  cursor: not-allowed;
}

.mood-tracker-insights {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/gratitude.css`:

```````css
.gratitude-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

.gratitude-title {
  font-size: 2.5rem;
  color: #333;
  text-align: center;
  margin-bottom: 1rem;
}

.gratitude-description {
  font-size: 1.2rem;
  color: #666;
  text-align: center;
  margin-bottom: 2rem;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/GratitudeExercises.js`:

```````js
import React from 'react';
import './gratitudeExercises.css';

const GratitudeExercises = () => {
  return (
    <div className="gratitude-exercises-container">
      <h2 className="gratitude-exercises-title">Gratitude Exercises</h2>
      <p className="gratitude-exercises-text">
        Try these gratitude exercises to deepen your appreciation and cultivate a grateful mindset:
      </p>
      <ol className="gratitude-exercises-list">
        <li>
          <strong>Gratitude Journal:</strong> Write down three things you are grateful for each day.
          Reflect on why you are thankful for them.
        </li>
        <li>
          <strong>Gratitude Letter:</strong> Write a letter expressing your gratitude to someone who
          has positively impacted your life. Deliver the letter in person, if possible.
        </li>
        <li>
          <strong>Gratitude Meditation:</strong> Take a few minutes each day to sit quietly and
          focus on the things you are grateful for. Visualize and feel the gratitude in your heart.
        </li>
        <li>
          <strong>Gratitude Walk:</strong> Go for a walk and observe the beauty around you. Notice
          the small things you often overlook and express gratitude for them.
        </li>
        <li>
          <strong>Gratitude Jar:</strong> Write down moments of gratitude on slips of paper and
          place them in a jar. Revisit the jar whenever you need a boost of positivity.
        </li>
      </ol>
    </div>
  );
};

export default GratitudeExercises;
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/gratitudeQuotes.css`:

```````css
.gratitude-quotes-container {
    background-color: #f8f8f8;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .gratitude-quotes-title {
    font-size: 2rem;
    color: #333;
    margin-bottom: 1rem;
    text-align: center;
  }
  
  .gratitude-quotes-list {
    list-style: none;
    padding: 0;
  }
  
  .gratitude-quote {
    margin-bottom: 1.5rem;
  }
  
  .gratitude-quote-text {
    font-size: 1.2rem;
    color: #333;
    font-style: italic;
    margin-bottom: 0.5rem;
  }
  
  .gratitude-quote-author {
    font-size: 1rem;
    color: #888;
    text-align: right;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/Gratitude.js`:

```````js
import React from 'react';
import './gratitude.css';
import GratitudeList from './GratitudeList';
import GratitudeEducation from './GratitudeEducation';
import GratitudeExercises from './GratitudeExercises';
import GratitudeQuotes from './GratitudeQuotes';
import Navbar from '../Routes/Navbar';

const Gratitude = () => {
  return (
    
      
      <div className="gratitude-container">
        <h1 className="gratitude-title">Gratitude</h1>
        <p className="gratitude-description">
          Cultivate a grateful mindset and experience the power of gratitude in your life.
        </p>
        <GratitudeList />
        <GratitudeEducation />
        <GratitudeExercises />
        <GratitudeQuotes />
      </div>
    
  );
};

export default Gratitude;
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/gratitudeList.css`:

```````css
.gratitude-list-container {
  background-color: #f8f8f8;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.gratitude-list-title {
  font-size: 2rem;
  color: #333;
  margin-bottom: 1rem;
  text-align: center;
}

.gratitude-input-container {
  display: flex;
  margin-bottom: 1rem;
}

.gratitude-input {
  flex: 1;
  padding: 0.5rem;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  outline: none;
}

.add-gratitude-button {
  margin-left: 1rem;
  padding: 0.5rem 1rem;
  font-size: 1rem;
  background-color: #4caf50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.add-gratitude-button:hover {
  background-color: #45a049;
}

.gratitude-list {
  list-style: none;
  padding: 0;
}

.gratitude-item {
  background-color: #fff;
  padding: 1rem;
  border-radius: 4px;
  margin-bottom: 1rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.gratitude-text {
  font-size: 1.2rem;
  color: #333;
}

.gratitude-date {
  font-size: 0.9rem;
  color: #888;
}

.delete-gratitude-button {
  background-color: #f44336;
  color: #fff;
  border: none;
  border-radius: 4px;
  padding: 0.5rem 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.delete-gratitude-button:hover {
  background-color: #d32f2f;
}

.no-gratitudes-message {
  text-align: center;
  color: #888;
  font-style: italic;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/gratitudeEducation.css`:

```````css
.gratitude-education-container {
    background-color: #f8f8f8;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }
  
  .gratitude-education-title {
    font-size: 2rem;
    color: #333;
    margin-bottom: 1rem;
  }
  
  .gratitude-education-text {
    font-size: 1.2rem;
    color: #666;
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }
  
  .gratitude-benefits-list {
    list-style: disc;
    margin-left: 2rem;
    font-size: 1.1rem;
    color: #333;
    line-height: 1.6;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/gratitudeExercises.css`:

```````css
.gratitude-exercises-container {
    background-color: #f8f8f8;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
  }
  
  .gratitude-exercises-title {
    font-size: 2rem;
    color: #333;
    margin-bottom: 1rem;
  }
  
  .gratitude-exercises-text {
    font-size: 1.2rem;
    color: #666;
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }
  
  .gratitude-exercises-list {
    list-style: decimal;
    margin-left: 2rem;
    font-size: 1.1rem;
    color: #333;
    line-height: 1.6;
  }
  
  .gratitude-exercises-list li {
    margin-bottom: 1rem;
  }
  
  .gratitude-exercises-list li strong {
    font-weight: bold;
  }
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/GratitudeQuotes.js`:

```````js
import React from 'react';
import './gratitudeQuotes.css';

const GratitudeQuotes = () => {
  const quotes = [
    {
      text: 'Gratitude turns what we have into enough.',
      author: 'Aesop',
    },
    {
      text: 'Gratitude is the healthiest of all human emotions.',
      author: 'Zig Ziglar',
    },
    {
      text: 'Gratitude is the memory of the heart.',
      author: 'Jean Baptiste Massieu',
    },
    {
      text: 'Gratitude unlocks the fullness of life.',
      author: 'Melody Beattie',
    },
    {
      text: 'Gratitude makes sense of our past, brings peace for today, and creates a vision for tomorrow.',
      author: 'Melody Beattie',
    },
  ];

  return (
    <div className="gratitude-quotes-container">
      <h2 className="gratitude-quotes-title">Gratitude Quotes</h2>
      <ul className="gratitude-quotes-list">
        {quotes.map((quote, index) => (
          <li key={index} className="gratitude-quote">
            <p className="gratitude-quote-text">{quote.text}</p>
            <p className="gratitude-quote-author">- {quote.author}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default GratitudeQuotes;
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/GratitudeList.js`:

```````js
import React, { useState } from 'react';
import './gratitudeList.css';

const GratitudeList = () => {
  const [gratitudes, setGratitudes] = useState([]);
  const [newGratitude, setNewGratitude] = useState('');

  const handleInputChange = (e) => {
    setNewGratitude(e.target.value);
  };

  const handleAddGratitude = () => {
    if (newGratitude.trim() !== '') {
      const currentDate = new Date().toLocaleDateString();
      const gratitude = {
        id: Date.now(),
        text: newGratitude,
        date: currentDate,
      };
      setGratitudes([...gratitudes, gratitude]);
      setNewGratitude('');
    }
  };

  const handleDeleteGratitude = (id) => {
    const updatedGratitudes = gratitudes.filter((gratitude) => gratitude.id !== id);
    setGratitudes(updatedGratitudes);
  };

  return (
    <div className="gratitude-list-container">
      <h2 className="gratitude-list-title">My Gratitude List</h2>
      <div className="gratitude-input-container">
        <input
          type="text"
          value={newGratitude}
          onChange={handleInputChange}
          placeholder="I am grateful for..."
          className="gratitude-input"
        />
        <button onClick={handleAddGratitude} className="add-gratitude-button">
          Add Gratitude
        </button>
      </div>
      {gratitudes.length > 0 ? (
        <ul className="gratitude-list">
          {gratitudes.map((gratitude) => (
            <li key={gratitude.id} className="gratitude-item">
              <div className="gratitude-text">{gratitude.text}</div>
              <div className="gratitude-date">{gratitude.date}</div>
              <button
                onClick={() => handleDeleteGratitude(gratitude.id)}
                className="delete-gratitude-button"
              >
                Delete
              </button>
            </li>
          ))}
        </ul>
      ) : (
        <p className="no-gratitudes-message">No gratitudes added yet.</p>
      )}
    </div>
  );
};

export default GratitudeList;
```````

`/Users/charlesdeng/code/rintzai/src/components/Gratitude/GratitudeEducation.js`:

```````js
import React from 'react';
import './gratitudeEducation.css';

const GratitudeEducation = () => {
  return (
    <div className="gratitude-education-container">
      <h2 className="gratitude-education-title">Understanding Gratitude</h2>
      <p className="gratitude-education-text">
        Gratitude is the practice of acknowledging and appreciating the good things in your life. It
        involves focusing on the positive aspects of your experiences and expressing thankfulness
        for them. Cultivating gratitude has been shown to have numerous benefits for mental health
        and overall well-being.
      </p>
      <ul className="gratitude-benefits-list">
        <li>Increases happiness and positive emotions</li>
        <li>Reduces stress and anxiety</li>
        <li>Improves relationships and social connections</li>
        <li>Enhances resilience and coping skills</li>
        <li>Boosts self-esteem and self-worth</li>
      </ul>
    </div>
  );
};

export default GratitudeEducation;
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/LogoutButton.js`:

```````js
import React, { useState } from 'react';
import { signOut } from 'firebase/auth';
import { auth } from '../../firebase/firebase';
import { useUserContext } from '../User/UserContext';
import './logoutButton.css';

const LogoutButton = () => {
  const { logout } = useUserContext();
  const [isLoading, setIsLoading] = useState(false);

  const handleLogoutClick = async () => {
    if (window.confirm('Are you sure you want to log out?')) {
      setIsLoading(true);
      try {
        await signOut(auth);
        logout();
        // Update UI or redirect user after successful logout
      } catch (error) {
        console.error('Logout failed:', error);
        alert('Logout failed. Please try again.');
      } finally {
        setIsLoading(false);
      }
    }
  };

  return (
    <button 
      className={`logout-button ${isLoading ? 'loading' : ''}`} 
      onClick={handleLogoutClick}
      disabled={isLoading}
      aria-label="Logout"
    >
      {isLoading ? 'Logging out...' : 'Logout'}
    </button>
  );
};

export default LogoutButton;
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/logoutButton.css`:

```````css
.logout-button {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 25px;
  background-color: #ff6b6b;
  color: #fff;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  font-size: 1rem;
}

.logout-button:hover {
  background-color: #ff5252;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.logout-button.loading {
  opacity: 0.7;
  cursor: not-allowed;
}

@media (max-width: 768px) {
  .logout-button {
    width: 100%;
    text-align: left;
    padding: 1rem;
    border-radius: 0;
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/Navbar.js`:

```````js
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useUserContext } from '../User/UserContext';
import LogoutButton from './LogoutButton';
import './navbar.css';

const Navbar = () => {
  const { user } = useUserContext();
  const location = useLocation();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState(null);

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

  const navLinks = [
    { label: 'Home', to: '/home' },
    {
      label: 'Tools',
      children: [
        { to: '/mood-tracker', label: 'Mood Tracker' },
        { to: '/journal', label: 'Journal' },
        { to: '/goals', label: 'Goals' },
        { to: '/cbt', label: 'CBT' },
        { to: '/habits', label: 'Habit Tracker' },
        { to: '/dbt', label: 'DBT' },
        { to: '/sleep', label: 'Sleep Tracker' },
        { to: '/vision', label: 'Vision Board' },
        { to: '/music', label: 'Mood Music' },
        { to: '/voice', label: 'Voice Journal' },
        { to: '/progress', label: 'Progress Tracker' },
      ],
    },
    {
      label: 'Wellness',
      children: [
        { to: '/meditation', label: 'Meditation' },
        { to: '/gratitude', label: 'Gratitude' },
        { to: '/quotes', label: 'Quotes' },
        { to: '/affirmations', label: 'Affirmations' },
        { to: '/mental', label: 'Mental Health' },
      ],
    }, 
    { 
      label: 'Community',
      children: [
        { to: '/chat', label: 'Chat' },
        { to: '/resources', label: 'Resources' },
        { to: '/profile', label: 'Profile' },
        { to: '/social', label: 'Social' },
        { to: '/collaboration', label: 'Collaboration' },
        { to: '/community', label: 'Community' },
      ],
    },
    { to: '/recommendations', label: 'Recommendations' },
    { to: '/display', label: 'Display' },
  ];

  const handleDropdownToggle = (label) => {
    setActiveDropdown(activeDropdown === label ? null : label);
  };

  const renderNavLink = (link) => {
    if (link.children) {
      return (
        <div key={link.label} className="navbar-dropdown">
          <button 
            className="navbar-dropdown-toggle"
            onClick={() => handleDropdownToggle(link.label)}
            aria-expanded={activeDropdown === link.label}
          >
            {link.label}
          </button>
          <div className={`navbar-dropdown-content ${activeDropdown === link.label ? 'open' : ''}`}>
            {link.children.map(renderNavLink)}
          </div>
        </div>
      );
    }
    return (
      <Link
        key={link.to}
        to={link.to}
        className={`navbar-link ${location.pathname === link.to ? 'active' : ''}`}
        onClick={() => {
          setIsMenuOpen(false);
          setActiveDropdown(null);
        }}
      >
        {link.label}
      </Link>
    );
  };

  return (
    <nav className="navbar">
      <div className="navbar-container">
        <Link to="/" className="navbar-logo">Rintzai</Link>
        <button className={`menu-toggle ${isMenuOpen ? 'active' : ''}`} onClick={toggleMenu} aria-label="Toggle menu">
          <span></span>
          <span></span>
          <span></span>
        </button>
        <div className={`navbar-links ${isMenuOpen ? 'open' : ''}`}>
          {user && navLinks.map(renderNavLink)}
          {user && <LogoutButton />}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/Logout.js`:

```````js
import { signOut } from 'firebase/auth';


export const handleLogout = async (auth) => {
  try {
    await signOut(auth);
    console.log('Logged out successfully!');


  } catch (error) {
    console.error('Logout failed:', error);
    // Handle logout errors (e.g., display error message to user)
  }
};



```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/login.css`:

```````css
.login-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #91EAE4, #86A8E7, #7F7FD5);
  padding: 2rem;
  font-family: 'Roboto', sans-serif;
}

.login-card {
  background-color: rgba(255, 255, 255, 0.95);
  border-radius: 20px;
  padding: 3rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  max-width: 400px;
  width: 100%;
  animation: fadeInUp 0.5s ease-in-out;
}

@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.login-title {
  text-align: center;
  font-size: 2.5rem;
  color: #333;
  margin-bottom: 0.5rem;
  font-weight: 300;
}

.login-subtitle {
  text-align: center;
  color: #666;
  margin-bottom: 2rem;
}

.login-button {
  width: 100%;
  padding: 0.75rem 1rem;
  border: none;
  border-radius: 50px;
  background-color: #7F7FD5;
  color: white;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.login-button:hover {
  background-color: #6C63FF;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.google-button {
  background-color: #4285F4;
  margin-bottom: 1rem;
}

.google-button:hover {
  background-color: #3367D6;
}

.button-icon {
  margin-right: 10px;
}

.separator {
  display: flex;
  align-items: center;
  text-align: center;
  margin: 1rem 0;
  color: #666;
}

.separator::before,
.separator::after {
  content: '';
  flex: 1;
  border-bottom: 1px solid #ddd;
}

.separator:not(:empty)::before { margin-right: .5em; }
.separator:not(:empty)::after { margin-left: .5em; }

.login-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.form-group {
  position: relative;
}

.form-input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #ddd;
  border-radius: 50px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.form-input:focus {
  border-color: #7F7FD5;
  outline: none;
}

.error-message {
  color: #ff4d4f;
  text-align: center;
  margin-top: 1rem;
}

.signup-text, .forgot-password-link {
  text-align: center;
  margin-top: 1rem;
  color: #666;
}

.signup-link, .forgot-password-link {
  color: #7F7FD5;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.3s ease;
}

.signup-link:hover, .forgot-password-link:hover {
  color: #6C63FF;
}

.logo {
  display: block;
  width: 80px;
  height: auto;
  margin: 0 auto 2rem;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/navbar.css`:

```````css
.navbar {
  background-color: #4a90e2;
  padding: 1rem;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.navbar-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
}

.navbar-logo {
  color: #fff;
  font-size: 1.8rem;
  font-weight: bold;
  text-decoration: none;
  text-transform: uppercase;
  letter-spacing: 2px;
  transition: color 0.3s ease;
}

.navbar-logo:hover {
  color: #e6f2ff;
}

.navbar-links {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.navbar-link, .navbar-dropdown-toggle {
  color: #fff;
  text-decoration: none;
  padding: 0.5rem 1rem;
  border-radius: 25px;
  transition: all 0.3s ease;
  font-weight: 500;
  font-size: 1rem;
}

.navbar-link:hover, .navbar-dropdown-toggle:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.navbar-link.active {
  background-color: #3a7bc8;
  font-weight: bold;
}

.navbar-dropdown {
  position: relative;
}

.navbar-dropdown-toggle {
  background: none;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
}

.navbar-dropdown-toggle::after {
  content: '▼';
  font-size: 0.7em;
  margin-left: 0.5em;
  transition: transform 0.3s ease;
}

.navbar-dropdown-toggle[aria-expanded="true"]::after {
  transform: rotate(180deg);
}

.navbar-dropdown-content {
  display: none;
  position: absolute;
  background-color: #fff;
  min-width: 200px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
  border-radius: 10px;
  overflow: hidden;
  top: 100%;
  left: 0;
}

.navbar-dropdown-content.open {
  display: block;
}

.navbar-dropdown-content .navbar-link {
  color: #333;
  padding: 0.75rem 1rem;
  display: block;
  text-align: left;
  transition: background-color 0.3s ease;
}

.navbar-dropdown-content .navbar-link:hover {
  background-color: #f0f8ff;
}

.menu-toggle {
  display: none;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 30px;
  height: 20px;
  position: relative;
}

.menu-toggle span {
  display: block;
  width: 100%;
  height: 2px;
  background-color: #fff;
  position: absolute;
  left: 0;
  transition: all 0.3s ease;
}

.menu-toggle span:first-child {
  top: 0;
}

.menu-toggle span:nth-child(2) {
  top: 50%;
  transform: translateY(-50%);
}

.menu-toggle span:last-child {
  bottom: 0;
}

.menu-toggle.active span:first-child {
  transform: translateY(9px) rotate(45deg);
}

.menu-toggle.active span:nth-child(2) {
  opacity: 0;
}

.menu-toggle.active span:last-child {
  transform: translateY(-9px) rotate(-45deg);
}

@media (max-width: 768px) {
  .navbar-container {
    flex-direction: column;
    align-items: flex-start;
  }

  .menu-toggle {
    display: block;
    align-self: flex-end;
    margin-top: -2.5rem;
  }

  .navbar-links {
    display: none;
    flex-direction: column;
    width: 100%;
    padding-top: 1rem;
  }

  .navbar-links.open {
    display: flex;
  }

  .navbar-link, .navbar-dropdown-toggle {
    width: 100%;
    text-align: left;
    padding: 1rem;
  }

  .navbar-dropdown {
    width: 100%;
  }

  .navbar-dropdown-content {
    position: static;
    background-color: rgba(255, 255, 255, 0.1);
    box-shadow: none;
    display: none;
  }

  .navbar-dropdown-content.open {
    display: block;
  }

  .navbar-dropdown-content .navbar-link {
    color: #fff;
    padding-left: 2rem;
  }

  .navbar-dropdown-content .navbar-link:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }
}
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/Signup.js`:

```````js
import React, { useState } from 'react';
import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';
import { useNavigate, Link } from 'react-router-dom';
import { useUserContext } from '../User/UserContext';
import { auth } from '../../firebase/firebase';
import { createUserInDB } from '../User/userService';
import './signup.css';
import signup from '../../assets/signup.jpeg';

const Signup = () => {
  const { setUser } = useUserContext();
  const navigate = useNavigate();

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);

    if (!name || !email || !password || !confirmPassword) {
      setError('Please fill in all fields');
      setIsLoading(false);
      return;
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      setIsLoading(false);
      return;
    }

    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      await updateProfile(user, { displayName: name });
      await createUserInDB(user);

      setUser(user);
      navigate('/home');
    } catch (error) {
      console.error("Error during signup:", error);
      setError(error.message || 'Signup failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="signup-container">
      <div className="signup-card">
        <img src={signup} alt="Logo" className="logo" />
        <h2 className="signup-title">Create Your Account</h2>
        <form onSubmit={handleSubmit} className="signup-form">
          <div className="form-group">
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Full Name"
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Email"
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Password"
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="Confirm Password"
              className="form-input"
            />
          </div>
          <button type="submit" className="signup-button" disabled={isLoading}>
            {isLoading ? 'Signing up...' : 'Sign Up'}
          </button>
          {error && <p className="error-message">{error}</p>}
        </form>
        <p className="login-text">
          Already have an account? <Link to="/login" className="login-link">Log in</Link>
        </p>
      </div>
    </div>
  );
};

export default Signup;
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/Login.js`:

```````js
import React, { useState } from 'react';
import { signInWithPopup, GoogleAuthProvider, signInWithEmailAndPassword } from 'firebase/auth';
import { useUserContext } from '../User/UserContext';
import { auth } from '../../firebase/firebase';
import { createUserInDB } from '../User/userService';
import { Link, useNavigate } from 'react-router-dom';
import { FaGoogle } from 'react-icons/fa';
import './login.css';
import logo from '../../assets/logo.png'

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const { setUser } = useUserContext();

  const handleGoogleSignIn = async () => {
    setError(null);
    setIsLoading(true);
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      await createUserInDB(user);
      setUser(user);
      navigate('/home');
    } catch (error) {
      console.error('Google Sign-In error:', error);
      setError('An error occurred during Google Sign-In. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleEmailLogin = async (e) => {
    e.preventDefault();
    setError(null);
    setIsLoading(true);
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      setUser(user);
      navigate('/home');
    } catch (error) {
      console.error('Email/Password Login error:', error);
      setError('Invalid email or password. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <img src={logo} alt="Mental Wellness App Logo" className="logo" />
        <h1 className="login-title">Welcome Back</h1>
        <p className="login-subtitle">Your journey to better mental health continues here</p>
        <button onClick={handleGoogleSignIn} className="login-button google-button" disabled={isLoading}>
          <FaGoogle className="button-icon" />
          {isLoading ? 'Signing in...' : 'Sign in with Google'}
        </button>
        <div className="separator">or</div>
        <form onSubmit={handleEmailLogin} className="login-form">
          <div className="form-group">
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              placeholder="Email"
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="Password"
              className="form-input"
            />
          </div>
          <button type="submit" className="login-button" disabled={isLoading}>
            {isLoading ? 'Logging in...' : 'Log In'}
          </button>
        </form>
        {error && <p className="error-message">{error}</p>}
        <p className="signup-text">
          New to our app? <Link to="/signup" className="signup-link">Create an account</Link>
        </p>
        <Link to="/forgot-password" className="forgot-password-link">Forgot Password?</Link>
      </div>
    </div>
  );
};

export default Login;
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/ErrorBoundary.js`:

```````js
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    this.setState({ error, errorInfo });
    // Log the error to an error reporting service (e.g., Sentry)
    console.error('Error caught by ErrorBoundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-boundary">
          <h1>Oops! Something went wrong.</h1>
          <p>We're sorry for the inconvenience. Our team has been notified and we're working on a fix.</p>
          <button onClick={() => window.location.reload()}>Refresh Page</button>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/ProtectedRoute.js`:

```````js
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useUserContext } from '../User/UserContext';

const ProtectedRoute = () => {
  const { user, isLoading } = useUserContext();

  if (isLoading) {
    return <div className="loading-spinner">Loading...</div>;
  }

  return user ? <Outlet /> : <Navigate to="/login" replace />;
};

export default ProtectedRoute;
```````

`/Users/charlesdeng/code/rintzai/src/components/Routes/signup.css`:

```````css
.signup-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #91EAE4, #86A8E7, #7F7FD5);
  padding: 2rem;
  font-family: 'Roboto', sans-serif;
}

.signup-card {
  background-color: rgba(255, 255, 255, 0.95);
  border-radius: 20px;
  padding: 3rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  max-width: 400px;
  width: 100%;
  animation: fadeInUp 0.5s ease-in-out;
}

@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.signup-title {
  text-align: center;
  margin-bottom: 2rem;
  font-size: 2.5rem;
  color: #333;
  font-weight: 300;
}

.signup-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group {
  position: relative;
}

.form-input {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #ddd;
  border-radius: 50px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.form-input:focus {
  border-color: #7F7FD5;
  outline: none;
}

.signup-button {
  background-color: #7F7FD5;
  color: white;
  padding: 0.75rem 1rem;
  border: none;
  border-radius: 50px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
  font-weight: 500;
}

.signup-button:hover {
  background-color: #6C63FF;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.signup-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.error-message {
  color: #ff4d4f;
  font-weight: 500;
  margin-top: 1rem;
  text-align: center;
}

.login-text {
  text-align: center;
  margin-top: 1.5rem;
  color: #666;
}

.login-link {
  color: #7F7FD5;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.3s ease;
}

.login-link:hover {
  color: #6C63FF;
}

.logo {
  display: block;
  width: 80px;
  height: auto;
  margin: 0 auto 2rem;
}
```````

`/Users/charlesdeng/code/rintzai/src/components/AnimatedArt.js`:

```````js
import React, { useRef, useEffect } from 'react';
import * as THREE from 'three';
import Anime from 'animejs';

const AnimatedArt = () => {
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);

    // Create geometry and material
    const geometry = new THREE.SphereGeometry(1, 32, 32);
    const material = new THREE.MeshBasicMaterial({ color: 0xffffff });
    const sphere = new THREE.Mesh(geometry, material);
    scene.add(sphere);

    // Position camera and light
    camera.position.z = 5;
    const light = new THREE.AmbientLight(0x404040);
    scene.add(light);

    // Animation logic with Anime.js
    const animate = Anime({
      targets: sphere.rotation,
      x: 2 * Math.PI,
      y: 2 * Math.PI,
      z: 2 * Math.PI,
      duration: 8000,
      easing: 'linear',
      loop: true,
    });

    // Resize handler for responsiveness
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };

    window.addEventListener('resize', handleResize);

    // Render loop
    const animateScene = () => {
      requestAnimationFrame(animateScene);
      renderer.render(scene, camera);
    };

    animateScene();

    // Cleanup function
    return () => {
      window.removeEventListener('resize', handleResize);
      animate.pause();
    };
  }, []);

  return <canvas ref={canvasRef} style={{ display: 'block', width: '100%', height: '100%' }} />;
};

export default AnimatedArt;
```````